
Markscat_prj01_V25_09_21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08009950  08009950  0000a950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc8  08009fc8  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd0  08009fd0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009fd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1dc  2**0
                  CONTENTS
 10 .bss          00000510  200001dc  200001dc  0000b1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  200006ec  200006ec  0000b1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010305  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5e  00000000  00000000  0001b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0001e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8b  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000550b  00000000  00000000  0001faab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015af6  00000000  00000000  00024fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe0c  00000000  00000000  0003aaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001068b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047bc  00000000  00000000  001068fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0010b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009934 	.word	0x08009934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009934 	.word	0x08009934

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <Scan_I2C_Address>:
#include <stdio.h>

// 假設 hi2c1 是你的 I2C Handle
// extern I2C_HandleTypeDef hi2c1;

void Scan_I2C_Address(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    printf("--- Starting I2C Bus Scan ---\n");
 8000eda:	481b      	ldr	r0, [pc, #108]	@ (8000f48 <Scan_I2C_Address+0x74>)
 8000edc:	f006 fe3a 	bl	8007b54 <puts>
    HAL_StatusTypeDef status;
    uint8_t found_count = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]

    // I2C 的 7 位地址範圍是 1 到 127
    for (uint8_t i = 1; i < 128; i++) {
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	71bb      	strb	r3, [r7, #6]
 8000ee8:	e019      	b.n	8000f1e <Scan_I2C_Address+0x4a>
        // HAL 庫的函數需要一個左移一位的 8 位地址
        uint16_t device_address = (uint16_t)(i << 1);
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	80bb      	strh	r3, [r7, #4]

        // 嘗試與該地址進行一次簡短的通訊，超時設定得很短
        // `Trials` 設為 1，`Timeout` 設為 10ms
        status = HAL_I2C_IsDeviceReady(&hi2c1, device_address, 1, 10);
 8000ef2:	88b9      	ldrh	r1, [r7, #4]
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <Scan_I2C_Address+0x78>)
 8000efa:	f002 f93f 	bl	800317c <HAL_I2C_IsDeviceReady>
 8000efe:	4603      	mov	r3, r0
 8000f00:	70fb      	strb	r3, [r7, #3]

        // 如果返回 HAL_OK，說明這個地址上有設備在回應
        if (status == HAL_OK) {
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <Scan_I2C_Address+0x44>
            printf("SUCCESS: Found device at I2C address 0x%02X\n", i);
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <Scan_I2C_Address+0x7c>)
 8000f0e:	f006 fdb1 	bl	8007a74 <iprintf>
            found_count++;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3301      	adds	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 1; i < 128; i++) {
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dae1      	bge.n	8000eea <Scan_I2C_Address+0x16>
        }
    }

    if (found_count == 0) {
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <Scan_I2C_Address+0x60>
        printf("RESULT: No I2C devices found on the bus.\n");
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <Scan_I2C_Address+0x80>)
 8000f2e:	f006 fe11 	bl	8007b54 <puts>
    } else {
        printf("--- Scan Finished. Found %u device(s). ---\n", found_count);
    }
}
 8000f32:	e004      	b.n	8000f3e <Scan_I2C_Address+0x6a>
        printf("--- Scan Finished. Found %u device(s). ---\n", found_count);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <Scan_I2C_Address+0x84>)
 8000f3a:	f006 fd9b 	bl	8007a74 <iprintf>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08009aa0 	.word	0x08009aa0
 8000f4c:	200001f8 	.word	0x200001f8
 8000f50:	08009ac0 	.word	0x08009ac0
 8000f54:	08009af0 	.word	0x08009af0
 8000f58:	08009b1c 	.word	0x08009b1c

08000f5c <MX_GPIO_Init>:
     PC3   ------> I2S2_SD
     PA4   ------> I2S3_WS
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b80      	ldr	r3, [pc, #512]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a7f      	ldr	r2, [pc, #508]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b7d      	ldr	r3, [pc, #500]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b79      	ldr	r3, [pc, #484]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a78      	ldr	r2, [pc, #480]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b76      	ldr	r3, [pc, #472]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b72      	ldr	r3, [pc, #456]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a71      	ldr	r2, [pc, #452]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b6f      	ldr	r3, [pc, #444]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b6b      	ldr	r3, [pc, #428]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a6a      	ldr	r2, [pc, #424]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b68      	ldr	r3, [pc, #416]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b64      	ldr	r3, [pc, #400]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a63      	ldr	r2, [pc, #396]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b61      	ldr	r3, [pc, #388]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a5c      	ldr	r2, [pc, #368]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	4857      	ldr	r0, [pc, #348]	@ (800117c <MX_GPIO_Init+0x220>)
 8001020:	f001 fbf2 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	4855      	ldr	r0, [pc, #340]	@ (8001180 <MX_GPIO_Init+0x224>)
 800102a:	f001 fbed 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_CLK_Pin|SEG_DIO_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2130      	movs	r1, #48	@ 0x30
 8001032:	4853      	ldr	r0, [pc, #332]	@ (8001180 <MX_GPIO_Init+0x224>)
 8001034:	f001 fbe8 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_STB_GPIO_Port, SEG_STB_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2101      	movs	r1, #1
 800103c:	4851      	ldr	r0, [pc, #324]	@ (8001184 <MX_GPIO_Init+0x228>)
 800103e:	f001 fbe3 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001048:	484f      	ldr	r0, [pc, #316]	@ (8001188 <MX_GPIO_Init+0x22c>)
 800104a:	f001 fbdd 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800104e:	2308      	movs	r3, #8
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4845      	ldr	r0, [pc, #276]	@ (800117c <MX_GPIO_Init+0x220>)
 8001066:	f001 fa33 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin SEG_CLK_Pin SEG_DIO_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|SEG_CLK_Pin|SEG_DIO_Pin;
 800106a:	2331      	movs	r3, #49	@ 0x31
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	483f      	ldr	r0, [pc, #252]	@ (8001180 <MX_GPIO_Init+0x224>)
 8001082:	f001 fa25 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001086:	2308      	movs	r3, #8
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001096:	2305      	movs	r3, #5
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4837      	ldr	r0, [pc, #220]	@ (8001180 <MX_GPIO_Init+0x224>)
 80010a2:	f001 fa15 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4834      	ldr	r0, [pc, #208]	@ (800118c <MX_GPIO_Init+0x230>)
 80010bc:	f001 fa08 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010c0:	2310      	movs	r3, #16
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010d0:	2306      	movs	r3, #6
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	482c      	ldr	r0, [pc, #176]	@ (800118c <MX_GPIO_Init+0x230>)
 80010dc:	f001 f9f8 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_STB_Pin */
  GPIO_InitStruct.Pin = SEG_STB_Pin;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SEG_STB_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4823      	ldr	r0, [pc, #140]	@ (8001184 <MX_GPIO_Init+0x228>)
 80010f8:	f001 f9ea 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010fc:	2304      	movs	r3, #4
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481d      	ldr	r0, [pc, #116]	@ (8001184 <MX_GPIO_Init+0x228>)
 8001110:	f001 f9de 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI_PE7_Pin GPI_PE8_Pin */
  GPIO_InitStruct.Pin = GPI_PE7_Pin|GPI_PE8_Pin;
 8001114:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4814      	ldr	r0, [pc, #80]	@ (800117c <MX_GPIO_Init+0x220>)
 800112a:	f001 f9d1 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800112e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001140:	2305      	movs	r3, #5
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <MX_GPIO_Init+0x228>)
 800114c:	f001 f9c0 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001150:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <MX_GPIO_Init+0x22c>)
 800116a:	f001 f9b1 	bl	80024d0 <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	@ 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40021000 	.word	0x40021000
 8001180:	40020800 	.word	0x40020800
 8001184:	40020400 	.word	0x40020400
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40020000 	.word	0x40020000

08001190 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <MX_I2C1_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_I2C1_Init+0x50>)
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x58>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ce:	f001 fb4f 	bl	8002870 <HAL_I2C_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d8:	f000 f9c8 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001f8 	.word	0x200001f8
 80011e4:	40005400 	.word	0x40005400
 80011e8:	000186a0 	.word	0x000186a0

080011ec <HAL_I2C_MspInit>:

}
#endif

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <HAL_I2C_MspInit+0x168>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d13c      	bne.n	8001288 <HAL_I2C_MspInit+0x9c>
	   * PB6     ------> I2C1_SCL
	   * PB7     ------> I2C1_SDA
    */
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b4e      	ldr	r3, [pc, #312]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122a:	23c0      	movs	r3, #192	@ 0xc0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001232:	2301      	movs	r3, #1
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123a:	2304      	movs	r3, #4
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4845      	ldr	r0, [pc, #276]	@ (800135c <HAL_I2C_MspInit+0x170>)
 8001246:	f001 f943 	bl	80024d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a41      	ldr	r2, [pc, #260]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
 800125a:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	201f      	movs	r0, #31
 800126c:	f001 f859 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001270:	201f      	movs	r0, #31
 8001272:	f001 f872 	bl	800235a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2020      	movs	r0, #32
 800127c:	f001 f851 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001280:	2020      	movs	r0, #32
 8001282:	f001 f86a 	bl	800235a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001286:	e060      	b.n	800134a <HAL_I2C_MspInit+0x15e>
  else if(i2cHandle->Instance==I2C3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a34      	ldr	r2, [pc, #208]	@ (8001360 <HAL_I2C_MspInit+0x174>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d15b      	bne.n	800134a <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a2f      	ldr	r2, [pc, #188]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012dc:	2304      	movs	r3, #4
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	481f      	ldr	r0, [pc, #124]	@ (8001364 <HAL_I2C_MspInit+0x178>)
 80012e8:	f001 f8f2 	bl	80024d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f2:	2312      	movs	r3, #18
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012fe:	2304      	movs	r3, #4
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4817      	ldr	r0, [pc, #92]	@ (8001368 <HAL_I2C_MspInit+0x17c>)
 800130a:	f001 f8e1 	bl	80024d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001318:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_I2C_MspInit+0x16c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2048      	movs	r0, #72	@ 0x48
 8001330:	f000 fff7 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001334:	2048      	movs	r0, #72	@ 0x48
 8001336:	f001 f810 	bl	800235a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2049      	movs	r0, #73	@ 0x49
 8001340:	f000 ffef 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001344:	2049      	movs	r0, #73	@ 0x49
 8001346:	f001 f808 	bl	800235a <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40005c00 	.word	0x40005c00
 8001364:	40020800 	.word	0x40020800
 8001368:	40020000 	.word	0x40020000

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b090      	sub	sp, #64	@ 0x40
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f000 fe65 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f88f 	bl	8001498 <SystemClock_Config>
     * param  無
     * @return 無
     * @note   這裡可以寫一些額外的備註
     * @warning 這裡可以寫警告資訊
     */
  MX_GPIO_Init();
 800137a:	f7ff fdef 	bl	8000f5c <MX_GPIO_Init>
     * @brief  SPI初始化
     * param  無
     * @return 無

     */
  MX_SPI1_Init();
 800137e:	f000 f9b9 	bl	80016f4 <MX_SPI1_Init>
      * @brief  USART初始化
      * param  無
      * @return 無
      */

  MX_USART2_UART_Init();
 8001382:	f000 fca7 	bl	8001cd4 <MX_USART2_UART_Init>
      * param  無
      * @return 無
      *
 	 *
     */
  MX_I2C1_Init();
 8001386:	f7ff ff03 	bl	8001190 <MX_I2C1_Init>

  //MX_I2C3_Init();
  /* USER CODE BEGIN 2 */
  uart_io_init(); // 初始化UART輸入輸出
 800138a:	f000 fb5b 	bl	8001a44 <uart_io_init>
  //




  printf("\n************************************************\n");
 800138e:	4838      	ldr	r0, [pc, #224]	@ (8001470 <main+0x104>)
 8001390:	f006 fbe0 	bl	8007b54 <puts>
  Scan_I2C_Address();
 8001394:	f7ff fd9e 	bl	8000ed4 <Scan_I2C_Address>
  printf("\n************************************************\n");
 8001398:	4835      	ldr	r0, [pc, #212]	@ (8001470 <main+0x104>)
 800139a:	f006 fbdb 	bl	8007b54 <puts>
  printf("\n");
 800139e:	200a      	movs	r0, #10
 80013a0:	f006 fb7a 	bl	8007a98 <putchar>
  printf("\n**************I2C init. Device *****************\n");
 80013a4:	4833      	ldr	r0, [pc, #204]	@ (8001474 <main+0x108>)
 80013a6:	f006 fbd5 	bl	8007b54 <puts>

  float voltage;

  // 初始化 ADS1115
      if (ADS1115_Init(&hi2c1, ADS1115_DATA_RATE_128, ADS1115_PGA_ONE) == HAL_OK) {
 80013aa:	2202      	movs	r2, #2
 80013ac:	2180      	movs	r1, #128	@ 0x80
 80013ae:	4832      	ldr	r0, [pc, #200]	@ (8001478 <main+0x10c>)
 80013b0:	f000 fd0a 	bl	8001dc8 <ADS1115_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <main+0x56>
          printf("ADC ADS1115 init ok!\n");
 80013ba:	4830      	ldr	r0, [pc, #192]	@ (800147c <main+0x110>)
 80013bc:	f006 fbca 	bl	8007b54 <puts>
 80013c0:	e002      	b.n	80013c8 <main+0x5c>
          //while(1);
      }else{
    	  printf("ADC ADS1115 init fial \n");
 80013c2:	482f      	ldr	r0, [pc, #188]	@ (8001480 <main+0x114>)
 80013c4:	f006 fbc6 	bl	8007b54 <puts>
       * Vin = 5V
       * R2 = 2000 ohm
       * R3 = 3000 ohm
       *
       * */
      int32_t Vth = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c


      printf("adc read ........... \n");
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <main+0x118>)
 80013ce:	f006 fbc1 	bl	8007b54 <puts>
      while(1) {
          if (ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &voltage) == HAL_OK) {
 80013d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013d6:	4619      	mov	r1, r3
 80013d8:	2040      	movs	r0, #64	@ 0x40
 80013da:	f000 fd69 	bl	8001eb0 <ADS1115_readSingleEnded>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d116      	bne.n	8001412 <main+0xa6>
              printf("A0 voltage: %.3f V\n", ((voltage*Vth)/(1000)));
 80013e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001488 <main+0x11c>
 80013fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fe:	ee16 0a90 	vmov	r0, s13
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4820      	ldr	r0, [pc, #128]	@ (800148c <main+0x120>)
 800140c:	f006 fb32 	bl	8007a74 <iprintf>
 8001410:	e002      	b.n	8001418 <main+0xac>
          } else {
              printf("Read failed\n");
 8001412:	481f      	ldr	r0, [pc, #124]	@ (8001490 <main+0x124>)
 8001414:	f006 fb9e 	bl	8007b54 <puts>
          }

          if (ADS1115_readSingleEnded(ADS1115_MUX_AIN1, &voltage) == HAL_OK) {
 8001418:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800141c:	4619      	mov	r1, r3
 800141e:	2050      	movs	r0, #80	@ 0x50
 8001420:	f000 fd46 	bl	8001eb0 <ADS1115_readSingleEnded>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <main+0xec>
        	  printf("A1 voltage: %.3f V\n", ((voltage*Vth)/(1000)));
 800142a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001434:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001488 <main+0x11c>
 8001440:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001444:	ee16 0a90 	vmov	r0, s13
 8001448:	f7ff f87e 	bl	8000548 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4810      	ldr	r0, [pc, #64]	@ (8001494 <main+0x128>)
 8001452:	f006 fb0f 	bl	8007a74 <iprintf>
 8001456:	e002      	b.n	800145e <main+0xf2>
          } else {
        	  printf("Read failed\n");
 8001458:	480d      	ldr	r0, [pc, #52]	@ (8001490 <main+0x124>)
 800145a:	f006 fb7b 	bl	8007b54 <puts>
          }
          printf("\n");
 800145e:	200a      	movs	r0, #10
 8001460:	f006 fb1a 	bl	8007a98 <putchar>
          HAL_Delay(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001468:	f000 fe5c 	bl	8002124 <HAL_Delay>
          if (ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &voltage) == HAL_OK) {
 800146c:	e7b1      	b.n	80013d2 <main+0x66>
 800146e:	bf00      	nop
 8001470:	08009b48 	.word	0x08009b48
 8001474:	08009b7c 	.word	0x08009b7c
 8001478:	200001f8 	.word	0x200001f8
 800147c:	08009bb0 	.word	0x08009bb0
 8001480:	08009bc8 	.word	0x08009bc8
 8001484:	08009be0 	.word	0x08009be0
 8001488:	447a0000 	.word	0x447a0000
 800148c:	08009bf8 	.word	0x08009bf8
 8001490:	08009c0c 	.word	0x08009c0c
 8001494:	08009c18 	.word	0x08009c18

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	@ 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	@ 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fc34 	bl	8007d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <SystemClock_Config+0xcc>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80014cc:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <SystemClock_Config+0xd0>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	2302      	movs	r3, #2
 8001500:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001502:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001508:	2308      	movs	r3, #8
 800150a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800150c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001510:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001512:	2302      	movs	r3, #2
 8001514:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001516:	2307      	movs	r3, #7
 8001518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f806 	bl	8005530 <HAL_RCC_OscConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800152a:	f000 f81f 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	230f      	movs	r3, #15
 8001530:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001532:	2302      	movs	r3, #2
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800153a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800153e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2105      	movs	r1, #5
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fa67 	bl	8005a20 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001558:	f000 f808 	bl	800156c <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	@ 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <ring_buffer_init>:

/**
 *  @brief初始化函式
 *  初始化頭尾指針，表示緩衝區為空。
 */
void ring_buffer_init(void) {
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
    rx_buf.head = 0;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <ring_buffer_init+0x20>)
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
    rx_buf.tail = 0;
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <ring_buffer_init+0x20>)
 8001584:	2200      	movs	r2, #0
 8001586:	805a      	strh	r2, [r3, #2]
    rx_buf_error = 0; // 初始化錯誤標誌
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <ring_buffer_init+0x24>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200002a0 	.word	0x200002a0
 800159c:	20000324 	.word	0x20000324

080015a0 <rx_buf_is_empty>:

 /**
 *  @brief判斷ring buff是否為空
 *  空條件：頭尾指針重合。
 */
bool rx_buf_is_empty(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
    return (rx_buf.head == rx_buf.tail);
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <rx_buf_is_empty+0x24>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <rx_buf_is_empty+0x24>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	429a      	cmp	r2, r3
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200002a0 	.word	0x200002a0

080015c8 <rx_buf_is_full>:
/**
 *  @brief判斷ring buff是否為滿
 *  滿條件：頭指針的下一個位置是尾指針（犧牲一個存儲單元來區分空和滿狀態）。
 */

bool rx_buf_is_full(void) {
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    return ((rx_buf.head + 1) % RX_BUF_SIZE == rx_buf.tail);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <rx_buf_is_full+0x34>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	425a      	negs	r2, r3
 80015d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015de:	bf58      	it	pl
 80015e0:	4253      	negpl	r3, r2
 80015e2:	4a06      	ldr	r2, [pc, #24]	@ (80015fc <rx_buf_is_full+0x34>)
 80015e4:	8852      	ldrh	r2, [r2, #2]
 80015e6:	b292      	uxth	r2, r2
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	200002a0 	.word	0x200002a0

08001600 <rx_buf_put>:
 *  僅在緩衝區未滿時寫入，避免數據覆蓋。
 */
//<V4.12>
//修改：添加臨界區保護與溢位標記

void rx_buf_put(uint8_t data) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800160a:	f3ef 8310 	mrs	r3, PRIMASK
 800160e:	613b      	str	r3, [r7, #16]
  return(result);
 8001610:	693b      	ldr	r3, [r7, #16]
    uint32_t primask = __get_PRIMASK(); // 保存當前中斷狀態
 8001612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
    __disable_irq();                    // 禁用中斷（進入臨界區）

    if (!rx_buf_is_full()) {
 8001618:	f7ff ffd6 	bl	80015c8 <rx_buf_is_full>
 800161c:	4603      	mov	r3, r0
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d016      	beq.n	8001656 <rx_buf_put+0x56>
        rx_buf.buffer[rx_buf.head] = data;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <rx_buf_put+0x7c>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <rx_buf_put+0x7c>)
 8001632:	4413      	add	r3, r2
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	711a      	strb	r2, [r3, #4]
        rx_buf.head = (rx_buf.head + 1) % RX_BUF_SIZE;
 8001638:	4b10      	ldr	r3, [pc, #64]	@ (800167c <rx_buf_put+0x7c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	3301      	adds	r3, #1
 8001640:	425a      	negs	r2, r3
 8001642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001646:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800164a:	bf58      	it	pl
 800164c:	4253      	negpl	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <rx_buf_put+0x7c>)
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <rx_buf_put+0x66>
    } else {
        rx_buf_error |= RINGBUF_ERROR_OVERFLOW; // 標記溢位錯誤
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <rx_buf_put+0x80>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <rx_buf_put+0x80>)
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f383 8810 	msr	PRIMASK, r3
}
 8001670:	bf00      	nop
    }

    __set_PRIMASK(primask); // 恢復中斷狀態（退出臨界區）
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002a0 	.word	0x200002a0
 8001680:	20000324 	.word	0x20000324

08001684 <rx_buf_get>:
/**
 *  @brief 數據讀取
 *  僅在緩衝區非空時讀取，避免讀取無效數據。
 */
// 修改：添加臨界區保護
uint8_t rx_buf_get(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800168e:	f3ef 8310 	mrs	r3, PRIMASK
 8001692:	607b      	str	r3, [r7, #4]
  return(result);
 8001694:	687b      	ldr	r3, [r7, #4]
    uint32_t primask = __get_PRIMASK();
 8001696:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
    __disable_irq();

    if (!rx_buf_is_empty()) {
 800169c:	f7ff ff80 	bl	80015a0 <rx_buf_is_empty>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <rx_buf_get+0x54>
        data = rx_buf.buffer[rx_buf.tail];
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <rx_buf_get+0x6c>)
 80016ae:	885b      	ldrh	r3, [r3, #2]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <rx_buf_get+0x6c>)
 80016b6:	4413      	add	r3, r2
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
        rx_buf.tail = (rx_buf.tail + 1) % RX_BUF_SIZE;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <rx_buf_get+0x6c>)
 80016be:	885b      	ldrh	r3, [r3, #2]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	425a      	negs	r2, r3
 80016c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016ce:	bf58      	it	pl
 80016d0:	4253      	negpl	r3, r2
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <rx_buf_get+0x6c>)
 80016d6:	805a      	strh	r2, [r3, #2]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f383 8810 	msr	PRIMASK, r3
}
 80016e2:	bf00      	nop
    }

    __set_PRIMASK(primask);
    return data;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002a0 	.word	0x200002a0

080016f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_SPI1_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_SPI1_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <MX_SPI1_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001740:	220a      	movs	r2, #10
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_SPI1_Init+0x64>)
 8001746:	f004 fb8b 	bl	8005e60 <HAL_SPI_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001750:	f7ff ff0c 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000328 	.word	0x20000328
 800175c:	40013000 	.word	0x40013000

08001760 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_SPI_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 800178c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017ba:	23e0      	movs	r3, #224	@ 0xe0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <HAL_SPI_MspInit+0x8c>)
 80017d6:	f000 fe7b 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001804:	6453      	str	r3, [r2, #68]	@ 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
 8001830:	f000 fd6c 	bl	800230c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <NMI_Handler+0x4>

08001848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <MemManage_Handler+0x4>

08001858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <UsageFault_Handler+0x4>

08001868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 fc25 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <I2C1_EV_IRQHandler+0x10>)
 80018a6:	f001 fd97 	bl	80033d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001f8 	.word	0x200001f8

080018b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <I2C1_ER_IRQHandler+0x10>)
 80018ba:	f001 fefe 	bl	80036ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001f8 	.word	0x200001f8

080018c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <USART2_IRQHandler+0x10>)
 80018ce:	f004 fbfb 	bl	80060c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200004f4 	.word	0x200004f4

080018dc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <I2C3_EV_IRQHandler+0x10>)
 80018e2:	f001 fd79 	bl	80033d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000024c 	.word	0x2000024c

080018f0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <I2C3_ER_IRQHandler+0x10>)
 80018f6:	f001 fee0 	bl	80036ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000024c 	.word	0x2000024c

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191e:	f006 fa5b 	bl	8007dd8 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001946:	bf00      	nop
 8001948:	e7fd      	b.n	8001946 <_exit+0x12>

0800194a <_close>:
  }
  return len;
}

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001972:	605a      	str	r2, [r3, #4]
  return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f006 f9f8 	bl	8007dd8 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20020000 	.word	0x20020000
 8001a14:	00001000 	.word	0x00001000
 8001a18:	20000380 	.word	0x20000380
 8001a1c:	200006f0 	.word	0x200006f0

08001a20 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  *
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <uart_io_init>:
 * *************************************************
 * @brief　初始化UART中斷接收
 * ************************************************
 *
 */
void uart_io_init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    ring_buffer_init();
 8001a48:	f7ff fd96 	bl	8001578 <ring_buffer_init>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1); // 显式类型转换
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <uart_io_init+0x18>)
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <uart_io_init+0x1c>)
 8001a52:	f004 fb14 	bl	800607e <HAL_UART_Receive_IT>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000384 	.word	0x20000384
 8001a60:	200004f4 	.word	0x200004f4

08001a64 <HAL_UART_TxCpltCallback>:

//---------TX start-----------------------------------



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <HAL_UART_TxCpltCallback+0x24>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d102      	bne.n	8001a7c <HAL_UART_TxCpltCallback+0x18>
        uart_tx_busy = false; // 標記發送完成
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_UART_TxCpltCallback+0x28>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40004400 	.word	0x40004400
 8001a8c:	200003ed 	.word	0x200003ed

08001a90 <_write>:

// 改進的 _write 函式
int _write(int file, char *data, int len) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08b      	sub	sp, #44	@ 0x2c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
    if (file != STDOUT_FILENO && file != STDERR_FILENO) {
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <_write+0x1e>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d002      	beq.n	8001aae <_write+0x1e>
        return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	e075      	b.n	8001b9a <_write+0x10a>
    }
    // Step 1: 直接處理換行符，填充當前非活躍緩衝區
    uint8_t target_buffer = (active_buffer == 0) ? 1 : 0;  // 選擇非活躍緩衝區
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <_write+0x114>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	77fb      	strb	r3, [r7, #31]
    uint16_t processed_len = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	84fb      	strh	r3, [r7, #38]	@ 0x26

    for (int i = 0; i < len; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	e034      	b.n	8001b34 <_write+0xa4>
        if (data[i] == '\n') {
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d119      	bne.n	8001b0a <_write+0x7a>
            if (processed_len + 2 > TX_BUFFER_SIZE) break;
 8001ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ad8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ada:	d830      	bhi.n	8001b3e <_write+0xae>
            tx_buffer[target_buffer][processed_len++] = '\r';
 8001adc:	7ffa      	ldrb	r2, [r7, #31]
 8001ade:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ae0:	1c59      	adds	r1, r3, #1
 8001ae2:	84f9      	strh	r1, [r7, #38]	@ 0x26
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4930      	ldr	r1, [pc, #192]	@ (8001ba8 <_write+0x118>)
 8001ae8:	01d3      	lsls	r3, r2, #7
 8001aea:	440b      	add	r3, r1
 8001aec:	4403      	add	r3, r0
 8001aee:	220d      	movs	r2, #13
 8001af0:	701a      	strb	r2, [r3, #0]
            tx_buffer[target_buffer][processed_len++] = '\n';
 8001af2:	7ffa      	ldrb	r2, [r7, #31]
 8001af4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	84f9      	strh	r1, [r7, #38]	@ 0x26
 8001afa:	4618      	mov	r0, r3
 8001afc:	492a      	ldr	r1, [pc, #168]	@ (8001ba8 <_write+0x118>)
 8001afe:	01d3      	lsls	r3, r2, #7
 8001b00:	440b      	add	r3, r1
 8001b02:	4403      	add	r3, r0
 8001b04:	220a      	movs	r2, #10
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e011      	b.n	8001b2e <_write+0x9e>
        } else {
            if (processed_len + 1 > TX_BUFFER_SIZE) break;
 8001b0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b0e:	d818      	bhi.n	8001b42 <_write+0xb2>
            tx_buffer[target_buffer][processed_len++] = data[i];
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	18d1      	adds	r1, r2, r3
 8001b16:	7ffa      	ldrb	r2, [r7, #31]
 8001b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b1a:	1c58      	adds	r0, r3, #1
 8001b1c:	84f8      	strh	r0, [r7, #38]	@ 0x26
 8001b1e:	461c      	mov	r4, r3
 8001b20:	7808      	ldrb	r0, [r1, #0]
 8001b22:	4921      	ldr	r1, [pc, #132]	@ (8001ba8 <_write+0x118>)
 8001b24:	01d3      	lsls	r3, r2, #7
 8001b26:	440b      	add	r3, r1
 8001b28:	4423      	add	r3, r4
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	3301      	adds	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbc6      	blt.n	8001aca <_write+0x3a>
 8001b3c:	e002      	b.n	8001b44 <_write+0xb4>
            if (processed_len + 2 > TX_BUFFER_SIZE) break;
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <_write+0xb4>
            if (processed_len + 1 > TX_BUFFER_SIZE) break;
 8001b42:	bf00      	nop
        }
    }
    // Step 2: 等待前一次傳輸完成（非阻塞檢查，避免死等）
    uint32_t start = HAL_GetTick();
 8001b44:	f000 fae2 	bl	800210c <HAL_GetTick>
 8001b48:	61b8      	str	r0, [r7, #24]
    while (uart_tx_busy) {
 8001b4a:	e009      	b.n	8001b60 <_write+0xd0>
        if (HAL_GetTick() - start > 100) {
 8001b4c:	f000 fade 	bl	800210c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d902      	bls.n	8001b60 <_write+0xd0>
            return -1;  // 超時返回錯誤
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e01c      	b.n	8001b9a <_write+0x10a>
    while (uart_tx_busy) {
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <_write+0x11c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <_write+0xbc>
        }
    }

    // Step 3: 啟動新傳輸並切換活躍緩衝區
    HAL_StatusTypeDef status = HAL_UART_Transmit_IT(&huart2, tx_buffer[target_buffer], processed_len);
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <_write+0x118>)
 8001b70:	4413      	add	r3, r2
 8001b72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b74:	4619      	mov	r1, r3
 8001b76:	480e      	ldr	r0, [pc, #56]	@ (8001bb0 <_write+0x120>)
 8001b78:	f004 fa4b 	bl	8006012 <HAL_UART_Transmit_IT>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <_write+0x106>
        uart_tx_busy = true;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <_write+0x11c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
        active_buffer = target_buffer;  // 更新活躍緩衝區
 8001b8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <_write+0x114>)
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	7013      	strb	r3, [r2, #0]
        return len;  // 返回原始長度
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <_write+0x10a>
    }
    return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	372c      	adds	r7, #44	@ 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200004f0 	.word	0x200004f0
 8001ba8:	200003f0 	.word	0x200003f0
 8001bac:	200003ed 	.word	0x200003ed
 8001bb0:	200004f4 	.word	0x200004f4

08001bb4 <_read>:
//--------------------------------------------------
*/

//<0412 新增>

int _read(int file, char *ptr, int len) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
    //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // 调试用LED

    if (file == STDIN_FILENO) {
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d134      	bne.n	8001c30 <_read+0x7c>
        int received = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
        uint32_t start = HAL_GetTick(); // 改用 HAL 的 tick 函数
 8001bca:	f000 fa9f 	bl	800210c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]
        while (received < len) {
 8001bd0:	e026      	b.n	8001c20 <_read+0x6c>
            if (!rx_buf_is_empty()) {
 8001bd2:	f7ff fce5 	bl	80015a0 <rx_buf_is_empty>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <_read+0x5a>
                *ptr = rx_buf_get();
 8001be2:	f7ff fd4f 	bl	8001684 <rx_buf_get>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	701a      	strb	r2, [r3, #0]
                ptr++;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
                received++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
                if (*(ptr-1) == '\n' || *(ptr-1) == '\r') break;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b0a      	cmp	r3, #10
 8001c02:	d013      	beq.n	8001c2c <_read+0x78>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b0d      	cmp	r3, #13
 8001c0c:	d00e      	beq.n	8001c2c <_read+0x78>
            }
            // 超时 5 秒（5000ms）
            if (HAL_GetTick() - start >= 5000) break;
 8001c0e:	f000 fa7d 	bl	800210c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d804      	bhi.n	8001c2a <_read+0x76>
        while (received < len) {
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbd4      	blt.n	8001bd2 <_read+0x1e>
 8001c28:	e000      	b.n	8001c2c <_read+0x78>
            if (HAL_GetTick() - start >= 5000) break;
 8001c2a:	bf00      	nop
        }
        return received;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	e001      	b.n	8001c34 <_read+0x80>
    }
    return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_UART_RxCpltCallback>:


#ifdef FullLineInput
//這個個中斷程式適合用在『一整行的輸入,然後後續分析內容』

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin); // 调试用LED
 8001c44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c48:	481c      	ldr	r0, [pc, #112]	@ (8001cbc <HAL_UART_RxCpltCallback+0x80>)
 8001c4a:	f000 fdf6 	bl	800283a <HAL_GPIO_TogglePin>

    if (huart->Instance == USART2) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x84>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d12d      	bne.n	8001cb4 <HAL_UART_RxCpltCallback+0x78>
        // 移除阻塞的 HAL_Delay，改用非阻塞操作
        char received_char = rxBuffer[0]; // 获取接收到的字符
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x88>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	73fb      	strb	r3, [r7, #15]

        rx_buf_put(received_char); // 存入环形缓冲区
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fccd 	bl	8001600 <rx_buf_put>

        // 边界检查，防止溢出
        if (RX_index < BUFFER_SIZE - 1) { // 保留一个位置给终止符
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b62      	cmp	r3, #98	@ 0x62
 8001c6c:	d81a      	bhi.n	8001ca4 <HAL_UART_RxCpltCallback+0x68>
            if (received_char == '\r' || received_char == '\n') {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b0d      	cmp	r3, #13
 8001c72:	d002      	beq.n	8001c7a <HAL_UART_RxCpltCallback+0x3e>
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d109      	bne.n	8001c8e <HAL_UART_RxCpltCallback+0x52>
                inputBuffer[RX_index] = '\0'; // 终止字符串
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_UART_RxCpltCallback+0x90>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]
                RX_index = 0; // 重置索引
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e00d      	b.n	8001caa <HAL_UART_RxCpltCallback+0x6e>
            } else {
                inputBuffer[RX_index++] = received_char; // 存储字符
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	b2d1      	uxtb	r1, r2
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001c98:	7011      	strb	r1, [r2, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_UART_RxCpltCallback+0x90>)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	5453      	strb	r3, [r2, r1]
 8001ca2:	e002      	b.n	8001caa <HAL_UART_RxCpltCallback+0x6e>
            }
        } else {
            // 缓冲区满，清空并提示错误
            RX_index = 0;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
        }

        // 重启接收中断
        HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	4905      	ldr	r1, [pc, #20]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x88>)
 8001cae:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x94>)
 8001cb0:	f004 f9e5 	bl	800607e <HAL_UART_Receive_IT>
    }
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	20000384 	.word	0x20000384
 8001cc8:	200003ec 	.word	0x200003ec
 8001ccc:	20000388 	.word	0x20000388
 8001cd0:	200004f4 	.word	0x200004f4

08001cd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <MX_USART2_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	f004 f931 	bl	8005f72 <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f7ff fc29 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200004f4 	.word	0x200004f4
 8001d24:	40004400 	.word	0x40004400

08001d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <HAL_UART_MspInit+0x94>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d133      	bne.n	8001db2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d82:	230c      	movs	r3, #12
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <HAL_UART_MspInit+0x9c>)
 8001d9e:	f000 fb97 	bl	80024d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2026      	movs	r0, #38	@ 0x26
 8001da8:	f000 fabb 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dac:	2026      	movs	r0, #38	@ 0x26
 8001dae:	f000 fad4 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	@ 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <ADS1115_Init>:
uint8_t ADS1115_rawValue[2];

float ADS1115_voltCoef;			// Voltage coefficient.

/* Function definitions. */
HAL_StatusTypeDef ADS1115_Init(I2C_HandleTypeDef *handler, uint16_t setDataRate, uint16_t setPGA) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	803b      	strh	r3, [r7, #0]

	// Handler
	memcpy(&ADS1115_I2C_Handler, handler, sizeof(*handler));
 8001dd8:	2254      	movs	r2, #84	@ 0x54
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	482f      	ldr	r0, [pc, #188]	@ (8001e9c <ADS1115_Init+0xd4>)
 8001dde:	f006 f828 	bl	8007e32 <memcpy>

	// Data rate and PGA configurations.
	ADS1115_dataRate = setDataRate;
 8001de2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea0 <ADS1115_Init+0xd8>)
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	8013      	strh	r3, [r2, #0]
	ADS1115_pga = setPGA;
 8001de8:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea4 <ADS1115_Init+0xdc>)
 8001dea:	883b      	ldrh	r3, [r7, #0]
 8001dec:	8013      	strh	r3, [r2, #0]


	// Voltage coefficient update.
	switch (ADS1115_pga) {
 8001dee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <ADS1115_Init+0xdc>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2b0e      	cmp	r3, #14
 8001df4:	d83e      	bhi.n	8001e74 <ADS1115_Init+0xac>
 8001df6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <ADS1115_Init+0x34>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e39 	.word	0x08001e39
 8001e00:	08001e75 	.word	0x08001e75
 8001e04:	08001e43 	.word	0x08001e43
 8001e08:	08001e75 	.word	0x08001e75
 8001e0c:	08001e4d 	.word	0x08001e4d
 8001e10:	08001e75 	.word	0x08001e75
 8001e14:	08001e57 	.word	0x08001e57
 8001e18:	08001e75 	.word	0x08001e75
 8001e1c:	08001e61 	.word	0x08001e61
 8001e20:	08001e75 	.word	0x08001e75
 8001e24:	08001e75 	.word	0x08001e75
 8001e28:	08001e75 	.word	0x08001e75
 8001e2c:	08001e75 	.word	0x08001e75
 8001e30:	08001e75 	.word	0x08001e75
 8001e34:	08001e6b 	.word	0x08001e6b

	case ADS1115_PGA_TWOTHIRDS:
		ADS1115_voltCoef = 0.1875;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e3a:	f04f 5279 	mov.w	r2, #1044381696	@ 0x3e400000
 8001e3e:	601a      	str	r2, [r3, #0]
		break;
 8001e40:	e018      	b.n	8001e74 <ADS1115_Init+0xac>

	case ADS1115_PGA_ONE:
		ADS1115_voltCoef = 0.125;
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e44:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8001e48:	601a      	str	r2, [r3, #0]
		break;
 8001e4a:	e013      	b.n	8001e74 <ADS1115_Init+0xac>

	case ADS1115_PGA_TWO:
		ADS1115_voltCoef = 0.0625;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e4e:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8001e52:	601a      	str	r2, [r3, #0]
		break;
 8001e54:	e00e      	b.n	8001e74 <ADS1115_Init+0xac>

	case ADS1115_PGA_FOUR:
		ADS1115_voltCoef = 0.03125;
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e58:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 8001e5c:	601a      	str	r2, [r3, #0]
		break;
 8001e5e:	e009      	b.n	8001e74 <ADS1115_Init+0xac>

	case ADS1115_PGA_EIGHT:
		ADS1115_voltCoef = 0.015625;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e62:	f04f 5272 	mov.w	r2, #1015021568	@ 0x3c800000
 8001e66:	601a      	str	r2, [r3, #0]
		break;
 8001e68:	e004      	b.n	8001e74 <ADS1115_Init+0xac>

	case ADS1115_PGA_SIXTEEN:
		ADS1115_voltCoef = 0.0078125;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <ADS1115_Init+0xe0>)
 8001e6c:	f04f 5270 	mov.w	r2, #1006632960	@ 0x3c000000
 8001e70:	601a      	str	r2, [r3, #0]
		break;
 8001e72:	bf00      	nop

		}

	if (HAL_I2C_IsDeviceReady(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <ADS1115_Init+0xe4>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	b299      	uxth	r1, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2205      	movs	r2, #5
 8001e80:	4806      	ldr	r0, [pc, #24]	@ (8001e9c <ADS1115_Init+0xd4>)
 8001e82:	f001 f97b 	bl	800317c <HAL_I2C_IsDeviceReady>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <ADS1115_Init+0xc8>
		return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <ADS1115_Init+0xca>
	} else {
		return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
	}

}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000053c 	.word	0x2000053c
 8001ea0:	20000006 	.word	0x20000006
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000598 	.word	0x20000598
 8001eac:	20000004 	.word	0x20000004

08001eb0 <ADS1115_readSingleEnded>:

HAL_StatusTypeDef ADS1115_readSingleEnded(uint16_t muxPort, float *voltage) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af04      	add	r7, sp, #16
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]

	ADS1115_config[0] = ADS1115_OS | muxPort | ADS1115_pga | ADS1115_MODE;
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <ADS1115_readSingleEnded+0x120>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <ADS1115_readSingleEnded+0x124>)
 8001ed2:	701a      	strb	r2, [r3, #0]
	ADS1115_config[1] = ADS1115_dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 8001ed4:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <ADS1115_readSingleEnded+0x128>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0303 	orr.w	r3, r3, #3
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <ADS1115_readSingleEnded+0x124>)
 8001ee2:	705a      	strb	r2, [r3, #1]
	uint8_t waiting=1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
	uint16_t cnt=0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81bb      	strh	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK)
 8001eec:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <ADS1115_readSingleEnded+0x12c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	b299      	uxth	r1, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	4b35      	ldr	r3, [pc, #212]	@ (8001fd4 <ADS1115_readSingleEnded+0x124>)
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2301      	movs	r3, #1
 8001f02:	2201      	movs	r2, #1
 8001f04:	4836      	ldr	r0, [pc, #216]	@ (8001fe0 <ADS1115_readSingleEnded+0x130>)
 8001f06:	f000 fe0d 	bl	8002b24 <HAL_I2C_Mem_Write>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d15a      	bne.n	8001fc6 <ADS1115_readSingleEnded+0x116>
	{
		while(waiting) //Checking Data Ready
 8001f10:	e028      	b.n	8001f64 <ADS1115_readSingleEnded+0xb4>
		{
			if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK)
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <ADS1115_readSingleEnded+0x12c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b299      	uxth	r1, r3
 8001f24:	2301      	movs	r3, #1
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <ADS1115_readSingleEnded+0x124>)
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	2201      	movs	r2, #1
 8001f34:	482a      	ldr	r0, [pc, #168]	@ (8001fe0 <ADS1115_readSingleEnded+0x130>)
 8001f36:	f000 feef 	bl	8002d18 <HAL_I2C_Mem_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <ADS1115_readSingleEnded+0xa0>
				{
				if(ADS1115_config[0] & ADS1115_OS) waiting=0;
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <ADS1115_readSingleEnded+0x124>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da04      	bge.n	8001f54 <ADS1115_readSingleEnded+0xa4>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e001      	b.n	8001f54 <ADS1115_readSingleEnded+0xa4>
				}
			else return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e039      	b.n	8001fc8 <ADS1115_readSingleEnded+0x118>
			if(++cnt==100) return HAL_ERROR;
 8001f54:	89bb      	ldrh	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	81bb      	strh	r3, [r7, #12]
 8001f5a:	89bb      	ldrh	r3, [r7, #12]
 8001f5c:	2b64      	cmp	r3, #100	@ 0x64
 8001f5e:	d101      	bne.n	8001f64 <ADS1115_readSingleEnded+0xb4>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e031      	b.n	8001fc8 <ADS1115_readSingleEnded+0x118>
		while(waiting) //Checking Data Ready
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1d3      	bne.n	8001f12 <ADS1115_readSingleEnded+0x62>
		}

		if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT) == HAL_OK)
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <ADS1115_readSingleEnded+0x12c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	2302      	movs	r3, #2
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <ADS1115_readSingleEnded+0x134>)
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4814      	ldr	r0, [pc, #80]	@ (8001fe0 <ADS1115_readSingleEnded+0x130>)
 8001f8e:	f000 fec3 	bl	8002d18 <HAL_I2C_Mem_Read>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d116      	bne.n	8001fc6 <ADS1115_readSingleEnded+0x116>
			 *      每個 bit 對應多少電壓（mV/bit），把 ADC 原始值轉成實際電壓
			 *      (float)(...)
			 *      強制轉型成浮點數，因為 voltage 參數是 float*
			 *
			 * */
			*voltage = (float) (((int16_t) (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1]) * ADS1115_voltCoef);
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <ADS1115_readSingleEnded+0x134>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <ADS1115_readSingleEnded+0x134>)
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <ADS1115_readSingleEnded+0x138>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
			return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <ADS1115_readSingleEnded+0x118>

		}

	}

	return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1

}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000590 	.word	0x20000590
 8001fd8:	20000006 	.word	0x20000006
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	2000053c 	.word	0x2000053c
 8001fe4:	20000594 	.word	0x20000594
 8001fe8:	20000598 	.word	0x20000598

08001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ff0:	f7ff fd16 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	@ (800202c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	@ (8002038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201a:	f005 fee3 	bl	8007de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7ff f9a5 	bl	800136c <main>
  bx  lr    
 8002022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002030:	08009fd8 	.word	0x08009fd8
  ldr r2, =_sbss
 8002034:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002038:	200006ec 	.word	0x200006ec

0800203c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <HAL_Init+0x40>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <HAL_Init+0x40>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_Init+0x40>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f94f 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff fbbc 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f967 	bl	8002376 <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 f92f 	bl	8002322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000010 	.word	0x20000010
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	2000059c 	.word	0x2000059c

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	2000059c 	.word	0x2000059c

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000010 	.word	0x20000010

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	@ (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff8e 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff29 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff3e 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff8e 	bl	8002260 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff31 	bl	80021d0 <__NVIC_EnableIRQ>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffa2 	bl	80022c8 <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff feb6 	bl	800210c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d008      	beq.n	80023c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e052      	b.n	8002466 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0216 	bic.w	r2, r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <HAL_DMA_Abort+0x62>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0208 	bic.w	r2, r2, #8
 80023fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	e013      	b.n	800243a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002412:	f7ff fe7b 	bl	800210c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b05      	cmp	r3, #5
 800241e:	d90c      	bls.n	800243a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2203      	movs	r2, #3
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e015      	b.n	8002466 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e4      	bne.n	8002412 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	223f      	movs	r2, #63	@ 0x3f
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d004      	beq.n	800248c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2280      	movs	r2, #128	@ 0x80
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e00c      	b.n	80024a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2205      	movs	r2, #5
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c0:	b2db      	uxtb	r3, r3
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e16b      	b.n	80027c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 815a 	bne.w	80027be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	2b02      	cmp	r3, #2
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80b4 	beq.w	80027be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b60      	ldr	r3, [pc, #384]	@ (80027dc <HAL_GPIO_Init+0x30c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	4a5f      	ldr	r2, [pc, #380]	@ (80027dc <HAL_GPIO_Init+0x30c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002664:	6453      	str	r3, [r2, #68]	@ 0x44
 8002666:	4b5d      	ldr	r3, [pc, #372]	@ (80027dc <HAL_GPIO_Init+0x30c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a5b      	ldr	r2, [pc, #364]	@ (80027e0 <HAL_GPIO_Init+0x310>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_GPIO_Init+0x314>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <HAL_GPIO_Init+0x226>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a51      	ldr	r2, [pc, #324]	@ (80027e8 <HAL_GPIO_Init+0x318>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a50      	ldr	r2, [pc, #320]	@ (80027ec <HAL_GPIO_Init+0x31c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	@ (80027f0 <HAL_GPIO_Init+0x320>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4e      	ldr	r2, [pc, #312]	@ (80027f4 <HAL_GPIO_Init+0x324>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x216>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4d      	ldr	r2, [pc, #308]	@ (80027f8 <HAL_GPIO_Init+0x328>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x212>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4c      	ldr	r2, [pc, #304]	@ (80027fc <HAL_GPIO_Init+0x32c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002800 <HAL_GPIO_Init+0x330>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x20a>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00e      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026da:	2308      	movs	r3, #8
 80026dc:	e00c      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026de:	2306      	movs	r3, #6
 80026e0:	e00a      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x228>
 80026f6:	2300      	movs	r3, #0
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002708:	4935      	ldr	r1, [pc, #212]	@ (80027e0 <HAL_GPIO_Init+0x310>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_GPIO_Init+0x334>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a32      	ldr	r2, [pc, #200]	@ (8002804 <HAL_GPIO_Init+0x334>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b30      	ldr	r3, [pc, #192]	@ (8002804 <HAL_GPIO_Init+0x334>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a27      	ldr	r2, [pc, #156]	@ (8002804 <HAL_GPIO_Init+0x334>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276a:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <HAL_GPIO_Init+0x334>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278e:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <HAL_GPIO_Init+0x334>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_GPIO_Init+0x334>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b8:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <HAL_GPIO_Init+0x334>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3301      	adds	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	f67f ae90 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40020c00 	.word	0x40020c00
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40021400 	.word	0x40021400
 80027fc:	40021800 	.word	0x40021800
 8002800:	40021c00 	.word	0x40021c00
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	041a      	lsls	r2, r3, #16
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43d9      	mvns	r1, r3
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	400b      	ands	r3, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e12b      	b.n	8002ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fca8 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	@ 0x24
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d4:	f003 fa9c 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 80028d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a81      	ldr	r2, [pc, #516]	@ (8002ae4 <HAL_I2C_Init+0x274>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d807      	bhi.n	80028f4 <HAL_I2C_Init+0x84>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a80      	ldr	r2, [pc, #512]	@ (8002ae8 <HAL_I2C_Init+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e006      	b.n	8002902 <HAL_I2C_Init+0x92>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a7d      	ldr	r2, [pc, #500]	@ (8002aec <HAL_I2C_Init+0x27c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0e7      	b.n	8002ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a78      	ldr	r2, [pc, #480]	@ (8002af0 <HAL_I2C_Init+0x280>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae4 <HAL_I2C_Init+0x274>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d802      	bhi.n	8002944 <HAL_I2C_Init+0xd4>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3301      	adds	r3, #1
 8002942:	e009      	b.n	8002958 <HAL_I2C_Init+0xe8>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a69      	ldr	r2, [pc, #420]	@ (8002af4 <HAL_I2C_Init+0x284>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	3301      	adds	r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800296a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	495c      	ldr	r1, [pc, #368]	@ (8002ae4 <HAL_I2C_Init+0x274>)
 8002974:	428b      	cmp	r3, r1
 8002976:	d819      	bhi.n	80029ac <HAL_I2C_Init+0x13c>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e59      	subs	r1, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fbb1 f3f3 	udiv	r3, r1, r3
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800298c:	400b      	ands	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_I2C_Init+0x138>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e59      	subs	r1, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	e051      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e04f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <HAL_I2C_Init+0x168>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e012      	b.n	80029fe <HAL_I2C_Init+0x18e>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Init+0x196>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e022      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <HAL_I2C_Init+0x1bc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e58      	subs	r0, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	440b      	add	r3, r1
 8002a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a2a:	e00f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6809      	ldr	r1, [r1, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6911      	ldr	r1, [r2, #16]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	000186a0 	.word	0x000186a0
 8002ae8:	001e847f 	.word	0x001e847f
 8002aec:	003d08ff 	.word	0x003d08ff
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0a:	2b80      	cmp	r3, #128	@ 0x80
 8002b0c:	d103      	bne.n	8002b16 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b3e:	f7ff fae5 	bl	800210c <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	f040 80d9 	bne.w	8002d04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2319      	movs	r3, #25
 8002b58:	2201      	movs	r2, #1
 8002b5a:	496d      	ldr	r1, [pc, #436]	@ (8002d10 <HAL_I2C_Mem_Write+0x1ec>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f002 fa63 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0cc      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_I2C_Mem_Write+0x56>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0c5      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2221      	movs	r2, #33	@ 0x21
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2240      	movs	r2, #64	@ 0x40
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a4d      	ldr	r2, [pc, #308]	@ (8002d14 <HAL_I2C_Mem_Write+0x1f0>)
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be2:	88f8      	ldrh	r0, [r7, #6]
 8002be4:	893a      	ldrh	r2, [r7, #8]
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f001 fff2 	bl	8004bdc <I2C_RequestMemoryWrite>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d052      	beq.n	8002ca4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e081      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f002 fb28 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d107      	bne.n	8002c2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_I2C_Mem_Write+0x180>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1aa      	bne.n	8002c02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f002 fb1b 	bl	80052ec <I2C_WaitOnBTFFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d107      	bne.n	8002cd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e016      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	00100002 	.word	0x00100002
 8002d14:	ffff0000 	.word	0xffff0000

08002d18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	@ 0x30
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d32:	f7ff f9eb 	bl	800210c <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	f040 8214 	bne.w	800316e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	497b      	ldr	r1, [pc, #492]	@ (8002f3c <HAL_I2C_Mem_Read+0x224>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f002 f969 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e207      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x56>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e200      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d007      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2222      	movs	r2, #34	@ 0x22
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2240      	movs	r2, #64	@ 0x40
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f40 <HAL_I2C_Mem_Read+0x228>)
 8002dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd6:	88f8      	ldrh	r0, [r7, #6]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f001 ff8e 	bl	8004d08 <I2C_RequestMemoryRead>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1bc      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d113      	bne.n	8002e26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e190      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d11b      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e170      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d11b      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	e150      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ebc:	e144      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f200 80f1 	bhi.w	80030aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d123      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f002 fa83 	bl	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e145      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f16:	e117      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d14e      	bne.n	8002fbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f26:	2200      	movs	r2, #0
 8002f28:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <HAL_I2C_Mem_Read+0x22c>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f002 f87c 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e11a      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fbc:	e0c4      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	496c      	ldr	r1, [pc, #432]	@ (8003178 <HAL_I2C_Mem_Read+0x460>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f002 f82d 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cb      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	4955      	ldr	r1, [pc, #340]	@ (8003178 <HAL_I2C_Mem_Read+0x460>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 ffff 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e09d      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030a8:	e04e      	b.n	8003148 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f002 f996 	bl	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e058      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d124      	bne.n	8003148 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	2b03      	cmp	r3, #3
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003114:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f aeb6 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3728      	adds	r7, #40	@ 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00010004 	.word	0x00010004

0800317c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	@ 0x28
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7fe ffbe 	bl	800210c <HAL_GetTick>
 8003190:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 8111 	bne.w	80033c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2319      	movs	r3, #25
 80031aa:	2201      	movs	r2, #1
 80031ac:	4988      	ldr	r1, [pc, #544]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f001 ff3a 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e104      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_I2C_IsDeviceReady+0x50>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0fd      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d007      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003200:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2224      	movs	r2, #36	@ 0x24
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a70      	ldr	r2, [pc, #448]	@ (80033d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003214:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003224:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f001 fef8 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324c:	d103      	bne.n	8003256 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b6      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003268:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800326a:	f7fe ff4f 	bl	800210c <HAL_GetTick>
 800326e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800329e:	e025      	b.n	80032ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe ff34 	bl	800210c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <HAL_I2C_IsDeviceReady+0x13a>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	22a0      	movs	r2, #160	@ 0xa0
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80032f6:	d005      	beq.n	8003304 <HAL_I2C_IsDeviceReady+0x188>
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_I2C_IsDeviceReady+0x188>
 80032fe:	7dbb      	ldrb	r3, [r7, #22]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0cd      	beq.n	80032a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d129      	bne.n	800336e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	4921      	ldr	r1, [pc, #132]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f001 fe6c 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e036      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e02c      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003386:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	490f      	ldr	r1, [pc, #60]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 fe48 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e012      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f4ff af32 	bcc.w	8003216 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00100002 	.word	0x00100002
 80033d4:	ffff0000 	.word	0xffff0000

080033d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003400:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d003      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x38>
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	f040 80c1 	bne.w	8003592 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <HAL_I2C_EV_IRQHandler+0x6e>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003430:	d003      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x62>
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003438:	d101      	bne.n	800343e <HAL_I2C_EV_IRQHandler+0x66>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x68>
 800343e:	2300      	movs	r3, #0
 8003440:	2b01      	cmp	r3, #1
 8003442:	f000 8132 	beq.w	80036aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x92>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0a5b      	lsrs	r3, r3, #9
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f002 f84b 	bl	80054f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fd9b 	bl	8003f9e <I2C_Master_SB>
 8003468:	e092      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0xb2>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a5b      	lsrs	r3, r3, #9
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe11 	bl	80040aa <I2C_Master_ADD10>
 8003488:	e082      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xd2>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fe2b 	bl	80040fe <I2C_Master_ADDR>
 80034a8:	e072      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03b      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c4:	f000 80f3 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	09db      	lsrs	r3, r3, #7
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00f      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9f3 	bl	80038d8 <I2C_MasterTransmit_TXE>
 80034f2:	e04d      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80d6 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80cf 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	2b21      	cmp	r3, #33	@ 0x21
 8003514:	d103      	bne.n	800351e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa7a 	bl	8003a10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351c:	e0c7      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	f040 80c4 	bne.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fae8 	bl	8003afc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352c:	e0bf      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800353c:	f000 80b7 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb61 	bl	8003c2c <I2C_MasterReceive_RXNE>
 800356a:	e011      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 809a 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8093 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc17 	bl	8003dbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358e:	e08e      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8003590:	e08d      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e007      	b.n	80035b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 ffdc 	bl	800459c <I2C_Slave_ADDR>
 80035e4:	e066      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x22e>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f001 f816 	bl	8004630 <I2C_Slave_STOPF>
 8003604:	e056      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003606:	7bbb      	ldrb	r3, [r7, #14]
 8003608:	2b21      	cmp	r3, #33	@ 0x21
 800360a:	d002      	beq.n	8003612 <HAL_I2C_EV_IRQHandler+0x23a>
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b29      	cmp	r3, #41	@ 0x29
 8003610:	d125      	bne.n	800365e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	09db      	lsrs	r3, r3, #7
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0a9b      	lsrs	r3, r3, #10
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fef2 	bl	8004420 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800363c:	e039      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d033      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02d      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 ff1f 	bl	800449a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365c:	e029      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00f      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0a9b      	lsrs	r3, r3, #10
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 ff2a 	bl	80044dc <I2C_SlaveReceive_RXNE>
 8003688:	e014      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	0a5b      	lsrs	r3, r3, #9
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff58 	bl	8004558 <I2C_SlaveReceive_BTF>
 80036a8:	e004      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00e      	beq.n	8003708 <HAL_I2C_ER_IRQHandler+0x4e>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003706:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	0a5b      	lsrs	r3, r3, #9
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0x78>
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003730:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	0a9b      	lsrs	r3, r3, #10
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03f      	beq.n	80037be <HAL_I2C_ER_IRQHandler+0x104>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d039      	beq.n	80037be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800374a:	7efb      	ldrb	r3, [r7, #27]
 800374c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003764:	7ebb      	ldrb	r3, [r7, #26]
 8003766:	2b20      	cmp	r3, #32
 8003768:	d112      	bne.n	8003790 <HAL_I2C_ER_IRQHandler+0xd6>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <HAL_I2C_ER_IRQHandler+0xd6>
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b21      	cmp	r3, #33	@ 0x21
 8003774:	d008      	beq.n	8003788 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b29      	cmp	r3, #41	@ 0x29
 800377a:	d005      	beq.n	8003788 <HAL_I2C_ER_IRQHandler+0xce>
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b28      	cmp	r3, #40	@ 0x28
 8003780:	d106      	bne.n	8003790 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b21      	cmp	r3, #33	@ 0x21
 8003786:	d103      	bne.n	8003790 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f001 f881 	bl	8004890 <I2C_Slave_AF>
 800378e:	e016      	b.n	80037be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003798:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037a2:	7efb      	ldrb	r3, [r7, #27]
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d002      	beq.n	80037ae <HAL_I2C_ER_IRQHandler+0xf4>
 80037a8:	7efb      	ldrb	r3, [r7, #27]
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	d107      	bne.n	80037be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	0adb      	lsrs	r3, r3, #11
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80037e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f001 f8bc 	bl	8004978 <I2C_ITError>
  }
}
 8003800:	bf00      	nop
 8003802:	3728      	adds	r7, #40	@ 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
 8003864:	4613      	mov	r3, r2
 8003866:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d150      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0xc8>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b21      	cmp	r3, #33	@ 0x21
 8003902:	d14d      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b08      	cmp	r3, #8
 8003908:	d01d      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d01a      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003916:	d016      	beq.n	8003946 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003926:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2211      	movs	r2, #17
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff62 	bl	8003808 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003944:	e060      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003954:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003964:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d107      	bne.n	8003990 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff7d 	bl	8003888 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800398e:	e03b      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff35 	bl	8003808 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800399e:	e033      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b21      	cmp	r3, #33	@ 0x21
 80039a4:	d005      	beq.n	80039b2 <I2C_MasterTransmit_TXE+0xda>
 80039a6:	7bbb      	ldrb	r3, [r7, #14]
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d12d      	bne.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b22      	cmp	r3, #34	@ 0x22
 80039b0:	d12a      	bne.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039cc:	e01c      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d103      	bne.n	80039e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f88e 	bl	8003afc <I2C_MemoryTransmit_TXE_BTF>
}
 80039e0:	e012      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a06:	e7ff      	b.n	8003a08 <I2C_MasterTransmit_TXE+0x130>
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b21      	cmp	r3, #33	@ 0x21
 8003a28:	d164      	bne.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a58:	e04c      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d01d      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d01a      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a6c:	d016      	beq.n	8003a9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2211      	movs	r2, #17
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff feb7 	bl	8003808 <HAL_I2C_MasterTxCpltCallback>
}
 8003a9a:	e02b      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aaa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d107      	bne.n	8003ae6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fed2 	bl	8003888 <HAL_I2C_MemTxCpltCallback>
}
 8003ae4:	e006      	b.n	8003af4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fe8a 	bl	8003808 <HAL_I2C_MasterTxCpltCallback>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11d      	bne.n	8003b50 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10b      	bne.n	8003b34 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b32:	e077      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	121b      	asrs	r3, r3, #8
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b4e:	e069      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10b      	bne.n	8003b70 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b6e:	e059      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d152      	bne.n	8003c1e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b22      	cmp	r3, #34	@ 0x22
 8003b7c:	d10d      	bne.n	8003b9a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b98:	e044      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b21      	cmp	r3, #33	@ 0x21
 8003ba8:	d112      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bce:	e029      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d124      	bne.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b21      	cmp	r3, #33	@ 0x21
 8003bde:	d121      	bne.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fe36 	bl	8003888 <HAL_I2C_MemTxCpltCallback>
}
 8003c1c:	e002      	b.n	8003c24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe ff6a 	bl	8002af8 <I2C_Flush_DR>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b22      	cmp	r3, #34	@ 0x22
 8003c3e:	f040 80b9 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d921      	bls.n	8003c9a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f040 8096 	bne.w	8003db4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c98:	e08c      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d07f      	beq.n	8003da2 <I2C_MasterReceive_RXNE+0x176>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <I2C_MasterReceive_RXNE+0x82>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d179      	bne.n	8003da2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f001 fb64 	bl	800537c <I2C_WaitOnSTOPRequestThroughIT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d14c      	bne.n	8003d54 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d10a      	bne.n	8003d2a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fdba 	bl	800389c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d28:	e044      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d002      	beq.n	8003d3e <I2C_MasterReceive_RXNE+0x112>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d103      	bne.n	8003d46 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d44:	e002      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2212      	movs	r2, #18
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fd65 	bl	800381c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d52:	e02f      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fd88 	bl	80038b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da0:	e008      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	605a      	str	r2, [r3, #4]
}
 8003db2:	e7ff      	b.n	8003db4 <I2C_MasterReceive_RXNE+0x188>
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d11b      	bne.n	8003e0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e0a:	e0c4      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d129      	bne.n	8003e6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00a      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d007      	beq.n	8003e42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e68:	e095      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d17d      	bne.n	8003f70 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d002      	beq.n	8003e80 <I2C_MasterReceive_BTF+0xc4>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d108      	bne.n	8003e92 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e016      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d002      	beq.n	8003e9e <I2C_MasterReceive_BTF+0xe2>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d10a      	bne.n	8003f46 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fcac 	bl	800389c <HAL_I2C_MemRxCpltCallback>
}
 8003f44:	e027      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d002      	beq.n	8003f5a <I2C_MasterReceive_BTF+0x19e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d103      	bne.n	8003f62 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f60:	e002      	b.n	8003f68 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2212      	movs	r2, #18
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fc57 	bl	800381c <HAL_I2C_MasterRxCpltCallback>
}
 8003f6e:	e012      	b.n	8003f96 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d117      	bne.n	8003fe2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fcc:	e067      	b.n	800409e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]
}
 8003fe0:	e05d      	b.n	800409e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fea:	d133      	bne.n	8004054 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b21      	cmp	r3, #33	@ 0x21
 8003ff6:	d109      	bne.n	800400c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e008      	b.n	800401e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <I2C_Master_SB+0x92>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	2b00      	cmp	r3, #0
 8004036:	d032      	beq.n	800409e <I2C_Master_SB+0x100>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02d      	beq.n	800409e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004050:	605a      	str	r2, [r3, #4]
}
 8004052:	e024      	b.n	800409e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10e      	bne.n	800407a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004060:	b29b      	uxth	r3, r3
 8004062:	11db      	asrs	r3, r3, #7
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0306 	and.w	r3, r3, #6
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f063 030f 	orn	r3, r3, #15
 8004070:	b2da      	uxtb	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]
}
 8004078:	e011      	b.n	800409e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10d      	bne.n	800409e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	b29b      	uxth	r3, r3
 8004088:	11db      	asrs	r3, r3, #7
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 0306 	and.w	r3, r3, #6
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f063 030e 	orn	r3, r3, #14
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <I2C_Master_ADD10+0x26>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <I2C_Master_ADD10+0x48>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040fe:	b480      	push	{r7}
 8004100:	b091      	sub	sp, #68	@ 0x44
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800410c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b22      	cmp	r3, #34	@ 0x22
 8004126:	f040 8169 	bne.w	80043fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <I2C_Master_ADDR+0x54>
 8004132:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d10b      	bne.n	8004152 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413a:	2300      	movs	r3, #0
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	633b      	str	r3, [r7, #48]	@ 0x30
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	e160      	b.n	8004414 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <I2C_Master_ADDR+0x98>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004162:	d118      	bne.n	8004196 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004188:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	651a      	str	r2, [r3, #80]	@ 0x50
 8004194:	e13e      	b.n	8004414 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e115      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f040 808a 	bne.w	80042e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041da:	d137      	bne.n	800424c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041fa:	d113      	bne.n	8004224 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	e0e7      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e0d3      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b08      	cmp	r3, #8
 8004250:	d02e      	beq.n	80042b0 <I2C_Master_ADDR+0x1b2>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2b20      	cmp	r3, #32
 8004256:	d02b      	beq.n	80042b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	2b12      	cmp	r3, #18
 800425c:	d102      	bne.n	8004264 <I2C_Master_ADDR+0x166>
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	2b01      	cmp	r3, #1
 8004262:	d125      	bne.n	80042b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	2b04      	cmp	r3, #4
 8004268:	d00e      	beq.n	8004288 <I2C_Master_ADDR+0x18a>
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	2b02      	cmp	r3, #2
 800426e:	d00b      	beq.n	8004288 <I2C_Master_ADDR+0x18a>
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2b10      	cmp	r3, #16
 8004274:	d008      	beq.n	8004288 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004296:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	e0a1      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e085      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d14d      	bne.n	800438e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d016      	beq.n	8004326 <I2C_Master_ADDR+0x228>
 80042f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d013      	beq.n	8004326 <I2C_Master_ADDR+0x228>
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	2b10      	cmp	r3, #16
 8004302:	d010      	beq.n	8004326 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e007      	b.n	8004336 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004334:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004344:	d117      	bne.n	8004376 <I2C_Master_ADDR+0x278>
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800434c:	d00b      	beq.n	8004366 <I2C_Master_ADDR+0x268>
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	2b01      	cmp	r3, #1
 8004352:	d008      	beq.n	8004366 <I2C_Master_ADDR+0x268>
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b08      	cmp	r3, #8
 8004358:	d005      	beq.n	8004366 <I2C_Master_ADDR+0x268>
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	2b10      	cmp	r3, #16
 800435e:	d002      	beq.n	8004366 <I2C_Master_ADDR+0x268>
 8004360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004362:	2b20      	cmp	r3, #32
 8004364:	d107      	bne.n	8004376 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004374:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	e032      	b.n	80043f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800439c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ac:	d117      	bne.n	80043de <I2C_Master_ADDR+0x2e0>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b4:	d00b      	beq.n	80043ce <I2C_Master_ADDR+0x2d0>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d008      	beq.n	80043ce <I2C_Master_ADDR+0x2d0>
 80043bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d005      	beq.n	80043ce <I2C_Master_ADDR+0x2d0>
 80043c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d002      	beq.n	80043ce <I2C_Master_ADDR+0x2d0>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d107      	bne.n	80043de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80043fa:	e00b      	b.n	8004414 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	e7ff      	b.n	8004414 <I2C_Master_ADDR+0x316>
 8004414:	bf00      	nop
 8004416:	3744      	adds	r7, #68	@ 0x44
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02b      	beq.n	8004492 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d114      	bne.n	8004492 <I2C_SlaveTransmit_TXE+0x72>
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b29      	cmp	r3, #41	@ 0x29
 800446c:	d111      	bne.n	8004492 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2221      	movs	r2, #33	@ 0x21
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2228      	movs	r2, #40	@ 0x28
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff f9cf 	bl	8003830 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02c      	beq.n	8004550 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d114      	bne.n	8004550 <I2C_SlaveReceive_RXNE+0x74>
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b2a      	cmp	r3, #42	@ 0x2a
 800452a:	d111      	bne.n	8004550 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2222      	movs	r2, #34	@ 0x22
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2228      	movs	r2, #40	@ 0x28
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f97a 	bl	8003844 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045b6:	2b28      	cmp	r3, #40	@ 0x28
 80045b8:	d127      	bne.n	800460a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	09db      	lsrs	r3, r3, #7
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	81bb      	strh	r3, [r7, #12]
 80045ec:	e002      	b.n	80045f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80045fc:	89ba      	ldrh	r2, [r7, #12]
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff f928 	bl	8003858 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004608:	e00e      	b.n	8004628 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800464e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468c:	d172      	bne.n	8004774 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b22      	cmp	r3, #34	@ 0x22
 8004692:	d002      	beq.n	800469a <I2C_Slave_STOPF+0x6a>
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b2a      	cmp	r3, #42	@ 0x2a
 8004698:	d135      	bne.n	8004706 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f043 0204 	orr.w	r2, r3, #4
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd feed 	bl	80024b2 <HAL_DMA_GetState>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d049      	beq.n	8004772 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	4a69      	ldr	r2, [pc, #420]	@ (8004888 <I2C_Slave_STOPF+0x258>)
 80046e4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd febf 	bl	800246e <HAL_DMA_Abort_IT>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03d      	beq.n	8004772 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004700:	4610      	mov	r0, r2
 8004702:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004704:	e035      	b.n	8004772 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd feb7 	bl	80024b2 <HAL_DMA_GetState>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	d014      	beq.n	8004774 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	4a4e      	ldr	r2, [pc, #312]	@ (8004888 <I2C_Slave_STOPF+0x258>)
 8004750:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd fe89 	bl	800246e <HAL_DMA_Abort_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
 8004770:	e000      	b.n	8004774 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004772:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d03e      	beq.n	80047fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d112      	bne.n	80047b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d112      	bne.n	80047e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f043 0204 	orr.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8b7 	bl	8004978 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800480a:	e039      	b.n	8004880 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004810:	d109      	bne.n	8004826 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2228      	movs	r2, #40	@ 0x28
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff f80f 	bl	8003844 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b28      	cmp	r3, #40	@ 0x28
 8004830:	d111      	bne.n	8004856 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a15      	ldr	r2, [pc, #84]	@ (800488c <I2C_Slave_STOPF+0x25c>)
 8004836:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff f810 	bl	8003874 <HAL_I2C_ListenCpltCallback>
}
 8004854:	e014      	b.n	8004880 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b22      	cmp	r3, #34	@ 0x22
 800485c:	d002      	beq.n	8004864 <I2C_Slave_STOPF+0x234>
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b22      	cmp	r3, #34	@ 0x22
 8004862:	d10d      	bne.n	8004880 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe ffe2 	bl	8003844 <HAL_I2C_SlaveRxCpltCallback>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	08004ed9 	.word	0x08004ed9
 800488c:	ffff0000 	.word	0xffff0000

08004890 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d002      	beq.n	80048b2 <I2C_Slave_AF+0x22>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d129      	bne.n	8004906 <I2C_Slave_AF+0x76>
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b28      	cmp	r3, #40	@ 0x28
 80048b6:	d126      	bne.n	8004906 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004974 <I2C_Slave_AF+0xe4>)
 80048bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe ffb8 	bl	8003874 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004904:	e031      	b.n	800496a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b21      	cmp	r3, #33	@ 0x21
 800490a:	d129      	bne.n	8004960 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <I2C_Slave_AF+0xe4>)
 8004910:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2221      	movs	r2, #33	@ 0x21
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004936:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004940:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004950:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe f8d0 	bl	8002af8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fe ff69 	bl	8003830 <HAL_I2C_SlaveTxCpltCallback>
}
 800495e:	e004      	b.n	800496a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004968:	615a      	str	r2, [r3, #20]
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	ffff0000 	.word	0xffff0000

08004978 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800498e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d002      	beq.n	800499c <I2C_ITError+0x24>
 8004996:	7bbb      	ldrb	r3, [r7, #14]
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d10a      	bne.n	80049b2 <I2C_ITError+0x3a>
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b22      	cmp	r3, #34	@ 0x22
 80049a0:	d107      	bne.n	80049b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049b8:	2b28      	cmp	r3, #40	@ 0x28
 80049ba:	d107      	bne.n	80049cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2228      	movs	r2, #40	@ 0x28
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049ca:	e015      	b.n	80049f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049da:	d00a      	beq.n	80049f2 <I2C_ITError+0x7a>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b60      	cmp	r3, #96	@ 0x60
 80049e0:	d007      	beq.n	80049f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a06:	d162      	bne.n	8004ace <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d020      	beq.n	8004a68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bd4 <I2C_ITError+0x25c>)
 8004a2c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fd1b 	bl	800246e <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8089 	beq.w	8004b52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a62:	4610      	mov	r0, r2
 8004a64:	4798      	blx	r3
 8004a66:	e074      	b.n	8004b52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	4a59      	ldr	r2, [pc, #356]	@ (8004bd4 <I2C_ITError+0x25c>)
 8004a6e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd fcfa 	bl	800246e <HAL_DMA_Abort_IT>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d068      	beq.n	8004b52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b40      	cmp	r3, #64	@ 0x40
 8004a8c:	d10b      	bne.n	8004aa6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	e041      	b.n	8004b52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b60      	cmp	r3, #96	@ 0x60
 8004ad8:	d125      	bne.n	8004b26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b40      	cmp	r3, #64	@ 0x40
 8004af4:	d10b      	bne.n	8004b0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fe fed0 	bl	80038c4 <HAL_I2C_AbortCpltCallback>
 8004b24:	e015      	b.n	8004b52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d10b      	bne.n	8004b4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fe feaf 	bl	80038b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d113      	bne.n	8004bcc <I2C_ITError+0x254>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b28      	cmp	r3, #40	@ 0x28
 8004ba8:	d110      	bne.n	8004bcc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd8 <I2C_ITError+0x260>)
 8004bae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe fe54 	bl	8003874 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	08004ed9 	.word	0x08004ed9
 8004bd8:	ffff0000 	.word	0xffff0000

08004bdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	813b      	strh	r3, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fa08 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2c:	d103      	bne.n	8004c36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e05f      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c3a:	897b      	ldrh	r3, [r7, #10]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	492d      	ldr	r1, [pc, #180]	@ (8004d04 <I2C_RequestMemoryWrite+0x128>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fa63 	bl	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04c      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	6a39      	ldr	r1, [r7, #32]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 faee 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d107      	bne.n	8004c9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e02b      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca8:	893b      	ldrh	r3, [r7, #8]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	e021      	b.n	8004cf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fac8 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d107      	bne.n	8004cea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e005      	b.n	8004cfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cee:	893b      	ldrh	r3, [r7, #8]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	00010002 	.word	0x00010002

08004d08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f96a 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d68:	d103      	bne.n	8004d72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0aa      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d76:	897b      	ldrh	r3, [r7, #10]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	4952      	ldr	r1, [pc, #328]	@ (8004ed4 <I2C_RequestMemoryRead+0x1cc>)
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f9c5 	bl	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e097      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa50 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d107      	bne.n	8004dda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e076      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d105      	bne.n	8004df0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004de4:	893b      	ldrh	r3, [r7, #8]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	611a      	str	r2, [r3, #16]
 8004dee:	e021      	b.n	8004e34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004df0:	893b      	ldrh	r3, [r7, #8]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa2a 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e050      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2a:	893b      	ldrh	r3, [r7, #8]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e36:	6a39      	ldr	r1, [r7, #32]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fa0f 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d107      	bne.n	8004e5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e035      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f8d3 	bl	8005028 <I2C_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e96:	d103      	bne.n	8004ea0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e013      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <I2C_RequestMemoryRead+0x1cc>)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f92e 	bl	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	00010002 	.word	0x00010002

08004ed8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <I2C_DMAAbort+0x148>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8005024 <I2C_DMAAbort+0x14c>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a1a      	lsrs	r2, r3, #8
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00da      	lsls	r2, r3, #3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f1e:	e00a      	b.n	8004f36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d0ea      	beq.n	8004f0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f42:	2200      	movs	r2, #0
 8004f44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	2200      	movs	r2, #0
 8004f54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f78:	2200      	movs	r2, #0
 8004f7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	2200      	movs	r2, #0
 8004f8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b60      	cmp	r3, #96	@ 0x60
 8004fa6:	d10e      	bne.n	8004fc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7fe fc80 	bl	80038c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc4:	e027      	b.n	8005016 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fcc:	2b28      	cmp	r3, #40	@ 0x28
 8004fce:	d117      	bne.n	8005000 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2228      	movs	r2, #40	@ 0x28
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ffe:	e007      	b.n	8005010 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005010:	6978      	ldr	r0, [r7, #20]
 8005012:	f7fe fc4d 	bl	80038b0 <HAL_I2C_ErrorCallback>
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000
 8005024:	14f8b589 	.word	0x14f8b589

08005028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005038:	e048      	b.n	80050cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d044      	beq.n	80050cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fd f863 	bl	800210c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d139      	bne.n	80050cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10d      	bne.n	800507e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	43da      	mvns	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	e00c      	b.n	8005098 <I2C_WaitOnFlagUntilTimeout+0x70>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	429a      	cmp	r2, r3
 800509c:	d116      	bne.n	80050cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e023      	b.n	8005114 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10d      	bne.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	43da      	mvns	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	e00c      	b.n	800510c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	43da      	mvns	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	429a      	cmp	r2, r3
 8005110:	d093      	beq.n	800503a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512a:	e071      	b.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513a:	d123      	bne.n	8005184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e067      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d041      	beq.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fc ffbe 	bl	800210c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d136      	bne.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d10c      	bne.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	43da      	mvns	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf14      	ite	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	2300      	moveq	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	e00b      	b.n	80051de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	43da      	mvns	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d016      	beq.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e021      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10c      	bne.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	43da      	mvns	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e00b      	b.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	43da      	mvns	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf14      	ite	ne
 8005246:	2301      	movne	r3, #1
 8005248:	2300      	moveq	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af6d 	bne.w	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005268:	e034      	b.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f915 	bl	800549a <I2C_IsAcknowledgeFailed>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e034      	b.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d028      	beq.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fc ff43 	bl	800210c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11d      	bne.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a2:	2b80      	cmp	r3, #128	@ 0x80
 80052a4:	d016      	beq.n	80052d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e007      	b.n	80052e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d1c3      	bne.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f8:	e034      	b.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f8cd 	bl	800549a <I2C_IsAcknowledgeFailed>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e034      	b.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d028      	beq.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fc fefb 	bl	800210c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11d      	bne.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d016      	beq.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e007      	b.n	8005374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d1c3      	bne.n	80052fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005388:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	4a13      	ldr	r2, [pc, #76]	@ (80053dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	0a1a      	lsrs	r2, r3, #8
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e008      	b.n	80053cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c8:	d0e9      	beq.n	800539e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000000 	.word	0x20000000
 80053dc:	14f8b589 	.word	0x14f8b589

080053e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ec:	e049      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d119      	bne.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0210 	mvn.w	r2, #16
 8005404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e030      	b.n	8005492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005430:	f7fc fe6c 	bl	800210c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d016      	beq.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	f043 0220 	orr.w	r2, r3, #32
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e007      	b.n	8005492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548c:	2b40      	cmp	r3, #64	@ 0x40
 800548e:	d1ae      	bne.n	80053ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b0:	d11b      	bne.n	80054ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	f043 0204 	orr.w	r2, r3, #4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005508:	d103      	bne.n	8005512 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005510:	e007      	b.n	8005522 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800551a:	d102      	bne.n	8005522 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2208      	movs	r2, #8
 8005520:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e267      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d075      	beq.n	800563a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800554e:	4b88      	ldr	r3, [pc, #544]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00c      	beq.n	8005574 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4b85      	ldr	r3, [pc, #532]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005562:	2b08      	cmp	r3, #8
 8005564:	d112      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b82      	ldr	r3, [pc, #520]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b7e      	ldr	r3, [pc, #504]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x108>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e242      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x74>
 8005596:	4b76      	ldr	r3, [pc, #472]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a75      	ldr	r2, [pc, #468]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b70      	ldr	r3, [pc, #448]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6c      	ldr	r2, [pc, #432]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055c8:	4b69      	ldr	r3, [pc, #420]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a68      	ldr	r2, [pc, #416]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b66      	ldr	r3, [pc, #408]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a65      	ldr	r2, [pc, #404]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fc fd90 	bl	800210c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fc fd8c 	bl	800210c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	@ 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e207      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b5b      	ldr	r3, [pc, #364]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fc fd7c 	bl	800210c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fc fd78 	bl	800210c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1f3      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b51      	ldr	r3, [pc, #324]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xe8>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d063      	beq.n	800570e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005646:	4b4a      	ldr	r3, [pc, #296]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b47      	ldr	r3, [pc, #284]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800565a:	2b08      	cmp	r3, #8
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b44      	ldr	r3, [pc, #272]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b41      	ldr	r3, [pc, #260]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1c7      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b3b      	ldr	r3, [pc, #236]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4937      	ldr	r1, [pc, #220]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e03a      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b34      	ldr	r3, [pc, #208]	@ (8005774 <HAL_RCC_OscConfig+0x244>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fc fd31 	bl	800210c <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fc fd2d 	bl	800210c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e1a8      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056cc:	4b28      	ldr	r3, [pc, #160]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4925      	ldr	r1, [pc, #148]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e2:	4b24      	ldr	r3, [pc, #144]	@ (8005774 <HAL_RCC_OscConfig+0x244>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc fd10 	bl	800210c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f0:	f7fc fd0c 	bl	800210c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e187      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d036      	beq.n	8005788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b15      	ldr	r3, [pc, #84]	@ (8005778 <HAL_RCC_OscConfig+0x248>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fc fcf0 	bl	800210c <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005730:	f7fc fcec 	bl	800210c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e167      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <HAL_RCC_OscConfig+0x240>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x200>
 800574e:	e01b      	b.n	8005788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <HAL_RCC_OscConfig+0x248>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005756:	f7fc fcd9 	bl	800210c <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	e00e      	b.n	800577c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575e:	f7fc fcd5 	bl	800210c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d907      	bls.n	800577c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e150      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
 8005770:	40023800 	.word	0x40023800
 8005774:	42470000 	.word	0x42470000
 8005778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b88      	ldr	r3, [pc, #544]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ea      	bne.n	800575e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8097 	beq.w	80058c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579a:	4b81      	ldr	r3, [pc, #516]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	4b7d      	ldr	r3, [pc, #500]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	4a7c      	ldr	r2, [pc, #496]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057b6:	4b7a      	ldr	r3, [pc, #488]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	4b77      	ldr	r3, [pc, #476]	@ (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d118      	bne.n	8005804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d2:	4b74      	ldr	r3, [pc, #464]	@ (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a73      	ldr	r2, [pc, #460]	@ (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057de:	f7fc fc95 	bl	800210c <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e6:	f7fc fc91 	bl	800210c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e10c      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f8:	4b6a      	ldr	r3, [pc, #424]	@ (80059a4 <HAL_RCC_OscConfig+0x474>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x2ea>
 800580c:	4b64      	ldr	r3, [pc, #400]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	4a63      	ldr	r2, [pc, #396]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6713      	str	r3, [r2, #112]	@ 0x70
 8005818:	e01c      	b.n	8005854 <HAL_RCC_OscConfig+0x324>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x30c>
 8005822:	4b5f      	ldr	r3, [pc, #380]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	4a5e      	ldr	r2, [pc, #376]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	6713      	str	r3, [r2, #112]	@ 0x70
 800582e:	4b5c      	ldr	r3, [pc, #368]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005832:	4a5b      	ldr	r2, [pc, #364]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6713      	str	r3, [r2, #112]	@ 0x70
 800583a:	e00b      	b.n	8005854 <HAL_RCC_OscConfig+0x324>
 800583c:	4b58      	ldr	r3, [pc, #352]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	4a57      	ldr	r2, [pc, #348]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	@ 0x70
 8005848:	4b55      	ldr	r3, [pc, #340]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584c:	4a54      	ldr	r2, [pc, #336]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800584e:	f023 0304 	bic.w	r3, r3, #4
 8005852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fc fc56 	bl	800210c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fc fc52 	bl	800210c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0cb      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	4b49      	ldr	r3, [pc, #292]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ee      	beq.n	8005864 <HAL_RCC_OscConfig+0x334>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005888:	f7fc fc40 	bl	800210c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fc fc3c 	bl	800210c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0b5      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a6:	4b3e      	ldr	r3, [pc, #248]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ee      	bne.n	8005890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	4a38      	ldr	r2, [pc, #224]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a1 	beq.w	8005a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ce:	4b34      	ldr	r3, [pc, #208]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d05c      	beq.n	8005994 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d141      	bne.n	8005966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b31      	ldr	r3, [pc, #196]	@ (80059a8 <HAL_RCC_OscConfig+0x478>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fc fc10 	bl	800210c <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc fc0c 	bl	800210c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e087      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	4b27      	ldr	r3, [pc, #156]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	491b      	ldr	r1, [pc, #108]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005938:	4b1b      	ldr	r3, [pc, #108]	@ (80059a8 <HAL_RCC_OscConfig+0x478>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fc fbe5 	bl	800210c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fc fbe1 	bl	800210c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e05c      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005958:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x416>
 8005964:	e054      	b.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <HAL_RCC_OscConfig+0x478>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fc fbce 	bl	800210c <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fc fbca 	bl	800210c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e045      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <HAL_RCC_OscConfig+0x470>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x444>
 8005992:	e03d      	b.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e038      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40007000 	.word	0x40007000
 80059a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d028      	beq.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d121      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d11a      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059dc:	4013      	ands	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d111      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	3b01      	subs	r3, #1
 80059f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800

08005a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0cc      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	4b68      	ldr	r3, [pc, #416]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d90c      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b65      	ldr	r3, [pc, #404]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b63      	ldr	r3, [pc, #396]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0b8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a74:	4b59      	ldr	r3, [pc, #356]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a58      	ldr	r2, [pc, #352]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8c:	4b53      	ldr	r3, [pc, #332]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a52      	ldr	r2, [pc, #328]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b50      	ldr	r3, [pc, #320]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	494d      	ldr	r1, [pc, #308]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b47      	ldr	r3, [pc, #284]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d119      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	4b3f      	ldr	r3, [pc, #252]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e06f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aee:	4b3b      	ldr	r3, [pc, #236]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e067      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afe:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f023 0203 	bic.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4934      	ldr	r1, [pc, #208]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b10:	f7fc fafc 	bl	800210c <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fc faf8 	bl	800210c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e04f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 020c 	and.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1eb      	bne.n	8005b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b40:	4b25      	ldr	r3, [pc, #148]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d20c      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b22      	ldr	r3, [pc, #136]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e032      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b74:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4916      	ldr	r1, [pc, #88]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b92:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	490e      	ldr	r1, [pc, #56]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ba6:	f000 f821 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	490a      	ldr	r1, [pc, #40]	@ (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	5ccb      	ldrb	r3, [r1, r3]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fc fa5c 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023c00 	.word	0x40023c00
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	08009c3c 	.word	0x08009c3c
 8005be4:	20000000 	.word	0x20000000
 8005be8:	2000000c 	.word	0x2000000c

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b094      	sub	sp, #80	@ 0x50
 8005bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c04:	4b79      	ldr	r3, [pc, #484]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 030c 	and.w	r3, r3, #12
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x40>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	f200 80e1 	bhi.w	8005dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1e:	e0db      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c20:	4b73      	ldr	r3, [pc, #460]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c24:	e0db      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c26:	4b73      	ldr	r3, [pc, #460]	@ (8005df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c2a:	e0d8      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c36:	4b6d      	ldr	r3, [pc, #436]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d063      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c42:	4b6a      	ldr	r3, [pc, #424]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	2200      	movs	r2, #0
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c56:	2300      	movs	r3, #0
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	0159      	lsls	r1, r3, #5
 8005c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c70:	0150      	lsls	r0, r2, #5
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4621      	mov	r1, r4
 8005c78:	1a51      	subs	r1, r2, r1
 8005c7a:	6139      	str	r1, [r7, #16]
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c90:	4659      	mov	r1, fp
 8005c92:	018b      	lsls	r3, r1, #6
 8005c94:	4651      	mov	r1, sl
 8005c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c9a:	4651      	mov	r1, sl
 8005c9c:	018a      	lsls	r2, r1, #6
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cbe:	4690      	mov	r8, r2
 8005cc0:	4699      	mov	r9, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	eb18 0303 	adds.w	r3, r8, r3
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	462b      	mov	r3, r5
 8005ccc:	eb49 0303 	adc.w	r3, r9, r3
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cde:	4629      	mov	r1, r5
 8005ce0:	024b      	lsls	r3, r1, #9
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ce8:	4621      	mov	r1, r4
 8005cea:	024a      	lsls	r2, r1, #9
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cfc:	f7fa ff54 	bl	8000ba8 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d08:	e058      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d0a:	4b38      	ldr	r3, [pc, #224]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	2200      	movs	r2, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	4611      	mov	r1, r2
 8005d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d1a:	623b      	str	r3, [r7, #32]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	f04f 0000 	mov.w	r0, #0
 8005d2c:	f04f 0100 	mov.w	r1, #0
 8005d30:	0159      	lsls	r1, r3, #5
 8005d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d36:	0150      	lsls	r0, r2, #5
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d42:	4649      	mov	r1, r9
 8005d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d60:	eb63 050b 	sbc.w	r5, r3, fp
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	00eb      	lsls	r3, r5, #3
 8005d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d72:	00e2      	lsls	r2, r4, #3
 8005d74:	4614      	mov	r4, r2
 8005d76:	461d      	mov	r5, r3
 8005d78:	4643      	mov	r3, r8
 8005d7a:	18e3      	adds	r3, r4, r3
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	464b      	mov	r3, r9
 8005d80:	eb45 0303 	adc.w	r3, r5, r3
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d92:	4629      	mov	r1, r5
 8005d94:	028b      	lsls	r3, r1, #10
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	028a      	lsls	r2, r1, #10
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da6:	2200      	movs	r2, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	61fa      	str	r2, [r7, #28]
 8005dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db0:	f7fa fefa 	bl	8000ba8 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005dcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3750      	adds	r7, #80	@ 0x50
 8005de4:	46bd      	mov	sp, r7
 8005de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00f42400 	.word	0x00f42400
 8005df4:	007a1200 	.word	0x007a1200

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000000 	.word	0x20000000

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0a9b      	lsrs	r3, r3, #10
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	@ (8005e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	08009c4c 	.word	0x08009c4c

08005e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e3c:	f7ff ffdc 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	0b5b      	lsrs	r3, r3, #13
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4903      	ldr	r1, [pc, #12]	@ (8005e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	08009c4c 	.word	0x08009c4c

08005e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e07b      	b.n	8005f6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e82:	d009      	beq.n	8005e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	61da      	str	r2, [r3, #28]
 8005e8a:	e005      	b.n	8005e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fc54 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ece:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	ea42 0103 	orr.w	r1, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	f003 0104 	and.w	r1, r3, #4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	f003 0210 	and.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e042      	b.n	800600a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fb fec5 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2224      	movs	r2, #36	@ 0x24
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fd1a 	bl	80069f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	4613      	mov	r3, r2
 800601e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b20      	cmp	r3, #32
 800602a:	d121      	bne.n	8006070 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_UART_Transmit_IT+0x26>
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01a      	b.n	8006072 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	@ 0x21
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800606a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b20      	cmp	r3, #32
 8006096:	d112      	bne.n	80060be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_UART_Receive_IT+0x26>
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e00b      	b.n	80060c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	461a      	mov	r2, r3
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fac7 	bl	8006648 <UART_Start_Receive_IT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e000      	b.n	80060c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b0ba      	sub	sp, #232	@ 0xe8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_UART_IRQHandler+0x66>
 800611a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fba4 	bl	8006874 <UART_Receive_IT>
      return;
 800612c:	e273      	b.n	8006616 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800612e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80de 	beq.w	80062f4 <HAL_UART_IRQHandler+0x22c>
 8006138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80d1 	beq.w	80062f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <HAL_UART_IRQHandler+0xae>
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f043 0201 	orr.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
 8006182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006192:	f043 0202 	orr.w	r2, r3, #2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_UART_IRQHandler+0xf6>
 80061a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d011      	beq.n	80061ee <HAL_UART_IRQHandler+0x126>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f043 0208 	orr.w	r2, r3, #8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 820a 	beq.w	800660c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_UART_IRQHandler+0x14e>
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fb2f 	bl	8006874 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_UART_IRQHandler+0x17a>
 800623a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d04f      	beq.n	80062e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa3a 	bl	80066bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d141      	bne.n	80062da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3314      	adds	r3, #20
 800625c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800626c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006282:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800628e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800629a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1d9      	bne.n	8006256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ae:	4a8a      	ldr	r2, [pc, #552]	@ (80064d8 <HAL_UART_IRQHandler+0x410>)
 80062b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc f8d9 	bl	800246e <HAL_DMA_Abort_IT>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e00e      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9a2 	bl	800661c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	e00a      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f99e 	bl	800661c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	e006      	b.n	80062f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f99a 	bl	800661c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062ee:	e18d      	b.n	800660c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	bf00      	nop
    return;
 80062f2:	e18b      	b.n	800660c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f040 8167 	bne.w	80065cc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8160 	beq.w	80065cc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8159 	beq.w	80065cc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633a:	2b40      	cmp	r3, #64	@ 0x40
 800633c:	f040 80ce 	bne.w	80064dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800634c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80a9 	beq.w	80064a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800635a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800635e:	429a      	cmp	r2, r3
 8006360:	f080 80a2 	bcs.w	80064a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800636a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006376:	f000 8088 	beq.w	800648a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1d9      	bne.n	800637a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e1      	bne.n	80063c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3314      	adds	r3, #20
 8006408:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3314      	adds	r3, #20
 8006422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006428:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800642c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e3      	bne.n	8006402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645a:	f023 0310 	bic.w	r3, r3, #16
 800645e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800646c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800646e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800647a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e3      	bne.n	8006448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006484:	4618      	mov	r0, r3
 8006486:	f7fb ff82 	bl	800238e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	b29b      	uxth	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f8c5 	bl	8006630 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80064a6:	e0b3      	b.n	8006610 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064b0:	429a      	cmp	r2, r3
 80064b2:	f040 80ad 	bne.w	8006610 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c0:	f040 80a6 	bne.w	8006610 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f8ad 	bl	8006630 <HAL_UARTEx_RxEventCallback>
      return;
 80064d6:	e09b      	b.n	8006610 <HAL_UART_IRQHandler+0x548>
 80064d8:	08006783 	.word	0x08006783
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 808e 	beq.w	8006614 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80064f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8089 	beq.w	8006614 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006526:	647a      	str	r2, [r7, #68]	@ 0x44
 8006528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800652c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e3      	bne.n	8006502 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3314      	adds	r3, #20
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	623b      	str	r3, [r7, #32]
   return(result);
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3314      	adds	r3, #20
 800655a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800655e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800656c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e3      	bne.n	800653a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0310 	bic.w	r3, r3, #16
 8006596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065a4:	61fa      	str	r2, [r7, #28]
 80065a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	69b9      	ldr	r1, [r7, #24]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	617b      	str	r3, [r7, #20]
   return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e3      	bne.n	8006580 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f833 	bl	8006630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ca:	e023      	b.n	8006614 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_UART_IRQHandler+0x524>
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f8dd 	bl	80067a4 <UART_Transmit_IT>
    return;
 80065ea:	e014      	b.n	8006616 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <HAL_UART_IRQHandler+0x54e>
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f91d 	bl	8006844 <UART_EndTransmit_IT>
    return;
 800660a:	e004      	b.n	8006616 <HAL_UART_IRQHandler+0x54e>
    return;
 800660c:	bf00      	nop
 800660e:	e002      	b.n	8006616 <HAL_UART_IRQHandler+0x54e>
      return;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_UART_IRQHandler+0x54e>
      return;
 8006614:	bf00      	nop
  }
}
 8006616:	37e8      	adds	r7, #232	@ 0xe8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	88fa      	ldrh	r2, [r7, #6]
 8006666:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2222      	movs	r2, #34	@ 0x22
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800668c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0220 	orr.w	r2, r2, #32
 80066ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b095      	sub	sp, #84	@ 0x54
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e5      	bne.n	80066c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	61fb      	str	r3, [r7, #28]
   return(result);
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3314      	adds	r3, #20
 8006716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800671a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800671e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e5      	bne.n	80066f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006730:	2b01      	cmp	r3, #1
 8006732:	d119      	bne.n	8006768 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60bb      	str	r3, [r7, #8]
   return(result);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	647b      	str	r3, [r7, #68]	@ 0x44
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006754:	61ba      	str	r2, [r7, #24]
 8006756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6979      	ldr	r1, [r7, #20]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	613b      	str	r3, [r7, #16]
   return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006776:	bf00      	nop
 8006778:	3754      	adds	r7, #84	@ 0x54
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff ff40 	bl	800661c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b21      	cmp	r3, #33	@ 0x21
 80067b6:	d13e      	bne.n	8006836 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c0:	d114      	bne.n	80067ec <UART_Transmit_IT+0x48>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d110      	bne.n	80067ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	1c9a      	adds	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]
 80067ea:	e008      	b.n	80067fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6211      	str	r1, [r2, #32]
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4619      	mov	r1, r3
 800680c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006820:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006830:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800685a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fb f8fd 	bl	8001a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	@ 0x30
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b22      	cmp	r3, #34	@ 0x22
 800688e:	f040 80aa 	bne.w	80069e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689a:	d115      	bne.n	80068c8 <UART_Receive_IT+0x54>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d111      	bne.n	80068c8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	1c9a      	adds	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c6:	e024      	b.n	8006912 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d6:	d007      	beq.n	80068e8 <UART_Receive_IT+0x74>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <UART_Receive_IT+0x82>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e008      	b.n	8006908 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006902:	b2da      	uxtb	r2, r3
 8006904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006906:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29b      	uxth	r3, r3
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4619      	mov	r1, r3
 8006920:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006922:	2b00      	cmp	r3, #0
 8006924:	d15d      	bne.n	80069e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0220 	bic.w	r2, r2, #32
 8006934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006944:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	2b01      	cmp	r3, #1
 800696a:	d135      	bne.n	80069d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	613b      	str	r3, [r7, #16]
   return(result);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006992:	623a      	str	r2, [r7, #32]
 8006994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	69f9      	ldr	r1, [r7, #28]
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d10a      	bne.n	80069ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fe2d 	bl	8006630 <HAL_UARTEx_RxEventCallback>
 80069d6:	e002      	b.n	80069de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fb f92f 	bl	8001c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e002      	b.n	80069e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3730      	adds	r7, #48	@ 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b0c0      	sub	sp, #256	@ 0x100
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0c:	68d9      	ldr	r1, [r3, #12]
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	ea40 0301 	orr.w	r3, r0, r1
 8006a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a48:	f021 010c 	bic.w	r1, r1, #12
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a56:	430b      	orrs	r3, r1
 8006a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6a:	6999      	ldr	r1, [r3, #24]
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	ea40 0301 	orr.w	r3, r0, r1
 8006a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8006cbc <UART_SetConfig+0x2cc>)
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d005      	beq.n	8006a90 <UART_SetConfig+0xa0>
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc0 <UART_SetConfig+0x2d0>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d104      	bne.n	8006a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a90:	f7ff f9d2 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006a94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a98:	e003      	b.n	8006aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7ff f9b9 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aac:	f040 810c 	bne.w	8006cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006aba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	1891      	adds	r1, r2, r2
 8006ac8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aca:	415b      	adcs	r3, r3
 8006acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	eb12 0801 	adds.w	r8, r2, r1
 8006ad8:	4629      	mov	r1, r5
 8006ada:	eb43 0901 	adc.w	r9, r3, r1
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006af2:	4690      	mov	r8, r2
 8006af4:	4699      	mov	r9, r3
 8006af6:	4623      	mov	r3, r4
 8006af8:	eb18 0303 	adds.w	r3, r8, r3
 8006afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b00:	462b      	mov	r3, r5
 8006b02:	eb49 0303 	adc.w	r3, r9, r3
 8006b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b1e:	460b      	mov	r3, r1
 8006b20:	18db      	adds	r3, r3, r3
 8006b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b24:	4613      	mov	r3, r2
 8006b26:	eb42 0303 	adc.w	r3, r2, r3
 8006b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b34:	f7fa f838 	bl	8000ba8 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4b61      	ldr	r3, [pc, #388]	@ (8006cc4 <UART_SetConfig+0x2d4>)
 8006b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	011c      	lsls	r4, r3, #4
 8006b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b60:	415b      	adcs	r3, r3
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b68:	4641      	mov	r1, r8
 8006b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b6e:	4649      	mov	r1, r9
 8006b70:	eb43 0b01 	adc.w	fp, r3, r1
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b88:	4692      	mov	sl, r2
 8006b8a:	469b      	mov	fp, r3
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b96:	464b      	mov	r3, r9
 8006b98:	eb4b 0303 	adc.w	r3, fp, r3
 8006b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	18db      	adds	r3, r3, r3
 8006bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bba:	4613      	mov	r3, r2
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bca:	f7f9 ffed 	bl	8000ba8 <__aeabi_uldivmod>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc4 <UART_SetConfig+0x2d4>)
 8006bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	2264      	movs	r2, #100	@ 0x64
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	1acb      	subs	r3, r1, r3
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bea:	4b36      	ldr	r3, [pc, #216]	@ (8006cc4 <UART_SetConfig+0x2d4>)
 8006bec:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bf8:	441c      	add	r4, r3
 8006bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	464b      	mov	r3, r9
 8006c10:	1891      	adds	r1, r2, r2
 8006c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c14:	415b      	adcs	r3, r3
 8006c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	1851      	adds	r1, r2, r1
 8006c20:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c22:	4649      	mov	r1, r9
 8006c24:	414b      	adcs	r3, r1
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c34:	4659      	mov	r1, fp
 8006c36:	00cb      	lsls	r3, r1, #3
 8006c38:	4651      	mov	r1, sl
 8006c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3e:	4651      	mov	r1, sl
 8006c40:	00ca      	lsls	r2, r1, #3
 8006c42:	4610      	mov	r0, r2
 8006c44:	4619      	mov	r1, r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	4642      	mov	r2, r8
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c50:	464b      	mov	r3, r9
 8006c52:	460a      	mov	r2, r1
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c70:	460b      	mov	r3, r1
 8006c72:	18db      	adds	r3, r3, r3
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c76:	4613      	mov	r3, r2
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c86:	f7f9 ff8f 	bl	8000ba8 <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <UART_SetConfig+0x2d4>)
 8006c90:	fba3 1302 	umull	r1, r3, r3, r2
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	2164      	movs	r1, #100	@ 0x64
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	3332      	adds	r3, #50	@ 0x32
 8006ca2:	4a08      	ldr	r2, [pc, #32]	@ (8006cc4 <UART_SetConfig+0x2d4>)
 8006ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f003 0207 	and.w	r2, r3, #7
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4422      	add	r2, r4
 8006cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cb8:	e106      	b.n	8006ec8 <UART_SetConfig+0x4d8>
 8006cba:	bf00      	nop
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	40011400 	.word	0x40011400
 8006cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cda:	4642      	mov	r2, r8
 8006cdc:	464b      	mov	r3, r9
 8006cde:	1891      	adds	r1, r2, r2
 8006ce0:	6239      	str	r1, [r7, #32]
 8006ce2:	415b      	adcs	r3, r3
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cea:	4641      	mov	r1, r8
 8006cec:	1854      	adds	r4, r2, r1
 8006cee:	4649      	mov	r1, r9
 8006cf0:	eb43 0501 	adc.w	r5, r3, r1
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	00eb      	lsls	r3, r5, #3
 8006cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d02:	00e2      	lsls	r2, r4, #3
 8006d04:	4614      	mov	r4, r2
 8006d06:	461d      	mov	r5, r3
 8006d08:	4643      	mov	r3, r8
 8006d0a:	18e3      	adds	r3, r4, r3
 8006d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d10:	464b      	mov	r3, r9
 8006d12:	eb45 0303 	adc.w	r3, r5, r3
 8006d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d36:	4629      	mov	r1, r5
 8006d38:	008b      	lsls	r3, r1, #2
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d40:	4621      	mov	r1, r4
 8006d42:	008a      	lsls	r2, r1, #2
 8006d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d48:	f7f9 ff2e 	bl	8000ba8 <__aeabi_uldivmod>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4b60      	ldr	r3, [pc, #384]	@ (8006ed4 <UART_SetConfig+0x4e4>)
 8006d52:	fba3 2302 	umull	r2, r3, r3, r2
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	011c      	lsls	r4, r3, #4
 8006d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	1891      	adds	r1, r2, r2
 8006d72:	61b9      	str	r1, [r7, #24]
 8006d74:	415b      	adcs	r3, r3
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	1851      	adds	r1, r2, r1
 8006d80:	6139      	str	r1, [r7, #16]
 8006d82:	4649      	mov	r1, r9
 8006d84:	414b      	adcs	r3, r1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d94:	4659      	mov	r1, fp
 8006d96:	00cb      	lsls	r3, r1, #3
 8006d98:	4651      	mov	r1, sl
 8006d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9e:	4651      	mov	r1, sl
 8006da0:	00ca      	lsls	r2, r1, #3
 8006da2:	4610      	mov	r0, r2
 8006da4:	4619      	mov	r1, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	4642      	mov	r2, r8
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006db0:	464b      	mov	r3, r9
 8006db2:	460a      	mov	r2, r1
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	008b      	lsls	r3, r1, #2
 8006dd8:	4641      	mov	r1, r8
 8006dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dde:	4641      	mov	r1, r8
 8006de0:	008a      	lsls	r2, r1, #2
 8006de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006de6:	f7f9 fedf 	bl	8000ba8 <__aeabi_uldivmod>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	4b38      	ldr	r3, [pc, #224]	@ (8006ed4 <UART_SetConfig+0x4e4>)
 8006df2:	fba3 2301 	umull	r2, r3, r3, r1
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	2264      	movs	r2, #100	@ 0x64
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	1acb      	subs	r3, r1, r3
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	3332      	adds	r3, #50	@ 0x32
 8006e04:	4a33      	ldr	r2, [pc, #204]	@ (8006ed4 <UART_SetConfig+0x4e4>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e10:	441c      	add	r4, r3
 8006e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e16:	2200      	movs	r2, #0
 8006e18:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e30:	4641      	mov	r1, r8
 8006e32:	1851      	adds	r1, r2, r1
 8006e34:	6039      	str	r1, [r7, #0]
 8006e36:	4649      	mov	r1, r9
 8006e38:	414b      	adcs	r3, r1
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e48:	4659      	mov	r1, fp
 8006e4a:	00cb      	lsls	r3, r1, #3
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e52:	4651      	mov	r1, sl
 8006e54:	00ca      	lsls	r2, r1, #3
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e62:	464b      	mov	r3, r9
 8006e64:	460a      	mov	r2, r1
 8006e66:	eb42 0303 	adc.w	r3, r2, r3
 8006e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e76:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e84:	4649      	mov	r1, r9
 8006e86:	008b      	lsls	r3, r1, #2
 8006e88:	4641      	mov	r1, r8
 8006e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8e:	4641      	mov	r1, r8
 8006e90:	008a      	lsls	r2, r1, #2
 8006e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e96:	f7f9 fe87 	bl	8000ba8 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <UART_SetConfig+0x4e4>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	@ 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	3332      	adds	r3, #50	@ 0x32
 8006eb2:	4a08      	ldr	r2, [pc, #32]	@ (8006ed4 <UART_SetConfig+0x4e4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4422      	add	r2, r4
 8006ec6:	609a      	str	r2, [r3, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed4:	51eb851f 	.word	0x51eb851f

08006ed8 <malloc>:
 8006ed8:	4b02      	ldr	r3, [pc, #8]	@ (8006ee4 <malloc+0xc>)
 8006eda:	4601      	mov	r1, r0
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	f000 b825 	b.w	8006f2c <_malloc_r>
 8006ee2:	bf00      	nop
 8006ee4:	20000020 	.word	0x20000020

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0f      	ldr	r6, [pc, #60]	@ (8006f28 <sbrk_aligned+0x40>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 ff4e 	bl	8007d94 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 ff49 	bl	8007d94 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d103      	bne.n	8006f0e <sbrk_aligned+0x26>
 8006f06:	f04f 34ff 	mov.w	r4, #4294967295
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	bd70      	pop	{r4, r5, r6, pc}
 8006f0e:	1cc4      	adds	r4, r0, #3
 8006f10:	f024 0403 	bic.w	r4, r4, #3
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d0f8      	beq.n	8006f0a <sbrk_aligned+0x22>
 8006f18:	1a21      	subs	r1, r4, r0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 ff3a 	bl	8007d94 <_sbrk_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d1f2      	bne.n	8006f0a <sbrk_aligned+0x22>
 8006f24:	e7ef      	b.n	8006f06 <sbrk_aligned+0x1e>
 8006f26:	bf00      	nop
 8006f28:	200005a0 	.word	0x200005a0

08006f2c <_malloc_r>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	1ccd      	adds	r5, r1, #3
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	3508      	adds	r5, #8
 8006f38:	2d0c      	cmp	r5, #12
 8006f3a:	bf38      	it	cc
 8006f3c:	250c      	movcc	r5, #12
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	4606      	mov	r6, r0
 8006f42:	db01      	blt.n	8006f48 <_malloc_r+0x1c>
 8006f44:	42a9      	cmp	r1, r5
 8006f46:	d904      	bls.n	8006f52 <_malloc_r+0x26>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007028 <_malloc_r+0xfc>
 8006f56:	f000 f869 	bl	800702c <__malloc_lock>
 8006f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5e:	461c      	mov	r4, r3
 8006f60:	bb44      	cbnz	r4, 8006fb4 <_malloc_r+0x88>
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ffbf 	bl	8006ee8 <sbrk_aligned>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d158      	bne.n	8007022 <_malloc_r+0xf6>
 8006f70:	f8d8 4000 	ldr.w	r4, [r8]
 8006f74:	4627      	mov	r7, r4
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d143      	bne.n	8007002 <_malloc_r+0xd6>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d04b      	beq.n	8007016 <_malloc_r+0xea>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	4639      	mov	r1, r7
 8006f82:	4630      	mov	r0, r6
 8006f84:	eb04 0903 	add.w	r9, r4, r3
 8006f88:	f000 ff04 	bl	8007d94 <_sbrk_r>
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	d142      	bne.n	8007016 <_malloc_r+0xea>
 8006f90:	6821      	ldr	r1, [r4, #0]
 8006f92:	1a6d      	subs	r5, r5, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ffa6 	bl	8006ee8 <sbrk_aligned>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d03a      	beq.n	8007016 <_malloc_r+0xea>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	442b      	add	r3, r5
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	bb62      	cbnz	r2, 8007008 <_malloc_r+0xdc>
 8006fae:	f8c8 7000 	str.w	r7, [r8]
 8006fb2:	e00f      	b.n	8006fd4 <_malloc_r+0xa8>
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	1b52      	subs	r2, r2, r5
 8006fb8:	d420      	bmi.n	8006ffc <_malloc_r+0xd0>
 8006fba:	2a0b      	cmp	r2, #11
 8006fbc:	d917      	bls.n	8006fee <_malloc_r+0xc2>
 8006fbe:	1961      	adds	r1, r4, r5
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	6025      	str	r5, [r4, #0]
 8006fc4:	bf18      	it	ne
 8006fc6:	6059      	strne	r1, [r3, #4]
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	bf08      	it	eq
 8006fcc:	f8c8 1000 	streq.w	r1, [r8]
 8006fd0:	5162      	str	r2, [r4, r5]
 8006fd2:	604b      	str	r3, [r1, #4]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f82f 	bl	8007038 <__malloc_unlock>
 8006fda:	f104 000b 	add.w	r0, r4, #11
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	f020 0007 	bic.w	r0, r0, #7
 8006fe4:	1ac2      	subs	r2, r0, r3
 8006fe6:	bf1c      	itt	ne
 8006fe8:	1a1b      	subne	r3, r3, r0
 8006fea:	50a3      	strne	r3, [r4, r2]
 8006fec:	e7af      	b.n	8006f4e <_malloc_r+0x22>
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	bf0c      	ite	eq
 8006ff4:	f8c8 2000 	streq.w	r2, [r8]
 8006ff8:	605a      	strne	r2, [r3, #4]
 8006ffa:	e7eb      	b.n	8006fd4 <_malloc_r+0xa8>
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	6864      	ldr	r4, [r4, #4]
 8007000:	e7ae      	b.n	8006f60 <_malloc_r+0x34>
 8007002:	463c      	mov	r4, r7
 8007004:	687f      	ldr	r7, [r7, #4]
 8007006:	e7b6      	b.n	8006f76 <_malloc_r+0x4a>
 8007008:	461a      	mov	r2, r3
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	42a3      	cmp	r3, r4
 800700e:	d1fb      	bne.n	8007008 <_malloc_r+0xdc>
 8007010:	2300      	movs	r3, #0
 8007012:	6053      	str	r3, [r2, #4]
 8007014:	e7de      	b.n	8006fd4 <_malloc_r+0xa8>
 8007016:	230c      	movs	r3, #12
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 f80c 	bl	8007038 <__malloc_unlock>
 8007020:	e794      	b.n	8006f4c <_malloc_r+0x20>
 8007022:	6005      	str	r5, [r0, #0]
 8007024:	e7d6      	b.n	8006fd4 <_malloc_r+0xa8>
 8007026:	bf00      	nop
 8007028:	200005a4 	.word	0x200005a4

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	@ (8007034 <__malloc_lock+0x8>)
 800702e:	f000 befe 	b.w	8007e2e <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	200006e8 	.word	0x200006e8

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	@ (8007040 <__malloc_unlock+0x8>)
 800703a:	f000 bef9 	b.w	8007e30 <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	200006e8 	.word	0x200006e8

08007044 <__cvt>:
 8007044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	ec57 6b10 	vmov	r6, r7, d0
 800704c:	2f00      	cmp	r7, #0
 800704e:	460c      	mov	r4, r1
 8007050:	4619      	mov	r1, r3
 8007052:	463b      	mov	r3, r7
 8007054:	bfbb      	ittet	lt
 8007056:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800705a:	461f      	movlt	r7, r3
 800705c:	2300      	movge	r3, #0
 800705e:	232d      	movlt	r3, #45	@ 0x2d
 8007060:	700b      	strb	r3, [r1, #0]
 8007062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007064:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007068:	4691      	mov	r9, r2
 800706a:	f023 0820 	bic.w	r8, r3, #32
 800706e:	bfbc      	itt	lt
 8007070:	4632      	movlt	r2, r6
 8007072:	4616      	movlt	r6, r2
 8007074:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007078:	d005      	beq.n	8007086 <__cvt+0x42>
 800707a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800707e:	d100      	bne.n	8007082 <__cvt+0x3e>
 8007080:	3401      	adds	r4, #1
 8007082:	2102      	movs	r1, #2
 8007084:	e000      	b.n	8007088 <__cvt+0x44>
 8007086:	2103      	movs	r1, #3
 8007088:	ab03      	add	r3, sp, #12
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	ab02      	add	r3, sp, #8
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	ec47 6b10 	vmov	d0, r6, r7
 8007094:	4653      	mov	r3, sl
 8007096:	4622      	mov	r2, r4
 8007098:	f000 ff82 	bl	8007fa0 <_dtoa_r>
 800709c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070a0:	4605      	mov	r5, r0
 80070a2:	d119      	bne.n	80070d8 <__cvt+0x94>
 80070a4:	f019 0f01 	tst.w	r9, #1
 80070a8:	d00e      	beq.n	80070c8 <__cvt+0x84>
 80070aa:	eb00 0904 	add.w	r9, r0, r4
 80070ae:	2200      	movs	r2, #0
 80070b0:	2300      	movs	r3, #0
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	f7f9 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ba:	b108      	cbz	r0, 80070c0 <__cvt+0x7c>
 80070bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80070c0:	2230      	movs	r2, #48	@ 0x30
 80070c2:	9b03      	ldr	r3, [sp, #12]
 80070c4:	454b      	cmp	r3, r9
 80070c6:	d31e      	bcc.n	8007106 <__cvt+0xc2>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070cc:	1b5b      	subs	r3, r3, r5
 80070ce:	4628      	mov	r0, r5
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	b004      	add	sp, #16
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070dc:	eb00 0904 	add.w	r9, r0, r4
 80070e0:	d1e5      	bne.n	80070ae <__cvt+0x6a>
 80070e2:	7803      	ldrb	r3, [r0, #0]
 80070e4:	2b30      	cmp	r3, #48	@ 0x30
 80070e6:	d10a      	bne.n	80070fe <__cvt+0xba>
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f4:	b918      	cbnz	r0, 80070fe <__cvt+0xba>
 80070f6:	f1c4 0401 	rsb	r4, r4, #1
 80070fa:	f8ca 4000 	str.w	r4, [sl]
 80070fe:	f8da 3000 	ldr.w	r3, [sl]
 8007102:	4499      	add	r9, r3
 8007104:	e7d3      	b.n	80070ae <__cvt+0x6a>
 8007106:	1c59      	adds	r1, r3, #1
 8007108:	9103      	str	r1, [sp, #12]
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e7d9      	b.n	80070c2 <__cvt+0x7e>

0800710e <__exponent>:
 800710e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007110:	2900      	cmp	r1, #0
 8007112:	bfba      	itte	lt
 8007114:	4249      	neglt	r1, r1
 8007116:	232d      	movlt	r3, #45	@ 0x2d
 8007118:	232b      	movge	r3, #43	@ 0x2b
 800711a:	2909      	cmp	r1, #9
 800711c:	7002      	strb	r2, [r0, #0]
 800711e:	7043      	strb	r3, [r0, #1]
 8007120:	dd29      	ble.n	8007176 <__exponent+0x68>
 8007122:	f10d 0307 	add.w	r3, sp, #7
 8007126:	461d      	mov	r5, r3
 8007128:	270a      	movs	r7, #10
 800712a:	461a      	mov	r2, r3
 800712c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007130:	fb07 1416 	mls	r4, r7, r6, r1
 8007134:	3430      	adds	r4, #48	@ 0x30
 8007136:	f802 4c01 	strb.w	r4, [r2, #-1]
 800713a:	460c      	mov	r4, r1
 800713c:	2c63      	cmp	r4, #99	@ 0x63
 800713e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007142:	4631      	mov	r1, r6
 8007144:	dcf1      	bgt.n	800712a <__exponent+0x1c>
 8007146:	3130      	adds	r1, #48	@ 0x30
 8007148:	1e94      	subs	r4, r2, #2
 800714a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800714e:	1c41      	adds	r1, r0, #1
 8007150:	4623      	mov	r3, r4
 8007152:	42ab      	cmp	r3, r5
 8007154:	d30a      	bcc.n	800716c <__exponent+0x5e>
 8007156:	f10d 0309 	add.w	r3, sp, #9
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	42ac      	cmp	r4, r5
 800715e:	bf88      	it	hi
 8007160:	2300      	movhi	r3, #0
 8007162:	3302      	adds	r3, #2
 8007164:	4403      	add	r3, r0
 8007166:	1a18      	subs	r0, r3, r0
 8007168:	b003      	add	sp, #12
 800716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007170:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007174:	e7ed      	b.n	8007152 <__exponent+0x44>
 8007176:	2330      	movs	r3, #48	@ 0x30
 8007178:	3130      	adds	r1, #48	@ 0x30
 800717a:	7083      	strb	r3, [r0, #2]
 800717c:	70c1      	strb	r1, [r0, #3]
 800717e:	1d03      	adds	r3, r0, #4
 8007180:	e7f1      	b.n	8007166 <__exponent+0x58>
	...

08007184 <_printf_float>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	b08d      	sub	sp, #52	@ 0x34
 800718a:	460c      	mov	r4, r1
 800718c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007190:	4616      	mov	r6, r2
 8007192:	461f      	mov	r7, r3
 8007194:	4605      	mov	r5, r0
 8007196:	f000 fdc5 	bl	8007d24 <_localeconv_r>
 800719a:	6803      	ldr	r3, [r0, #0]
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7f9 f866 	bl	8000270 <strlen>
 80071a4:	2300      	movs	r3, #0
 80071a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071a8:	f8d8 3000 	ldr.w	r3, [r8]
 80071ac:	9005      	str	r0, [sp, #20]
 80071ae:	3307      	adds	r3, #7
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	f103 0208 	add.w	r2, r3, #8
 80071b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071bc:	f8d4 b000 	ldr.w	fp, [r4]
 80071c0:	f8c8 2000 	str.w	r2, [r8]
 80071c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80071d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071da:	4b9c      	ldr	r3, [pc, #624]	@ (800744c <_printf_float+0x2c8>)
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	f7f9 fca4 	bl	8000b2c <__aeabi_dcmpun>
 80071e4:	bb70      	cbnz	r0, 8007244 <_printf_float+0xc0>
 80071e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ea:	4b98      	ldr	r3, [pc, #608]	@ (800744c <_printf_float+0x2c8>)
 80071ec:	f04f 32ff 	mov.w	r2, #4294967295
 80071f0:	f7f9 fc7e 	bl	8000af0 <__aeabi_dcmple>
 80071f4:	bb30      	cbnz	r0, 8007244 <_printf_float+0xc0>
 80071f6:	2200      	movs	r2, #0
 80071f8:	2300      	movs	r3, #0
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fc6d 	bl	8000adc <__aeabi_dcmplt>
 8007202:	b110      	cbz	r0, 800720a <_printf_float+0x86>
 8007204:	232d      	movs	r3, #45	@ 0x2d
 8007206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800720a:	4a91      	ldr	r2, [pc, #580]	@ (8007450 <_printf_float+0x2cc>)
 800720c:	4b91      	ldr	r3, [pc, #580]	@ (8007454 <_printf_float+0x2d0>)
 800720e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007212:	bf8c      	ite	hi
 8007214:	4690      	movhi	r8, r2
 8007216:	4698      	movls	r8, r3
 8007218:	2303      	movs	r3, #3
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	f02b 0304 	bic.w	r3, fp, #4
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	9700      	str	r7, [sp, #0]
 8007228:	4633      	mov	r3, r6
 800722a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 f9d2 	bl	80075d8 <_printf_common>
 8007234:	3001      	adds	r0, #1
 8007236:	f040 808d 	bne.w	8007354 <_printf_float+0x1d0>
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	b00d      	add	sp, #52	@ 0x34
 8007240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	4640      	mov	r0, r8
 800724a:	4649      	mov	r1, r9
 800724c:	f7f9 fc6e 	bl	8000b2c <__aeabi_dcmpun>
 8007250:	b140      	cbz	r0, 8007264 <_printf_float+0xe0>
 8007252:	464b      	mov	r3, r9
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfbc      	itt	lt
 8007258:	232d      	movlt	r3, #45	@ 0x2d
 800725a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800725e:	4a7e      	ldr	r2, [pc, #504]	@ (8007458 <_printf_float+0x2d4>)
 8007260:	4b7e      	ldr	r3, [pc, #504]	@ (800745c <_printf_float+0x2d8>)
 8007262:	e7d4      	b.n	800720e <_printf_float+0x8a>
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800726a:	9206      	str	r2, [sp, #24]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	d13b      	bne.n	80072e8 <_printf_float+0x164>
 8007270:	2306      	movs	r3, #6
 8007272:	6063      	str	r3, [r4, #4]
 8007274:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007278:	2300      	movs	r3, #0
 800727a:	6022      	str	r2, [r4, #0]
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007280:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007284:	ab09      	add	r3, sp, #36	@ 0x24
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	6861      	ldr	r1, [r4, #4]
 800728a:	ec49 8b10 	vmov	d0, r8, r9
 800728e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007292:	4628      	mov	r0, r5
 8007294:	f7ff fed6 	bl	8007044 <__cvt>
 8007298:	9b06      	ldr	r3, [sp, #24]
 800729a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800729c:	2b47      	cmp	r3, #71	@ 0x47
 800729e:	4680      	mov	r8, r0
 80072a0:	d129      	bne.n	80072f6 <_printf_float+0x172>
 80072a2:	1cc8      	adds	r0, r1, #3
 80072a4:	db02      	blt.n	80072ac <_printf_float+0x128>
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	4299      	cmp	r1, r3
 80072aa:	dd41      	ble.n	8007330 <_printf_float+0x1ac>
 80072ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80072b0:	fa5f fa8a 	uxtb.w	sl, sl
 80072b4:	3901      	subs	r1, #1
 80072b6:	4652      	mov	r2, sl
 80072b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80072be:	f7ff ff26 	bl	800710e <__exponent>
 80072c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c4:	1813      	adds	r3, r2, r0
 80072c6:	2a01      	cmp	r2, #1
 80072c8:	4681      	mov	r9, r0
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	dc02      	bgt.n	80072d4 <_printf_float+0x150>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	07d2      	lsls	r2, r2, #31
 80072d2:	d501      	bpl.n	80072d8 <_printf_float+0x154>
 80072d4:	3301      	adds	r3, #1
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0a2      	beq.n	8007226 <_printf_float+0xa2>
 80072e0:	232d      	movs	r3, #45	@ 0x2d
 80072e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072e6:	e79e      	b.n	8007226 <_printf_float+0xa2>
 80072e8:	9a06      	ldr	r2, [sp, #24]
 80072ea:	2a47      	cmp	r2, #71	@ 0x47
 80072ec:	d1c2      	bne.n	8007274 <_printf_float+0xf0>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1c0      	bne.n	8007274 <_printf_float+0xf0>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7bd      	b.n	8007272 <_printf_float+0xee>
 80072f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072fa:	d9db      	bls.n	80072b4 <_printf_float+0x130>
 80072fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007300:	d118      	bne.n	8007334 <_printf_float+0x1b0>
 8007302:	2900      	cmp	r1, #0
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	dd0b      	ble.n	8007320 <_printf_float+0x19c>
 8007308:	6121      	str	r1, [r4, #16]
 800730a:	b913      	cbnz	r3, 8007312 <_printf_float+0x18e>
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	07d0      	lsls	r0, r2, #31
 8007310:	d502      	bpl.n	8007318 <_printf_float+0x194>
 8007312:	3301      	adds	r3, #1
 8007314:	440b      	add	r3, r1
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	65a1      	str	r1, [r4, #88]	@ 0x58
 800731a:	f04f 0900 	mov.w	r9, #0
 800731e:	e7db      	b.n	80072d8 <_printf_float+0x154>
 8007320:	b913      	cbnz	r3, 8007328 <_printf_float+0x1a4>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	07d2      	lsls	r2, r2, #31
 8007326:	d501      	bpl.n	800732c <_printf_float+0x1a8>
 8007328:	3302      	adds	r3, #2
 800732a:	e7f4      	b.n	8007316 <_printf_float+0x192>
 800732c:	2301      	movs	r3, #1
 800732e:	e7f2      	b.n	8007316 <_printf_float+0x192>
 8007330:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007336:	4299      	cmp	r1, r3
 8007338:	db05      	blt.n	8007346 <_printf_float+0x1c2>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	6121      	str	r1, [r4, #16]
 800733e:	07d8      	lsls	r0, r3, #31
 8007340:	d5ea      	bpl.n	8007318 <_printf_float+0x194>
 8007342:	1c4b      	adds	r3, r1, #1
 8007344:	e7e7      	b.n	8007316 <_printf_float+0x192>
 8007346:	2900      	cmp	r1, #0
 8007348:	bfd4      	ite	le
 800734a:	f1c1 0202 	rsble	r2, r1, #2
 800734e:	2201      	movgt	r2, #1
 8007350:	4413      	add	r3, r2
 8007352:	e7e0      	b.n	8007316 <_printf_float+0x192>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	055a      	lsls	r2, r3, #21
 8007358:	d407      	bmi.n	800736a <_printf_float+0x1e6>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	4642      	mov	r2, r8
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	d12b      	bne.n	80073c0 <_printf_float+0x23c>
 8007368:	e767      	b.n	800723a <_printf_float+0xb6>
 800736a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800736e:	f240 80dd 	bls.w	800752c <_printf_float+0x3a8>
 8007372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007376:	2200      	movs	r2, #0
 8007378:	2300      	movs	r3, #0
 800737a:	f7f9 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800737e:	2800      	cmp	r0, #0
 8007380:	d033      	beq.n	80073ea <_printf_float+0x266>
 8007382:	4a37      	ldr	r2, [pc, #220]	@ (8007460 <_printf_float+0x2dc>)
 8007384:	2301      	movs	r3, #1
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f af54 	beq.w	800723a <_printf_float+0xb6>
 8007392:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007396:	4543      	cmp	r3, r8
 8007398:	db02      	blt.n	80073a0 <_printf_float+0x21c>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	07d8      	lsls	r0, r3, #31
 800739e:	d50f      	bpl.n	80073c0 <_printf_float+0x23c>
 80073a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f af45 	beq.w	800723a <_printf_float+0xb6>
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80073b8:	f104 0a1a 	add.w	sl, r4, #26
 80073bc:	45c8      	cmp	r8, r9
 80073be:	dc09      	bgt.n	80073d4 <_printf_float+0x250>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	079b      	lsls	r3, r3, #30
 80073c4:	f100 8103 	bmi.w	80075ce <_printf_float+0x44a>
 80073c8:	68e0      	ldr	r0, [r4, #12]
 80073ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073cc:	4298      	cmp	r0, r3
 80073ce:	bfb8      	it	lt
 80073d0:	4618      	movlt	r0, r3
 80073d2:	e734      	b.n	800723e <_printf_float+0xba>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4652      	mov	r2, sl
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f af2b 	beq.w	800723a <_printf_float+0xb6>
 80073e4:	f109 0901 	add.w	r9, r9, #1
 80073e8:	e7e8      	b.n	80073bc <_printf_float+0x238>
 80073ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dc39      	bgt.n	8007464 <_printf_float+0x2e0>
 80073f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007460 <_printf_float+0x2dc>)
 80073f2:	2301      	movs	r3, #1
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	f43f af1d 	beq.w	800723a <_printf_float+0xb6>
 8007400:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007404:	ea59 0303 	orrs.w	r3, r9, r3
 8007408:	d102      	bne.n	8007410 <_printf_float+0x28c>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	07d9      	lsls	r1, r3, #31
 800740e:	d5d7      	bpl.n	80073c0 <_printf_float+0x23c>
 8007410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f af0d 	beq.w	800723a <_printf_float+0xb6>
 8007420:	f04f 0a00 	mov.w	sl, #0
 8007424:	f104 0b1a 	add.w	fp, r4, #26
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	425b      	negs	r3, r3
 800742c:	4553      	cmp	r3, sl
 800742e:	dc01      	bgt.n	8007434 <_printf_float+0x2b0>
 8007430:	464b      	mov	r3, r9
 8007432:	e793      	b.n	800735c <_printf_float+0x1d8>
 8007434:	2301      	movs	r3, #1
 8007436:	465a      	mov	r2, fp
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f aefb 	beq.w	800723a <_printf_float+0xb6>
 8007444:	f10a 0a01 	add.w	sl, sl, #1
 8007448:	e7ee      	b.n	8007428 <_printf_float+0x2a4>
 800744a:	bf00      	nop
 800744c:	7fefffff 	.word	0x7fefffff
 8007450:	08009d59 	.word	0x08009d59
 8007454:	08009d55 	.word	0x08009d55
 8007458:	08009d61 	.word	0x08009d61
 800745c:	08009d5d 	.word	0x08009d5d
 8007460:	08009d65 	.word	0x08009d65
 8007464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007466:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800746a:	4553      	cmp	r3, sl
 800746c:	bfa8      	it	ge
 800746e:	4653      	movge	r3, sl
 8007470:	2b00      	cmp	r3, #0
 8007472:	4699      	mov	r9, r3
 8007474:	dc36      	bgt.n	80074e4 <_printf_float+0x360>
 8007476:	f04f 0b00 	mov.w	fp, #0
 800747a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747e:	f104 021a 	add.w	r2, r4, #26
 8007482:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007484:	9306      	str	r3, [sp, #24]
 8007486:	eba3 0309 	sub.w	r3, r3, r9
 800748a:	455b      	cmp	r3, fp
 800748c:	dc31      	bgt.n	80074f2 <_printf_float+0x36e>
 800748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007490:	459a      	cmp	sl, r3
 8007492:	dc3a      	bgt.n	800750a <_printf_float+0x386>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	07da      	lsls	r2, r3, #31
 8007498:	d437      	bmi.n	800750a <_printf_float+0x386>
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	ebaa 0903 	sub.w	r9, sl, r3
 80074a0:	9b06      	ldr	r3, [sp, #24]
 80074a2:	ebaa 0303 	sub.w	r3, sl, r3
 80074a6:	4599      	cmp	r9, r3
 80074a8:	bfa8      	it	ge
 80074aa:	4699      	movge	r9, r3
 80074ac:	f1b9 0f00 	cmp.w	r9, #0
 80074b0:	dc33      	bgt.n	800751a <_printf_float+0x396>
 80074b2:	f04f 0800 	mov.w	r8, #0
 80074b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ba:	f104 0b1a 	add.w	fp, r4, #26
 80074be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c0:	ebaa 0303 	sub.w	r3, sl, r3
 80074c4:	eba3 0309 	sub.w	r3, r3, r9
 80074c8:	4543      	cmp	r3, r8
 80074ca:	f77f af79 	ble.w	80073c0 <_printf_float+0x23c>
 80074ce:	2301      	movs	r3, #1
 80074d0:	465a      	mov	r2, fp
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f aeae 	beq.w	800723a <_printf_float+0xb6>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	e7ec      	b.n	80074be <_printf_float+0x33a>
 80074e4:	4642      	mov	r2, r8
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	d1c2      	bne.n	8007476 <_printf_float+0x2f2>
 80074f0:	e6a3      	b.n	800723a <_printf_float+0xb6>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	9206      	str	r2, [sp, #24]
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae9c 	beq.w	800723a <_printf_float+0xb6>
 8007502:	9a06      	ldr	r2, [sp, #24]
 8007504:	f10b 0b01 	add.w	fp, fp, #1
 8007508:	e7bb      	b.n	8007482 <_printf_float+0x2fe>
 800750a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	d1c0      	bne.n	800749a <_printf_float+0x316>
 8007518:	e68f      	b.n	800723a <_printf_float+0xb6>
 800751a:	9a06      	ldr	r2, [sp, #24]
 800751c:	464b      	mov	r3, r9
 800751e:	4442      	add	r2, r8
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	d1c3      	bne.n	80074b2 <_printf_float+0x32e>
 800752a:	e686      	b.n	800723a <_printf_float+0xb6>
 800752c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007530:	f1ba 0f01 	cmp.w	sl, #1
 8007534:	dc01      	bgt.n	800753a <_printf_float+0x3b6>
 8007536:	07db      	lsls	r3, r3, #31
 8007538:	d536      	bpl.n	80075a8 <_printf_float+0x424>
 800753a:	2301      	movs	r3, #1
 800753c:	4642      	mov	r2, r8
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	47b8      	blx	r7
 8007544:	3001      	adds	r0, #1
 8007546:	f43f ae78 	beq.w	800723a <_printf_float+0xb6>
 800754a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	f43f ae70 	beq.w	800723a <_printf_float+0xb6>
 800755a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007566:	f7f9 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800756a:	b9c0      	cbnz	r0, 800759e <_printf_float+0x41a>
 800756c:	4653      	mov	r3, sl
 800756e:	f108 0201 	add.w	r2, r8, #1
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	d10c      	bne.n	8007596 <_printf_float+0x412>
 800757c:	e65d      	b.n	800723a <_printf_float+0xb6>
 800757e:	2301      	movs	r3, #1
 8007580:	465a      	mov	r2, fp
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f ae56 	beq.w	800723a <_printf_float+0xb6>
 800758e:	f108 0801 	add.w	r8, r8, #1
 8007592:	45d0      	cmp	r8, sl
 8007594:	dbf3      	blt.n	800757e <_printf_float+0x3fa>
 8007596:	464b      	mov	r3, r9
 8007598:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800759c:	e6df      	b.n	800735e <_printf_float+0x1da>
 800759e:	f04f 0800 	mov.w	r8, #0
 80075a2:	f104 0b1a 	add.w	fp, r4, #26
 80075a6:	e7f4      	b.n	8007592 <_printf_float+0x40e>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4642      	mov	r2, r8
 80075ac:	e7e1      	b.n	8007572 <_printf_float+0x3ee>
 80075ae:	2301      	movs	r3, #1
 80075b0:	464a      	mov	r2, r9
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f ae3e 	beq.w	800723a <_printf_float+0xb6>
 80075be:	f108 0801 	add.w	r8, r8, #1
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075c6:	1a5b      	subs	r3, r3, r1
 80075c8:	4543      	cmp	r3, r8
 80075ca:	dcf0      	bgt.n	80075ae <_printf_float+0x42a>
 80075cc:	e6fc      	b.n	80073c8 <_printf_float+0x244>
 80075ce:	f04f 0800 	mov.w	r8, #0
 80075d2:	f104 0919 	add.w	r9, r4, #25
 80075d6:	e7f4      	b.n	80075c2 <_printf_float+0x43e>

080075d8 <_printf_common>:
 80075d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	4616      	mov	r6, r2
 80075de:	4698      	mov	r8, r3
 80075e0:	688a      	ldr	r2, [r1, #8]
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	bfb8      	it	lt
 80075ec:	4613      	movlt	r3, r2
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075f4:	4607      	mov	r7, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	b10a      	cbz	r2, 80075fe <_printf_common+0x26>
 80075fa:	3301      	adds	r3, #1
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	0699      	lsls	r1, r3, #26
 8007602:	bf42      	ittt	mi
 8007604:	6833      	ldrmi	r3, [r6, #0]
 8007606:	3302      	addmi	r3, #2
 8007608:	6033      	strmi	r3, [r6, #0]
 800760a:	6825      	ldr	r5, [r4, #0]
 800760c:	f015 0506 	ands.w	r5, r5, #6
 8007610:	d106      	bne.n	8007620 <_printf_common+0x48>
 8007612:	f104 0a19 	add.w	sl, r4, #25
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	6832      	ldr	r2, [r6, #0]
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	42ab      	cmp	r3, r5
 800761e:	dc26      	bgt.n	800766e <_printf_common+0x96>
 8007620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007624:	6822      	ldr	r2, [r4, #0]
 8007626:	3b00      	subs	r3, #0
 8007628:	bf18      	it	ne
 800762a:	2301      	movne	r3, #1
 800762c:	0692      	lsls	r2, r2, #26
 800762e:	d42b      	bmi.n	8007688 <_printf_common+0xb0>
 8007630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007634:	4641      	mov	r1, r8
 8007636:	4638      	mov	r0, r7
 8007638:	47c8      	blx	r9
 800763a:	3001      	adds	r0, #1
 800763c:	d01e      	beq.n	800767c <_printf_common+0xa4>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	6922      	ldr	r2, [r4, #16]
 8007642:	f003 0306 	and.w	r3, r3, #6
 8007646:	2b04      	cmp	r3, #4
 8007648:	bf02      	ittt	eq
 800764a:	68e5      	ldreq	r5, [r4, #12]
 800764c:	6833      	ldreq	r3, [r6, #0]
 800764e:	1aed      	subeq	r5, r5, r3
 8007650:	68a3      	ldr	r3, [r4, #8]
 8007652:	bf0c      	ite	eq
 8007654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007658:	2500      	movne	r5, #0
 800765a:	4293      	cmp	r3, r2
 800765c:	bfc4      	itt	gt
 800765e:	1a9b      	subgt	r3, r3, r2
 8007660:	18ed      	addgt	r5, r5, r3
 8007662:	2600      	movs	r6, #0
 8007664:	341a      	adds	r4, #26
 8007666:	42b5      	cmp	r5, r6
 8007668:	d11a      	bne.n	80076a0 <_printf_common+0xc8>
 800766a:	2000      	movs	r0, #0
 800766c:	e008      	b.n	8007680 <_printf_common+0xa8>
 800766e:	2301      	movs	r3, #1
 8007670:	4652      	mov	r2, sl
 8007672:	4641      	mov	r1, r8
 8007674:	4638      	mov	r0, r7
 8007676:	47c8      	blx	r9
 8007678:	3001      	adds	r0, #1
 800767a:	d103      	bne.n	8007684 <_printf_common+0xac>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	3501      	adds	r5, #1
 8007686:	e7c6      	b.n	8007616 <_printf_common+0x3e>
 8007688:	18e1      	adds	r1, r4, r3
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	2030      	movs	r0, #48	@ 0x30
 800768e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007692:	4422      	add	r2, r4
 8007694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800769c:	3302      	adds	r3, #2
 800769e:	e7c7      	b.n	8007630 <_printf_common+0x58>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4622      	mov	r2, r4
 80076a4:	4641      	mov	r1, r8
 80076a6:	4638      	mov	r0, r7
 80076a8:	47c8      	blx	r9
 80076aa:	3001      	adds	r0, #1
 80076ac:	d0e6      	beq.n	800767c <_printf_common+0xa4>
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7d9      	b.n	8007666 <_printf_common+0x8e>
	...

080076b4 <_printf_i>:
 80076b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	7e0f      	ldrb	r7, [r1, #24]
 80076ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076bc:	2f78      	cmp	r7, #120	@ 0x78
 80076be:	4691      	mov	r9, r2
 80076c0:	4680      	mov	r8, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	469a      	mov	sl, r3
 80076c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ca:	d807      	bhi.n	80076dc <_printf_i+0x28>
 80076cc:	2f62      	cmp	r7, #98	@ 0x62
 80076ce:	d80a      	bhi.n	80076e6 <_printf_i+0x32>
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	f000 80d1 	beq.w	8007878 <_printf_i+0x1c4>
 80076d6:	2f58      	cmp	r7, #88	@ 0x58
 80076d8:	f000 80b8 	beq.w	800784c <_printf_i+0x198>
 80076dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076e4:	e03a      	b.n	800775c <_printf_i+0xa8>
 80076e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ea:	2b15      	cmp	r3, #21
 80076ec:	d8f6      	bhi.n	80076dc <_printf_i+0x28>
 80076ee:	a101      	add	r1, pc, #4	@ (adr r1, 80076f4 <_printf_i+0x40>)
 80076f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076f4:	0800774d 	.word	0x0800774d
 80076f8:	08007761 	.word	0x08007761
 80076fc:	080076dd 	.word	0x080076dd
 8007700:	080076dd 	.word	0x080076dd
 8007704:	080076dd 	.word	0x080076dd
 8007708:	080076dd 	.word	0x080076dd
 800770c:	08007761 	.word	0x08007761
 8007710:	080076dd 	.word	0x080076dd
 8007714:	080076dd 	.word	0x080076dd
 8007718:	080076dd 	.word	0x080076dd
 800771c:	080076dd 	.word	0x080076dd
 8007720:	0800785f 	.word	0x0800785f
 8007724:	0800778b 	.word	0x0800778b
 8007728:	08007819 	.word	0x08007819
 800772c:	080076dd 	.word	0x080076dd
 8007730:	080076dd 	.word	0x080076dd
 8007734:	08007881 	.word	0x08007881
 8007738:	080076dd 	.word	0x080076dd
 800773c:	0800778b 	.word	0x0800778b
 8007740:	080076dd 	.word	0x080076dd
 8007744:	080076dd 	.word	0x080076dd
 8007748:	08007821 	.word	0x08007821
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6032      	str	r2, [r6, #0]
 8007754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800775c:	2301      	movs	r3, #1
 800775e:	e09c      	b.n	800789a <_printf_i+0x1e6>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	1d19      	adds	r1, r3, #4
 8007766:	6031      	str	r1, [r6, #0]
 8007768:	0606      	lsls	r6, r0, #24
 800776a:	d501      	bpl.n	8007770 <_printf_i+0xbc>
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	e003      	b.n	8007778 <_printf_i+0xc4>
 8007770:	0645      	lsls	r5, r0, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0xb8>
 8007774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007778:	2d00      	cmp	r5, #0
 800777a:	da03      	bge.n	8007784 <_printf_i+0xd0>
 800777c:	232d      	movs	r3, #45	@ 0x2d
 800777e:	426d      	negs	r5, r5
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007784:	4858      	ldr	r0, [pc, #352]	@ (80078e8 <_printf_i+0x234>)
 8007786:	230a      	movs	r3, #10
 8007788:	e011      	b.n	80077ae <_printf_i+0xfa>
 800778a:	6821      	ldr	r1, [r4, #0]
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	0608      	lsls	r0, r1, #24
 8007790:	f853 5b04 	ldr.w	r5, [r3], #4
 8007794:	d402      	bmi.n	800779c <_printf_i+0xe8>
 8007796:	0649      	lsls	r1, r1, #25
 8007798:	bf48      	it	mi
 800779a:	b2ad      	uxthmi	r5, r5
 800779c:	2f6f      	cmp	r7, #111	@ 0x6f
 800779e:	4852      	ldr	r0, [pc, #328]	@ (80078e8 <_printf_i+0x234>)
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	bf14      	ite	ne
 80077a4:	230a      	movne	r3, #10
 80077a6:	2308      	moveq	r3, #8
 80077a8:	2100      	movs	r1, #0
 80077aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ae:	6866      	ldr	r6, [r4, #4]
 80077b0:	60a6      	str	r6, [r4, #8]
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	db05      	blt.n	80077c2 <_printf_i+0x10e>
 80077b6:	6821      	ldr	r1, [r4, #0]
 80077b8:	432e      	orrs	r6, r5
 80077ba:	f021 0104 	bic.w	r1, r1, #4
 80077be:	6021      	str	r1, [r4, #0]
 80077c0:	d04b      	beq.n	800785a <_printf_i+0x1a6>
 80077c2:	4616      	mov	r6, r2
 80077c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c8:	fb03 5711 	mls	r7, r3, r1, r5
 80077cc:	5dc7      	ldrb	r7, [r0, r7]
 80077ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077d2:	462f      	mov	r7, r5
 80077d4:	42bb      	cmp	r3, r7
 80077d6:	460d      	mov	r5, r1
 80077d8:	d9f4      	bls.n	80077c4 <_printf_i+0x110>
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d10b      	bne.n	80077f6 <_printf_i+0x142>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	07df      	lsls	r7, r3, #31
 80077e2:	d508      	bpl.n	80077f6 <_printf_i+0x142>
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	6861      	ldr	r1, [r4, #4]
 80077e8:	4299      	cmp	r1, r3
 80077ea:	bfde      	ittt	le
 80077ec:	2330      	movle	r3, #48	@ 0x30
 80077ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077f6:	1b92      	subs	r2, r2, r6
 80077f8:	6122      	str	r2, [r4, #16]
 80077fa:	f8cd a000 	str.w	sl, [sp]
 80077fe:	464b      	mov	r3, r9
 8007800:	aa03      	add	r2, sp, #12
 8007802:	4621      	mov	r1, r4
 8007804:	4640      	mov	r0, r8
 8007806:	f7ff fee7 	bl	80075d8 <_printf_common>
 800780a:	3001      	adds	r0, #1
 800780c:	d14a      	bne.n	80078a4 <_printf_i+0x1f0>
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
 8007812:	b004      	add	sp, #16
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	f043 0320 	orr.w	r3, r3, #32
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	4832      	ldr	r0, [pc, #200]	@ (80078ec <_printf_i+0x238>)
 8007822:	2778      	movs	r7, #120	@ 0x78
 8007824:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	6831      	ldr	r1, [r6, #0]
 800782c:	061f      	lsls	r7, r3, #24
 800782e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007832:	d402      	bmi.n	800783a <_printf_i+0x186>
 8007834:	065f      	lsls	r7, r3, #25
 8007836:	bf48      	it	mi
 8007838:	b2ad      	uxthmi	r5, r5
 800783a:	6031      	str	r1, [r6, #0]
 800783c:	07d9      	lsls	r1, r3, #31
 800783e:	bf44      	itt	mi
 8007840:	f043 0320 	orrmi.w	r3, r3, #32
 8007844:	6023      	strmi	r3, [r4, #0]
 8007846:	b11d      	cbz	r5, 8007850 <_printf_i+0x19c>
 8007848:	2310      	movs	r3, #16
 800784a:	e7ad      	b.n	80077a8 <_printf_i+0xf4>
 800784c:	4826      	ldr	r0, [pc, #152]	@ (80078e8 <_printf_i+0x234>)
 800784e:	e7e9      	b.n	8007824 <_printf_i+0x170>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	f023 0320 	bic.w	r3, r3, #32
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e7f6      	b.n	8007848 <_printf_i+0x194>
 800785a:	4616      	mov	r6, r2
 800785c:	e7bd      	b.n	80077da <_printf_i+0x126>
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	6825      	ldr	r5, [r4, #0]
 8007862:	6961      	ldr	r1, [r4, #20]
 8007864:	1d18      	adds	r0, r3, #4
 8007866:	6030      	str	r0, [r6, #0]
 8007868:	062e      	lsls	r6, r5, #24
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	d501      	bpl.n	8007872 <_printf_i+0x1be>
 800786e:	6019      	str	r1, [r3, #0]
 8007870:	e002      	b.n	8007878 <_printf_i+0x1c4>
 8007872:	0668      	lsls	r0, r5, #25
 8007874:	d5fb      	bpl.n	800786e <_printf_i+0x1ba>
 8007876:	8019      	strh	r1, [r3, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	4616      	mov	r6, r2
 800787e:	e7bc      	b.n	80077fa <_printf_i+0x146>
 8007880:	6833      	ldr	r3, [r6, #0]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	6032      	str	r2, [r6, #0]
 8007886:	681e      	ldr	r6, [r3, #0]
 8007888:	6862      	ldr	r2, [r4, #4]
 800788a:	2100      	movs	r1, #0
 800788c:	4630      	mov	r0, r6
 800788e:	f7f8 fc9f 	bl	80001d0 <memchr>
 8007892:	b108      	cbz	r0, 8007898 <_printf_i+0x1e4>
 8007894:	1b80      	subs	r0, r0, r6
 8007896:	6060      	str	r0, [r4, #4]
 8007898:	6863      	ldr	r3, [r4, #4]
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	2300      	movs	r3, #0
 800789e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a2:	e7aa      	b.n	80077fa <_printf_i+0x146>
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	4632      	mov	r2, r6
 80078a8:	4649      	mov	r1, r9
 80078aa:	4640      	mov	r0, r8
 80078ac:	47d0      	blx	sl
 80078ae:	3001      	adds	r0, #1
 80078b0:	d0ad      	beq.n	800780e <_printf_i+0x15a>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	079b      	lsls	r3, r3, #30
 80078b6:	d413      	bmi.n	80078e0 <_printf_i+0x22c>
 80078b8:	68e0      	ldr	r0, [r4, #12]
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	4298      	cmp	r0, r3
 80078be:	bfb8      	it	lt
 80078c0:	4618      	movlt	r0, r3
 80078c2:	e7a6      	b.n	8007812 <_printf_i+0x15e>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4632      	mov	r2, r6
 80078c8:	4649      	mov	r1, r9
 80078ca:	4640      	mov	r0, r8
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d09d      	beq.n	800780e <_printf_i+0x15a>
 80078d2:	3501      	adds	r5, #1
 80078d4:	68e3      	ldr	r3, [r4, #12]
 80078d6:	9903      	ldr	r1, [sp, #12]
 80078d8:	1a5b      	subs	r3, r3, r1
 80078da:	42ab      	cmp	r3, r5
 80078dc:	dcf2      	bgt.n	80078c4 <_printf_i+0x210>
 80078de:	e7eb      	b.n	80078b8 <_printf_i+0x204>
 80078e0:	2500      	movs	r5, #0
 80078e2:	f104 0619 	add.w	r6, r4, #25
 80078e6:	e7f5      	b.n	80078d4 <_printf_i+0x220>
 80078e8:	08009d67 	.word	0x08009d67
 80078ec:	08009d78 	.word	0x08009d78

080078f0 <std>:
 80078f0:	2300      	movs	r3, #0
 80078f2:	b510      	push	{r4, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	e9c0 3300 	strd	r3, r3, [r0]
 80078fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078fe:	6083      	str	r3, [r0, #8]
 8007900:	8181      	strh	r1, [r0, #12]
 8007902:	6643      	str	r3, [r0, #100]	@ 0x64
 8007904:	81c2      	strh	r2, [r0, #14]
 8007906:	6183      	str	r3, [r0, #24]
 8007908:	4619      	mov	r1, r3
 800790a:	2208      	movs	r2, #8
 800790c:	305c      	adds	r0, #92	@ 0x5c
 800790e:	f000 fa01 	bl	8007d14 <memset>
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <std+0x58>)
 8007914:	6263      	str	r3, [r4, #36]	@ 0x24
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x5c>)
 8007918:	62a3      	str	r3, [r4, #40]	@ 0x28
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <std+0x60>)
 800791c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <std+0x64>)
 8007920:	6323      	str	r3, [r4, #48]	@ 0x30
 8007922:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <std+0x68>)
 8007924:	6224      	str	r4, [r4, #32]
 8007926:	429c      	cmp	r4, r3
 8007928:	d006      	beq.n	8007938 <std+0x48>
 800792a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800792e:	4294      	cmp	r4, r2
 8007930:	d002      	beq.n	8007938 <std+0x48>
 8007932:	33d0      	adds	r3, #208	@ 0xd0
 8007934:	429c      	cmp	r4, r3
 8007936:	d105      	bne.n	8007944 <std+0x54>
 8007938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f000 ba74 	b.w	8007e2c <__retarget_lock_init_recursive>
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	08007b65 	.word	0x08007b65
 800794c:	08007b87 	.word	0x08007b87
 8007950:	08007bbf 	.word	0x08007bbf
 8007954:	08007be3 	.word	0x08007be3
 8007958:	200005a8 	.word	0x200005a8

0800795c <stdio_exit_handler>:
 800795c:	4a02      	ldr	r2, [pc, #8]	@ (8007968 <stdio_exit_handler+0xc>)
 800795e:	4903      	ldr	r1, [pc, #12]	@ (800796c <stdio_exit_handler+0x10>)
 8007960:	4803      	ldr	r0, [pc, #12]	@ (8007970 <stdio_exit_handler+0x14>)
 8007962:	f000 b869 	b.w	8007a38 <_fwalk_sglue>
 8007966:	bf00      	nop
 8007968:	20000014 	.word	0x20000014
 800796c:	08009655 	.word	0x08009655
 8007970:	20000024 	.word	0x20000024

08007974 <cleanup_stdio>:
 8007974:	6841      	ldr	r1, [r0, #4]
 8007976:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <cleanup_stdio+0x34>)
 8007978:	4299      	cmp	r1, r3
 800797a:	b510      	push	{r4, lr}
 800797c:	4604      	mov	r4, r0
 800797e:	d001      	beq.n	8007984 <cleanup_stdio+0x10>
 8007980:	f001 fe68 	bl	8009654 <_fflush_r>
 8007984:	68a1      	ldr	r1, [r4, #8]
 8007986:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <cleanup_stdio+0x38>)
 8007988:	4299      	cmp	r1, r3
 800798a:	d002      	beq.n	8007992 <cleanup_stdio+0x1e>
 800798c:	4620      	mov	r0, r4
 800798e:	f001 fe61 	bl	8009654 <_fflush_r>
 8007992:	68e1      	ldr	r1, [r4, #12]
 8007994:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <cleanup_stdio+0x3c>)
 8007996:	4299      	cmp	r1, r3
 8007998:	d004      	beq.n	80079a4 <cleanup_stdio+0x30>
 800799a:	4620      	mov	r0, r4
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	f001 be58 	b.w	8009654 <_fflush_r>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop
 80079a8:	200005a8 	.word	0x200005a8
 80079ac:	20000610 	.word	0x20000610
 80079b0:	20000678 	.word	0x20000678

080079b4 <global_stdio_init.part.0>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <global_stdio_init.part.0+0x30>)
 80079b8:	4c0b      	ldr	r4, [pc, #44]	@ (80079e8 <global_stdio_init.part.0+0x34>)
 80079ba:	4a0c      	ldr	r2, [pc, #48]	@ (80079ec <global_stdio_init.part.0+0x38>)
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	4620      	mov	r0, r4
 80079c0:	2200      	movs	r2, #0
 80079c2:	2104      	movs	r1, #4
 80079c4:	f7ff ff94 	bl	80078f0 <std>
 80079c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079cc:	2201      	movs	r2, #1
 80079ce:	2109      	movs	r1, #9
 80079d0:	f7ff ff8e 	bl	80078f0 <std>
 80079d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079d8:	2202      	movs	r2, #2
 80079da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079de:	2112      	movs	r1, #18
 80079e0:	f7ff bf86 	b.w	80078f0 <std>
 80079e4:	200006e0 	.word	0x200006e0
 80079e8:	200005a8 	.word	0x200005a8
 80079ec:	0800795d 	.word	0x0800795d

080079f0 <__sfp_lock_acquire>:
 80079f0:	4801      	ldr	r0, [pc, #4]	@ (80079f8 <__sfp_lock_acquire+0x8>)
 80079f2:	f000 ba1c 	b.w	8007e2e <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	200006e9 	.word	0x200006e9

080079fc <__sfp_lock_release>:
 80079fc:	4801      	ldr	r0, [pc, #4]	@ (8007a04 <__sfp_lock_release+0x8>)
 80079fe:	f000 ba17 	b.w	8007e30 <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	200006e9 	.word	0x200006e9

08007a08 <__sinit>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	f7ff fff0 	bl	80079f0 <__sfp_lock_acquire>
 8007a10:	6a23      	ldr	r3, [r4, #32]
 8007a12:	b11b      	cbz	r3, 8007a1c <__sinit+0x14>
 8007a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a18:	f7ff bff0 	b.w	80079fc <__sfp_lock_release>
 8007a1c:	4b04      	ldr	r3, [pc, #16]	@ (8007a30 <__sinit+0x28>)
 8007a1e:	6223      	str	r3, [r4, #32]
 8007a20:	4b04      	ldr	r3, [pc, #16]	@ (8007a34 <__sinit+0x2c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f5      	bne.n	8007a14 <__sinit+0xc>
 8007a28:	f7ff ffc4 	bl	80079b4 <global_stdio_init.part.0>
 8007a2c:	e7f2      	b.n	8007a14 <__sinit+0xc>
 8007a2e:	bf00      	nop
 8007a30:	08007975 	.word	0x08007975
 8007a34:	200006e0 	.word	0x200006e0

08007a38 <_fwalk_sglue>:
 8007a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	4688      	mov	r8, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	2600      	movs	r6, #0
 8007a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a48:	f1b9 0901 	subs.w	r9, r9, #1
 8007a4c:	d505      	bpl.n	8007a5a <_fwalk_sglue+0x22>
 8007a4e:	6824      	ldr	r4, [r4, #0]
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	d1f7      	bne.n	8007a44 <_fwalk_sglue+0xc>
 8007a54:	4630      	mov	r0, r6
 8007a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d907      	bls.n	8007a70 <_fwalk_sglue+0x38>
 8007a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a64:	3301      	adds	r3, #1
 8007a66:	d003      	beq.n	8007a70 <_fwalk_sglue+0x38>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c0      	blx	r8
 8007a6e:	4306      	orrs	r6, r0
 8007a70:	3568      	adds	r5, #104	@ 0x68
 8007a72:	e7e9      	b.n	8007a48 <_fwalk_sglue+0x10>

08007a74 <iprintf>:
 8007a74:	b40f      	push	{r0, r1, r2, r3}
 8007a76:	b507      	push	{r0, r1, r2, lr}
 8007a78:	4906      	ldr	r1, [pc, #24]	@ (8007a94 <iprintf+0x20>)
 8007a7a:	ab04      	add	r3, sp, #16
 8007a7c:	6808      	ldr	r0, [r1, #0]
 8007a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a82:	6881      	ldr	r1, [r0, #8]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f001 fc49 	bl	800931c <_vfiprintf_r>
 8007a8a:	b003      	add	sp, #12
 8007a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a90:	b004      	add	sp, #16
 8007a92:	4770      	bx	lr
 8007a94:	20000020 	.word	0x20000020

08007a98 <putchar>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <putchar+0xc>)
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	6882      	ldr	r2, [r0, #8]
 8007aa0:	f001 be74 	b.w	800978c <_putc_r>
 8007aa4:	20000020 	.word	0x20000020

08007aa8 <_puts_r>:
 8007aa8:	6a03      	ldr	r3, [r0, #32]
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	6884      	ldr	r4, [r0, #8]
 8007aae:	4605      	mov	r5, r0
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <_puts_r+0x10>
 8007ab4:	f7ff ffa8 	bl	8007a08 <__sinit>
 8007ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d405      	bmi.n	8007aca <_puts_r+0x22>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0598      	lsls	r0, r3, #22
 8007ac2:	d402      	bmi.n	8007aca <_puts_r+0x22>
 8007ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac6:	f000 f9b2 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	0719      	lsls	r1, r3, #28
 8007ace:	d502      	bpl.n	8007ad6 <_puts_r+0x2e>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d135      	bne.n	8007b42 <_puts_r+0x9a>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 f8c5 	bl	8007c68 <__swsetup_r>
 8007ade:	b380      	cbz	r0, 8007b42 <_puts_r+0x9a>
 8007ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ae6:	07da      	lsls	r2, r3, #31
 8007ae8:	d405      	bmi.n	8007af6 <_puts_r+0x4e>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	059b      	lsls	r3, r3, #22
 8007aee:	d402      	bmi.n	8007af6 <_puts_r+0x4e>
 8007af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af2:	f000 f99d 	bl	8007e30 <__retarget_lock_release_recursive>
 8007af6:	4628      	mov	r0, r5
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da04      	bge.n	8007b08 <_puts_r+0x60>
 8007afe:	69a2      	ldr	r2, [r4, #24]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	dc17      	bgt.n	8007b34 <_puts_r+0x8c>
 8007b04:	290a      	cmp	r1, #10
 8007b06:	d015      	beq.n	8007b34 <_puts_r+0x8c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	7019      	strb	r1, [r3, #0]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b16:	3b01      	subs	r3, #1
 8007b18:	60a3      	str	r3, [r4, #8]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d1ed      	bne.n	8007afa <_puts_r+0x52>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da11      	bge.n	8007b46 <_puts_r+0x9e>
 8007b22:	4622      	mov	r2, r4
 8007b24:	210a      	movs	r1, #10
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f85f 	bl	8007bea <__swbuf_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d0d7      	beq.n	8007ae0 <_puts_r+0x38>
 8007b30:	250a      	movs	r5, #10
 8007b32:	e7d7      	b.n	8007ae4 <_puts_r+0x3c>
 8007b34:	4622      	mov	r2, r4
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 f857 	bl	8007bea <__swbuf_r>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1e7      	bne.n	8007b10 <_puts_r+0x68>
 8007b40:	e7ce      	b.n	8007ae0 <_puts_r+0x38>
 8007b42:	3e01      	subs	r6, #1
 8007b44:	e7e4      	b.n	8007b10 <_puts_r+0x68>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	e7ee      	b.n	8007b30 <_puts_r+0x88>
	...

08007b54 <puts>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	@ (8007b60 <puts+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f7ff bfa5 	b.w	8007aa8 <_puts_r>
 8007b5e:	bf00      	nop
 8007b60:	20000020 	.word	0x20000020

08007b64 <__sread>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6c:	f000 f900 	bl	8007d70 <_read_r>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bfab      	itete	ge
 8007b74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b76:	89a3      	ldrhlt	r3, [r4, #12]
 8007b78:	181b      	addge	r3, r3, r0
 8007b7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b7e:	bfac      	ite	ge
 8007b80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b82:	81a3      	strhlt	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__swrite>:
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4616      	mov	r6, r2
 8007b96:	d505      	bpl.n	8007ba4 <__swrite+0x1e>
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 f8d4 	bl	8007d4c <_lseek_r>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007baa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	f000 b8fb 	b.w	8007db4 <_write_r>

08007bbe <__sseek>:
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 f8c1 	bl	8007d4c <_lseek_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	bf15      	itete	ne
 8007bd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bda:	81a3      	strheq	r3, [r4, #12]
 8007bdc:	bf18      	it	ne
 8007bde:	81a3      	strhne	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__sclose>:
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 b8a1 	b.w	8007d2c <_close_r>

08007bea <__swbuf_r>:
 8007bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bec:	460e      	mov	r6, r1
 8007bee:	4614      	mov	r4, r2
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b118      	cbz	r0, 8007bfc <__swbuf_r+0x12>
 8007bf4:	6a03      	ldr	r3, [r0, #32]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <__swbuf_r+0x12>
 8007bf8:	f7ff ff06 	bl	8007a08 <__sinit>
 8007bfc:	69a3      	ldr	r3, [r4, #24]
 8007bfe:	60a3      	str	r3, [r4, #8]
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	071a      	lsls	r2, r3, #28
 8007c04:	d501      	bpl.n	8007c0a <__swbuf_r+0x20>
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	b943      	cbnz	r3, 8007c1c <__swbuf_r+0x32>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f82b 	bl	8007c68 <__swsetup_r>
 8007c12:	b118      	cbz	r0, 8007c1c <__swbuf_r+0x32>
 8007c14:	f04f 37ff 	mov.w	r7, #4294967295
 8007c18:	4638      	mov	r0, r7
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	6922      	ldr	r2, [r4, #16]
 8007c20:	1a98      	subs	r0, r3, r2
 8007c22:	6963      	ldr	r3, [r4, #20]
 8007c24:	b2f6      	uxtb	r6, r6
 8007c26:	4283      	cmp	r3, r0
 8007c28:	4637      	mov	r7, r6
 8007c2a:	dc05      	bgt.n	8007c38 <__swbuf_r+0x4e>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f001 fd10 	bl	8009654 <_fflush_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1ed      	bne.n	8007c14 <__swbuf_r+0x2a>
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	6022      	str	r2, [r4, #0]
 8007c44:	701e      	strb	r6, [r3, #0]
 8007c46:	6962      	ldr	r2, [r4, #20]
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d004      	beq.n	8007c58 <__swbuf_r+0x6e>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	07db      	lsls	r3, r3, #31
 8007c52:	d5e1      	bpl.n	8007c18 <__swbuf_r+0x2e>
 8007c54:	2e0a      	cmp	r6, #10
 8007c56:	d1df      	bne.n	8007c18 <__swbuf_r+0x2e>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f001 fcfa 	bl	8009654 <_fflush_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0d9      	beq.n	8007c18 <__swbuf_r+0x2e>
 8007c64:	e7d6      	b.n	8007c14 <__swbuf_r+0x2a>
	...

08007c68 <__swsetup_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4b29      	ldr	r3, [pc, #164]	@ (8007d10 <__swsetup_r+0xa8>)
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	460c      	mov	r4, r1
 8007c72:	b118      	cbz	r0, 8007c7c <__swsetup_r+0x14>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <__swsetup_r+0x14>
 8007c78:	f7ff fec6 	bl	8007a08 <__sinit>
 8007c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c80:	0719      	lsls	r1, r3, #28
 8007c82:	d422      	bmi.n	8007cca <__swsetup_r+0x62>
 8007c84:	06da      	lsls	r2, r3, #27
 8007c86:	d407      	bmi.n	8007c98 <__swsetup_r+0x30>
 8007c88:	2209      	movs	r2, #9
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	e033      	b.n	8007d00 <__swsetup_r+0x98>
 8007c98:	0758      	lsls	r0, r3, #29
 8007c9a:	d512      	bpl.n	8007cc2 <__swsetup_r+0x5a>
 8007c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c9e:	b141      	cbz	r1, 8007cb2 <__swsetup_r+0x4a>
 8007ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	d002      	beq.n	8007cae <__swsetup_r+0x46>
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f000 ff49 	bl	8008b40 <_free_r>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6063      	str	r3, [r4, #4]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f043 0308 	orr.w	r3, r3, #8
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	b94b      	cbnz	r3, 8007ce2 <__swsetup_r+0x7a>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cd8:	d003      	beq.n	8007ce2 <__swsetup_r+0x7a>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f001 fd19 	bl	8009714 <__smakebuf_r>
 8007ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce6:	f013 0201 	ands.w	r2, r3, #1
 8007cea:	d00a      	beq.n	8007d02 <__swsetup_r+0x9a>
 8007cec:	2200      	movs	r2, #0
 8007cee:	60a2      	str	r2, [r4, #8]
 8007cf0:	6962      	ldr	r2, [r4, #20]
 8007cf2:	4252      	negs	r2, r2
 8007cf4:	61a2      	str	r2, [r4, #24]
 8007cf6:	6922      	ldr	r2, [r4, #16]
 8007cf8:	b942      	cbnz	r2, 8007d0c <__swsetup_r+0xa4>
 8007cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cfe:	d1c5      	bne.n	8007c8c <__swsetup_r+0x24>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	0799      	lsls	r1, r3, #30
 8007d04:	bf58      	it	pl
 8007d06:	6962      	ldrpl	r2, [r4, #20]
 8007d08:	60a2      	str	r2, [r4, #8]
 8007d0a:	e7f4      	b.n	8007cf6 <__swsetup_r+0x8e>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e7f7      	b.n	8007d00 <__swsetup_r+0x98>
 8007d10:	20000020 	.word	0x20000020

08007d14 <memset>:
 8007d14:	4402      	add	r2, r0
 8007d16:	4603      	mov	r3, r0
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d100      	bne.n	8007d1e <memset+0xa>
 8007d1c:	4770      	bx	lr
 8007d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d22:	e7f9      	b.n	8007d18 <memset+0x4>

08007d24 <_localeconv_r>:
 8007d24:	4800      	ldr	r0, [pc, #0]	@ (8007d28 <_localeconv_r+0x4>)
 8007d26:	4770      	bx	lr
 8007d28:	20000160 	.word	0x20000160

08007d2c <_close_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d06      	ldr	r5, [pc, #24]	@ (8007d48 <_close_r+0x1c>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	f7f9 fe07 	bl	800194a <_close>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_close_r+0x1a>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_close_r+0x1a>
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	200006e4 	.word	0x200006e4

08007d4c <_lseek_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d07      	ldr	r5, [pc, #28]	@ (8007d6c <_lseek_r+0x20>)
 8007d50:	4604      	mov	r4, r0
 8007d52:	4608      	mov	r0, r1
 8007d54:	4611      	mov	r1, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	602a      	str	r2, [r5, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f7f9 fe1c 	bl	8001998 <_lseek>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_lseek_r+0x1e>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_lseek_r+0x1e>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200006e4 	.word	0x200006e4

08007d70 <_read_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	@ (8007d90 <_read_r+0x20>)
 8007d74:	4604      	mov	r4, r0
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	602a      	str	r2, [r5, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f7f9 ff18 	bl	8001bb4 <_read>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_read_r+0x1e>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_read_r+0x1e>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	200006e4 	.word	0x200006e4

08007d94 <_sbrk_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d06      	ldr	r5, [pc, #24]	@ (8007db0 <_sbrk_r+0x1c>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	f7f9 fe08 	bl	80019b4 <_sbrk>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_sbrk_r+0x1a>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_sbrk_r+0x1a>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	200006e4 	.word	0x200006e4

08007db4 <_write_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	@ (8007dd4 <_write_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7f9 fe64 	bl	8001a90 <_write>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_write_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_write_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	200006e4 	.word	0x200006e4

08007dd8 <__errno>:
 8007dd8:	4b01      	ldr	r3, [pc, #4]	@ (8007de0 <__errno+0x8>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000020 	.word	0x20000020

08007de4 <__libc_init_array>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e1c <__libc_init_array+0x38>)
 8007de8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e20 <__libc_init_array+0x3c>)
 8007dea:	1b64      	subs	r4, r4, r5
 8007dec:	10a4      	asrs	r4, r4, #2
 8007dee:	2600      	movs	r6, #0
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	d109      	bne.n	8007e08 <__libc_init_array+0x24>
 8007df4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e24 <__libc_init_array+0x40>)
 8007df6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e28 <__libc_init_array+0x44>)
 8007df8:	f001 fd9c 	bl	8009934 <_init>
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	2600      	movs	r6, #0
 8007e02:	42a6      	cmp	r6, r4
 8007e04:	d105      	bne.n	8007e12 <__libc_init_array+0x2e>
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0c:	4798      	blx	r3
 8007e0e:	3601      	adds	r6, #1
 8007e10:	e7ee      	b.n	8007df0 <__libc_init_array+0xc>
 8007e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e16:	4798      	blx	r3
 8007e18:	3601      	adds	r6, #1
 8007e1a:	e7f2      	b.n	8007e02 <__libc_init_array+0x1e>
 8007e1c:	08009fd0 	.word	0x08009fd0
 8007e20:	08009fd0 	.word	0x08009fd0
 8007e24:	08009fd0 	.word	0x08009fd0
 8007e28:	08009fd4 	.word	0x08009fd4

08007e2c <__retarget_lock_init_recursive>:
 8007e2c:	4770      	bx	lr

08007e2e <__retarget_lock_acquire_recursive>:
 8007e2e:	4770      	bx	lr

08007e30 <__retarget_lock_release_recursive>:
 8007e30:	4770      	bx	lr

08007e32 <memcpy>:
 8007e32:	440a      	add	r2, r1
 8007e34:	4291      	cmp	r1, r2
 8007e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e3a:	d100      	bne.n	8007e3e <memcpy+0xc>
 8007e3c:	4770      	bx	lr
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e48:	4291      	cmp	r1, r2
 8007e4a:	d1f9      	bne.n	8007e40 <memcpy+0xe>
 8007e4c:	bd10      	pop	{r4, pc}
	...

08007e50 <__assert_func>:
 8007e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e52:	4614      	mov	r4, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <__assert_func+0x2c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	68d8      	ldr	r0, [r3, #12]
 8007e5e:	b14c      	cbz	r4, 8007e74 <__assert_func+0x24>
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <__assert_func+0x30>)
 8007e62:	9100      	str	r1, [sp, #0]
 8007e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e68:	4906      	ldr	r1, [pc, #24]	@ (8007e84 <__assert_func+0x34>)
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	f001 fc1a 	bl	80096a4 <fiprintf>
 8007e70:	f001 fce2 	bl	8009838 <abort>
 8007e74:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <__assert_func+0x38>)
 8007e76:	461c      	mov	r4, r3
 8007e78:	e7f3      	b.n	8007e62 <__assert_func+0x12>
 8007e7a:	bf00      	nop
 8007e7c:	20000020 	.word	0x20000020
 8007e80:	08009d89 	.word	0x08009d89
 8007e84:	08009d96 	.word	0x08009d96
 8007e88:	08009dc4 	.word	0x08009dc4

08007e8c <quorem>:
 8007e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	6903      	ldr	r3, [r0, #16]
 8007e92:	690c      	ldr	r4, [r1, #16]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	4607      	mov	r7, r0
 8007e98:	db7e      	blt.n	8007f98 <quorem+0x10c>
 8007e9a:	3c01      	subs	r4, #1
 8007e9c:	f101 0814 	add.w	r8, r1, #20
 8007ea0:	00a3      	lsls	r3, r4, #2
 8007ea2:	f100 0514 	add.w	r5, r0, #20
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ebe:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec2:	d32e      	bcc.n	8007f22 <quorem+0x96>
 8007ec4:	f04f 0a00 	mov.w	sl, #0
 8007ec8:	46c4      	mov	ip, r8
 8007eca:	46ae      	mov	lr, r5
 8007ecc:	46d3      	mov	fp, sl
 8007ece:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ed2:	b298      	uxth	r0, r3
 8007ed4:	fb06 a000 	mla	r0, r6, r0, sl
 8007ed8:	0c02      	lsrs	r2, r0, #16
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	fb06 2303 	mla	r3, r6, r3, r2
 8007ee0:	f8de 2000 	ldr.w	r2, [lr]
 8007ee4:	b280      	uxth	r0, r0
 8007ee6:	b292      	uxth	r2, r2
 8007ee8:	1a12      	subs	r2, r2, r0
 8007eea:	445a      	add	r2, fp
 8007eec:	f8de 0000 	ldr.w	r0, [lr]
 8007ef0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007efa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007efe:	b292      	uxth	r2, r2
 8007f00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f04:	45e1      	cmp	r9, ip
 8007f06:	f84e 2b04 	str.w	r2, [lr], #4
 8007f0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f0e:	d2de      	bcs.n	8007ece <quorem+0x42>
 8007f10:	9b00      	ldr	r3, [sp, #0]
 8007f12:	58eb      	ldr	r3, [r5, r3]
 8007f14:	b92b      	cbnz	r3, 8007f22 <quorem+0x96>
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	429d      	cmp	r5, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	d32f      	bcc.n	8007f80 <quorem+0xf4>
 8007f20:	613c      	str	r4, [r7, #16]
 8007f22:	4638      	mov	r0, r7
 8007f24:	f001 f8c8 	bl	80090b8 <__mcmp>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	db25      	blt.n	8007f78 <quorem+0xec>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f34:	f8d1 c000 	ldr.w	ip, [r1]
 8007f38:	fa1f fe82 	uxth.w	lr, r2
 8007f3c:	fa1f f38c 	uxth.w	r3, ip
 8007f40:	eba3 030e 	sub.w	r3, r3, lr
 8007f44:	4403      	add	r3, r0
 8007f46:	0c12      	lsrs	r2, r2, #16
 8007f48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f56:	45c1      	cmp	r9, r8
 8007f58:	f841 3b04 	str.w	r3, [r1], #4
 8007f5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f60:	d2e6      	bcs.n	8007f30 <quorem+0xa4>
 8007f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f6a:	b922      	cbnz	r2, 8007f76 <quorem+0xea>
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	429d      	cmp	r5, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	d30b      	bcc.n	8007f8c <quorem+0x100>
 8007f74:	613c      	str	r4, [r7, #16]
 8007f76:	3601      	adds	r6, #1
 8007f78:	4630      	mov	r0, r6
 8007f7a:	b003      	add	sp, #12
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	3b04      	subs	r3, #4
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	d1cb      	bne.n	8007f20 <quorem+0x94>
 8007f88:	3c01      	subs	r4, #1
 8007f8a:	e7c6      	b.n	8007f1a <quorem+0x8e>
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	3b04      	subs	r3, #4
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	d1ef      	bne.n	8007f74 <quorem+0xe8>
 8007f94:	3c01      	subs	r4, #1
 8007f96:	e7ea      	b.n	8007f6e <quorem+0xe2>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7ee      	b.n	8007f7a <quorem+0xee>
 8007f9c:	0000      	movs	r0, r0
	...

08007fa0 <_dtoa_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	69c7      	ldr	r7, [r0, #28]
 8007fa6:	b097      	sub	sp, #92	@ 0x5c
 8007fa8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007fac:	ec55 4b10 	vmov	r4, r5, d0
 8007fb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007fb2:	9107      	str	r1, [sp, #28]
 8007fb4:	4681      	mov	r9, r0
 8007fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fba:	b97f      	cbnz	r7, 8007fdc <_dtoa_r+0x3c>
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f7fe ff8b 	bl	8006ed8 <malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007fc8:	b920      	cbnz	r0, 8007fd4 <_dtoa_r+0x34>
 8007fca:	4ba9      	ldr	r3, [pc, #676]	@ (8008270 <_dtoa_r+0x2d0>)
 8007fcc:	21ef      	movs	r1, #239	@ 0xef
 8007fce:	48a9      	ldr	r0, [pc, #676]	@ (8008274 <_dtoa_r+0x2d4>)
 8007fd0:	f7ff ff3e 	bl	8007e50 <__assert_func>
 8007fd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fd8:	6007      	str	r7, [r0, #0]
 8007fda:	60c7      	str	r7, [r0, #12]
 8007fdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	b159      	cbz	r1, 8007ffc <_dtoa_r+0x5c>
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	604a      	str	r2, [r1, #4]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4093      	lsls	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]
 8007fee:	4648      	mov	r0, r9
 8007ff0:	f000 fe30 	bl	8008c54 <_Bfree>
 8007ff4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	1e2b      	subs	r3, r5, #0
 8007ffe:	bfb9      	ittee	lt
 8008000:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008004:	9305      	strlt	r3, [sp, #20]
 8008006:	2300      	movge	r3, #0
 8008008:	6033      	strge	r3, [r6, #0]
 800800a:	9f05      	ldr	r7, [sp, #20]
 800800c:	4b9a      	ldr	r3, [pc, #616]	@ (8008278 <_dtoa_r+0x2d8>)
 800800e:	bfbc      	itt	lt
 8008010:	2201      	movlt	r2, #1
 8008012:	6032      	strlt	r2, [r6, #0]
 8008014:	43bb      	bics	r3, r7
 8008016:	d112      	bne.n	800803e <_dtoa_r+0x9e>
 8008018:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800801a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008024:	4323      	orrs	r3, r4
 8008026:	f000 855a 	beq.w	8008ade <_dtoa_r+0xb3e>
 800802a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800802c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800828c <_dtoa_r+0x2ec>
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 855c 	beq.w	8008aee <_dtoa_r+0xb4e>
 8008036:	f10a 0303 	add.w	r3, sl, #3
 800803a:	f000 bd56 	b.w	8008aea <_dtoa_r+0xb4a>
 800803e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008042:	2200      	movs	r2, #0
 8008044:	ec51 0b17 	vmov	r0, r1, d7
 8008048:	2300      	movs	r3, #0
 800804a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800804e:	f7f8 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008052:	4680      	mov	r8, r0
 8008054:	b158      	cbz	r0, 800806e <_dtoa_r+0xce>
 8008056:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008058:	2301      	movs	r3, #1
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800805e:	b113      	cbz	r3, 8008066 <_dtoa_r+0xc6>
 8008060:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008062:	4b86      	ldr	r3, [pc, #536]	@ (800827c <_dtoa_r+0x2dc>)
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008290 <_dtoa_r+0x2f0>
 800806a:	f000 bd40 	b.w	8008aee <_dtoa_r+0xb4e>
 800806e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008072:	aa14      	add	r2, sp, #80	@ 0x50
 8008074:	a915      	add	r1, sp, #84	@ 0x54
 8008076:	4648      	mov	r0, r9
 8008078:	f001 f8ce 	bl	8009218 <__d2b>
 800807c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008080:	9002      	str	r0, [sp, #8]
 8008082:	2e00      	cmp	r6, #0
 8008084:	d078      	beq.n	8008178 <_dtoa_r+0x1d8>
 8008086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008088:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800808c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008094:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008098:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800809c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080a0:	4619      	mov	r1, r3
 80080a2:	2200      	movs	r2, #0
 80080a4:	4b76      	ldr	r3, [pc, #472]	@ (8008280 <_dtoa_r+0x2e0>)
 80080a6:	f7f8 f8ef 	bl	8000288 <__aeabi_dsub>
 80080aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8008258 <_dtoa_r+0x2b8>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008260 <_dtoa_r+0x2c0>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8e7 	bl	800028c <__adddf3>
 80080be:	4604      	mov	r4, r0
 80080c0:	4630      	mov	r0, r6
 80080c2:	460d      	mov	r5, r1
 80080c4:	f7f8 fa2e 	bl	8000524 <__aeabi_i2d>
 80080c8:	a367      	add	r3, pc, #412	@ (adr r3, 8008268 <_dtoa_r+0x2c8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 f8d7 	bl	800028c <__adddf3>
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	4607      	mov	r7, r0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80080f4:	b140      	cbz	r0, 8008108 <_dtoa_r+0x168>
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7f8 fa14 	bl	8000524 <__aeabi_i2d>
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	f7f8 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008104:	b900      	cbnz	r0, 8008108 <_dtoa_r+0x168>
 8008106:	3f01      	subs	r7, #1
 8008108:	2f16      	cmp	r7, #22
 800810a:	d852      	bhi.n	80081b2 <_dtoa_r+0x212>
 800810c:	4b5d      	ldr	r3, [pc, #372]	@ (8008284 <_dtoa_r+0x2e4>)
 800810e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800811a:	f7f8 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d049      	beq.n	80081b6 <_dtoa_r+0x216>
 8008122:	3f01      	subs	r7, #1
 8008124:	2300      	movs	r3, #0
 8008126:	9310      	str	r3, [sp, #64]	@ 0x40
 8008128:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800812a:	1b9b      	subs	r3, r3, r6
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	bf45      	ittet	mi
 8008130:	f1c3 0301 	rsbmi	r3, r3, #1
 8008134:	9300      	strmi	r3, [sp, #0]
 8008136:	2300      	movpl	r3, #0
 8008138:	2300      	movmi	r3, #0
 800813a:	9206      	str	r2, [sp, #24]
 800813c:	bf54      	ite	pl
 800813e:	9300      	strpl	r3, [sp, #0]
 8008140:	9306      	strmi	r3, [sp, #24]
 8008142:	2f00      	cmp	r7, #0
 8008144:	db39      	blt.n	80081ba <_dtoa_r+0x21a>
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	970d      	str	r7, [sp, #52]	@ 0x34
 800814a:	443b      	add	r3, r7
 800814c:	9306      	str	r3, [sp, #24]
 800814e:	2300      	movs	r3, #0
 8008150:	9308      	str	r3, [sp, #32]
 8008152:	9b07      	ldr	r3, [sp, #28]
 8008154:	2b09      	cmp	r3, #9
 8008156:	d863      	bhi.n	8008220 <_dtoa_r+0x280>
 8008158:	2b05      	cmp	r3, #5
 800815a:	bfc4      	itt	gt
 800815c:	3b04      	subgt	r3, #4
 800815e:	9307      	strgt	r3, [sp, #28]
 8008160:	9b07      	ldr	r3, [sp, #28]
 8008162:	f1a3 0302 	sub.w	r3, r3, #2
 8008166:	bfcc      	ite	gt
 8008168:	2400      	movgt	r4, #0
 800816a:	2401      	movle	r4, #1
 800816c:	2b03      	cmp	r3, #3
 800816e:	d863      	bhi.n	8008238 <_dtoa_r+0x298>
 8008170:	e8df f003 	tbb	[pc, r3]
 8008174:	2b375452 	.word	0x2b375452
 8008178:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800817c:	441e      	add	r6, r3
 800817e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008182:	2b20      	cmp	r3, #32
 8008184:	bfc1      	itttt	gt
 8008186:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800818a:	409f      	lslgt	r7, r3
 800818c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008190:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008194:	bfd6      	itet	le
 8008196:	f1c3 0320 	rsble	r3, r3, #32
 800819a:	ea47 0003 	orrgt.w	r0, r7, r3
 800819e:	fa04 f003 	lslle.w	r0, r4, r3
 80081a2:	f7f8 f9af 	bl	8000504 <__aeabi_ui2d>
 80081a6:	2201      	movs	r2, #1
 80081a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081ac:	3e01      	subs	r6, #1
 80081ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80081b0:	e776      	b.n	80080a0 <_dtoa_r+0x100>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e7b7      	b.n	8008126 <_dtoa_r+0x186>
 80081b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80081b8:	e7b6      	b.n	8008128 <_dtoa_r+0x188>
 80081ba:	9b00      	ldr	r3, [sp, #0]
 80081bc:	1bdb      	subs	r3, r3, r7
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	427b      	negs	r3, r7
 80081c2:	9308      	str	r3, [sp, #32]
 80081c4:	2300      	movs	r3, #0
 80081c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80081c8:	e7c3      	b.n	8008152 <_dtoa_r+0x1b2>
 80081ca:	2301      	movs	r3, #1
 80081cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081d0:	eb07 0b03 	add.w	fp, r7, r3
 80081d4:	f10b 0301 	add.w	r3, fp, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	bfb8      	it	lt
 80081de:	2301      	movlt	r3, #1
 80081e0:	e006      	b.n	80081f0 <_dtoa_r+0x250>
 80081e2:	2301      	movs	r3, #1
 80081e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd28      	ble.n	800823e <_dtoa_r+0x29e>
 80081ec:	469b      	mov	fp, r3
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80081f4:	2100      	movs	r1, #0
 80081f6:	2204      	movs	r2, #4
 80081f8:	f102 0514 	add.w	r5, r2, #20
 80081fc:	429d      	cmp	r5, r3
 80081fe:	d926      	bls.n	800824e <_dtoa_r+0x2ae>
 8008200:	6041      	str	r1, [r0, #4]
 8008202:	4648      	mov	r0, r9
 8008204:	f000 fce6 	bl	8008bd4 <_Balloc>
 8008208:	4682      	mov	sl, r0
 800820a:	2800      	cmp	r0, #0
 800820c:	d142      	bne.n	8008294 <_dtoa_r+0x2f4>
 800820e:	4b1e      	ldr	r3, [pc, #120]	@ (8008288 <_dtoa_r+0x2e8>)
 8008210:	4602      	mov	r2, r0
 8008212:	f240 11af 	movw	r1, #431	@ 0x1af
 8008216:	e6da      	b.n	8007fce <_dtoa_r+0x2e>
 8008218:	2300      	movs	r3, #0
 800821a:	e7e3      	b.n	80081e4 <_dtoa_r+0x244>
 800821c:	2300      	movs	r3, #0
 800821e:	e7d5      	b.n	80081cc <_dtoa_r+0x22c>
 8008220:	2401      	movs	r4, #1
 8008222:	2300      	movs	r3, #0
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	9409      	str	r4, [sp, #36]	@ 0x24
 8008228:	f04f 3bff 	mov.w	fp, #4294967295
 800822c:	2200      	movs	r2, #0
 800822e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008232:	2312      	movs	r3, #18
 8008234:	920c      	str	r2, [sp, #48]	@ 0x30
 8008236:	e7db      	b.n	80081f0 <_dtoa_r+0x250>
 8008238:	2301      	movs	r3, #1
 800823a:	9309      	str	r3, [sp, #36]	@ 0x24
 800823c:	e7f4      	b.n	8008228 <_dtoa_r+0x288>
 800823e:	f04f 0b01 	mov.w	fp, #1
 8008242:	f8cd b00c 	str.w	fp, [sp, #12]
 8008246:	465b      	mov	r3, fp
 8008248:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800824c:	e7d0      	b.n	80081f0 <_dtoa_r+0x250>
 800824e:	3101      	adds	r1, #1
 8008250:	0052      	lsls	r2, r2, #1
 8008252:	e7d1      	b.n	80081f8 <_dtoa_r+0x258>
 8008254:	f3af 8000 	nop.w
 8008258:	636f4361 	.word	0x636f4361
 800825c:	3fd287a7 	.word	0x3fd287a7
 8008260:	8b60c8b3 	.word	0x8b60c8b3
 8008264:	3fc68a28 	.word	0x3fc68a28
 8008268:	509f79fb 	.word	0x509f79fb
 800826c:	3fd34413 	.word	0x3fd34413
 8008270:	08009dd2 	.word	0x08009dd2
 8008274:	08009de9 	.word	0x08009de9
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	08009d66 	.word	0x08009d66
 8008280:	3ff80000 	.word	0x3ff80000
 8008284:	08009f00 	.word	0x08009f00
 8008288:	08009e41 	.word	0x08009e41
 800828c:	08009dce 	.word	0x08009dce
 8008290:	08009d65 	.word	0x08009d65
 8008294:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008298:	6018      	str	r0, [r3, #0]
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	2b0e      	cmp	r3, #14
 800829e:	f200 80a1 	bhi.w	80083e4 <_dtoa_r+0x444>
 80082a2:	2c00      	cmp	r4, #0
 80082a4:	f000 809e 	beq.w	80083e4 <_dtoa_r+0x444>
 80082a8:	2f00      	cmp	r7, #0
 80082aa:	dd33      	ble.n	8008314 <_dtoa_r+0x374>
 80082ac:	4b9c      	ldr	r3, [pc, #624]	@ (8008520 <_dtoa_r+0x580>)
 80082ae:	f007 020f 	and.w	r2, r7, #15
 80082b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b6:	ed93 7b00 	vldr	d7, [r3]
 80082ba:	05f8      	lsls	r0, r7, #23
 80082bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80082c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082c4:	d516      	bpl.n	80082f4 <_dtoa_r+0x354>
 80082c6:	4b97      	ldr	r3, [pc, #604]	@ (8008524 <_dtoa_r+0x584>)
 80082c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d0:	f7f8 fabc 	bl	800084c <__aeabi_ddiv>
 80082d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d8:	f004 040f 	and.w	r4, r4, #15
 80082dc:	2603      	movs	r6, #3
 80082de:	4d91      	ldr	r5, [pc, #580]	@ (8008524 <_dtoa_r+0x584>)
 80082e0:	b954      	cbnz	r4, 80082f8 <_dtoa_r+0x358>
 80082e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082ea:	f7f8 faaf 	bl	800084c <__aeabi_ddiv>
 80082ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f2:	e028      	b.n	8008346 <_dtoa_r+0x3a6>
 80082f4:	2602      	movs	r6, #2
 80082f6:	e7f2      	b.n	80082de <_dtoa_r+0x33e>
 80082f8:	07e1      	lsls	r1, r4, #31
 80082fa:	d508      	bpl.n	800830e <_dtoa_r+0x36e>
 80082fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008300:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008304:	f7f8 f978 	bl	80005f8 <__aeabi_dmul>
 8008308:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800830c:	3601      	adds	r6, #1
 800830e:	1064      	asrs	r4, r4, #1
 8008310:	3508      	adds	r5, #8
 8008312:	e7e5      	b.n	80082e0 <_dtoa_r+0x340>
 8008314:	f000 80af 	beq.w	8008476 <_dtoa_r+0x4d6>
 8008318:	427c      	negs	r4, r7
 800831a:	4b81      	ldr	r3, [pc, #516]	@ (8008520 <_dtoa_r+0x580>)
 800831c:	4d81      	ldr	r5, [pc, #516]	@ (8008524 <_dtoa_r+0x584>)
 800831e:	f004 020f 	and.w	r2, r4, #15
 8008322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800832e:	f7f8 f963 	bl	80005f8 <__aeabi_dmul>
 8008332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008336:	1124      	asrs	r4, r4, #4
 8008338:	2300      	movs	r3, #0
 800833a:	2602      	movs	r6, #2
 800833c:	2c00      	cmp	r4, #0
 800833e:	f040 808f 	bne.w	8008460 <_dtoa_r+0x4c0>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1d3      	bne.n	80082ee <_dtoa_r+0x34e>
 8008346:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008348:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8094 	beq.w	800847a <_dtoa_r+0x4da>
 8008352:	4b75      	ldr	r3, [pc, #468]	@ (8008528 <_dtoa_r+0x588>)
 8008354:	2200      	movs	r2, #0
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f8 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	f000 808b 	beq.w	800847a <_dtoa_r+0x4da>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8087 	beq.w	800847a <_dtoa_r+0x4da>
 800836c:	f1bb 0f00 	cmp.w	fp, #0
 8008370:	dd34      	ble.n	80083dc <_dtoa_r+0x43c>
 8008372:	4620      	mov	r0, r4
 8008374:	4b6d      	ldr	r3, [pc, #436]	@ (800852c <_dtoa_r+0x58c>)
 8008376:	2200      	movs	r2, #0
 8008378:	4629      	mov	r1, r5
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008382:	f107 38ff 	add.w	r8, r7, #4294967295
 8008386:	3601      	adds	r6, #1
 8008388:	465c      	mov	r4, fp
 800838a:	4630      	mov	r0, r6
 800838c:	f7f8 f8ca 	bl	8000524 <__aeabi_i2d>
 8008390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4b65      	ldr	r3, [pc, #404]	@ (8008530 <_dtoa_r+0x590>)
 800839a:	2200      	movs	r2, #0
 800839c:	f7f7 ff76 	bl	800028c <__adddf3>
 80083a0:	4605      	mov	r5, r0
 80083a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	d16a      	bne.n	8008480 <_dtoa_r+0x4e0>
 80083aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ae:	4b61      	ldr	r3, [pc, #388]	@ (8008534 <_dtoa_r+0x594>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	f7f7 ff69 	bl	8000288 <__aeabi_dsub>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083be:	462a      	mov	r2, r5
 80083c0:	4633      	mov	r3, r6
 80083c2:	f7f8 fba9 	bl	8000b18 <__aeabi_dcmpgt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f040 8298 	bne.w	80088fc <_dtoa_r+0x95c>
 80083cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d0:	462a      	mov	r2, r5
 80083d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083d6:	f7f8 fb81 	bl	8000adc <__aeabi_dcmplt>
 80083da:	bb38      	cbnz	r0, 800842c <_dtoa_r+0x48c>
 80083dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80083e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f2c0 8157 	blt.w	800869a <_dtoa_r+0x6fa>
 80083ec:	2f0e      	cmp	r7, #14
 80083ee:	f300 8154 	bgt.w	800869a <_dtoa_r+0x6fa>
 80083f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008520 <_dtoa_r+0x580>)
 80083f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083f8:	ed93 7b00 	vldr	d7, [r3]
 80083fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083fe:	2b00      	cmp	r3, #0
 8008400:	ed8d 7b00 	vstr	d7, [sp]
 8008404:	f280 80e5 	bge.w	80085d2 <_dtoa_r+0x632>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f300 80e1 	bgt.w	80085d2 <_dtoa_r+0x632>
 8008410:	d10c      	bne.n	800842c <_dtoa_r+0x48c>
 8008412:	4b48      	ldr	r3, [pc, #288]	@ (8008534 <_dtoa_r+0x594>)
 8008414:	2200      	movs	r2, #0
 8008416:	ec51 0b17 	vmov	r0, r1, d7
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008422:	f7f8 fb6f 	bl	8000b04 <__aeabi_dcmpge>
 8008426:	2800      	cmp	r0, #0
 8008428:	f000 8266 	beq.w	80088f8 <_dtoa_r+0x958>
 800842c:	2400      	movs	r4, #0
 800842e:	4625      	mov	r5, r4
 8008430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008432:	4656      	mov	r6, sl
 8008434:	ea6f 0803 	mvn.w	r8, r3
 8008438:	2700      	movs	r7, #0
 800843a:	4621      	mov	r1, r4
 800843c:	4648      	mov	r0, r9
 800843e:	f000 fc09 	bl	8008c54 <_Bfree>
 8008442:	2d00      	cmp	r5, #0
 8008444:	f000 80bd 	beq.w	80085c2 <_dtoa_r+0x622>
 8008448:	b12f      	cbz	r7, 8008456 <_dtoa_r+0x4b6>
 800844a:	42af      	cmp	r7, r5
 800844c:	d003      	beq.n	8008456 <_dtoa_r+0x4b6>
 800844e:	4639      	mov	r1, r7
 8008450:	4648      	mov	r0, r9
 8008452:	f000 fbff 	bl	8008c54 <_Bfree>
 8008456:	4629      	mov	r1, r5
 8008458:	4648      	mov	r0, r9
 800845a:	f000 fbfb 	bl	8008c54 <_Bfree>
 800845e:	e0b0      	b.n	80085c2 <_dtoa_r+0x622>
 8008460:	07e2      	lsls	r2, r4, #31
 8008462:	d505      	bpl.n	8008470 <_dtoa_r+0x4d0>
 8008464:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	3601      	adds	r6, #1
 800846e:	2301      	movs	r3, #1
 8008470:	1064      	asrs	r4, r4, #1
 8008472:	3508      	adds	r5, #8
 8008474:	e762      	b.n	800833c <_dtoa_r+0x39c>
 8008476:	2602      	movs	r6, #2
 8008478:	e765      	b.n	8008346 <_dtoa_r+0x3a6>
 800847a:	9c03      	ldr	r4, [sp, #12]
 800847c:	46b8      	mov	r8, r7
 800847e:	e784      	b.n	800838a <_dtoa_r+0x3ea>
 8008480:	4b27      	ldr	r3, [pc, #156]	@ (8008520 <_dtoa_r+0x580>)
 8008482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800848c:	4454      	add	r4, sl
 800848e:	2900      	cmp	r1, #0
 8008490:	d054      	beq.n	800853c <_dtoa_r+0x59c>
 8008492:	4929      	ldr	r1, [pc, #164]	@ (8008538 <_dtoa_r+0x598>)
 8008494:	2000      	movs	r0, #0
 8008496:	f7f8 f9d9 	bl	800084c <__aeabi_ddiv>
 800849a:	4633      	mov	r3, r6
 800849c:	462a      	mov	r2, r5
 800849e:	f7f7 fef3 	bl	8000288 <__aeabi_dsub>
 80084a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084a6:	4656      	mov	r6, sl
 80084a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084ac:	f7f8 fb54 	bl	8000b58 <__aeabi_d2iz>
 80084b0:	4605      	mov	r5, r0
 80084b2:	f7f8 f837 	bl	8000524 <__aeabi_i2d>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084be:	f7f7 fee3 	bl	8000288 <__aeabi_dsub>
 80084c2:	3530      	adds	r5, #48	@ 0x30
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084cc:	f806 5b01 	strb.w	r5, [r6], #1
 80084d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084d4:	f7f8 fb02 	bl	8000adc <__aeabi_dcmplt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d172      	bne.n	80085c2 <_dtoa_r+0x622>
 80084dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e0:	4911      	ldr	r1, [pc, #68]	@ (8008528 <_dtoa_r+0x588>)
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084ec:	f7f8 faf6 	bl	8000adc <__aeabi_dcmplt>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	f040 80b4 	bne.w	800865e <_dtoa_r+0x6be>
 80084f6:	42a6      	cmp	r6, r4
 80084f8:	f43f af70 	beq.w	80083dc <_dtoa_r+0x43c>
 80084fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008500:	4b0a      	ldr	r3, [pc, #40]	@ (800852c <_dtoa_r+0x58c>)
 8008502:	2200      	movs	r2, #0
 8008504:	f7f8 f878 	bl	80005f8 <__aeabi_dmul>
 8008508:	4b08      	ldr	r3, [pc, #32]	@ (800852c <_dtoa_r+0x58c>)
 800850a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800850e:	2200      	movs	r2, #0
 8008510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008514:	f7f8 f870 	bl	80005f8 <__aeabi_dmul>
 8008518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800851c:	e7c4      	b.n	80084a8 <_dtoa_r+0x508>
 800851e:	bf00      	nop
 8008520:	08009f00 	.word	0x08009f00
 8008524:	08009ed8 	.word	0x08009ed8
 8008528:	3ff00000 	.word	0x3ff00000
 800852c:	40240000 	.word	0x40240000
 8008530:	401c0000 	.word	0x401c0000
 8008534:	40140000 	.word	0x40140000
 8008538:	3fe00000 	.word	0x3fe00000
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008548:	9413      	str	r4, [sp, #76]	@ 0x4c
 800854a:	4656      	mov	r6, sl
 800854c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008550:	f7f8 fb02 	bl	8000b58 <__aeabi_d2iz>
 8008554:	4605      	mov	r5, r0
 8008556:	f7f7 ffe5 	bl	8000524 <__aeabi_i2d>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008562:	f7f7 fe91 	bl	8000288 <__aeabi_dsub>
 8008566:	3530      	adds	r5, #48	@ 0x30
 8008568:	f806 5b01 	strb.w	r5, [r6], #1
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	42a6      	cmp	r6, r4
 8008572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	d124      	bne.n	80085c6 <_dtoa_r+0x626>
 800857c:	4baf      	ldr	r3, [pc, #700]	@ (800883c <_dtoa_r+0x89c>)
 800857e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008582:	f7f7 fe83 	bl	800028c <__adddf3>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800858e:	f7f8 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8008592:	2800      	cmp	r0, #0
 8008594:	d163      	bne.n	800865e <_dtoa_r+0x6be>
 8008596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800859a:	49a8      	ldr	r1, [pc, #672]	@ (800883c <_dtoa_r+0x89c>)
 800859c:	2000      	movs	r0, #0
 800859e:	f7f7 fe73 	bl	8000288 <__aeabi_dsub>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085aa:	f7f8 fa97 	bl	8000adc <__aeabi_dcmplt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f af14 	beq.w	80083dc <_dtoa_r+0x43c>
 80085b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80085b6:	1e73      	subs	r3, r6, #1
 80085b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085be:	2b30      	cmp	r3, #48	@ 0x30
 80085c0:	d0f8      	beq.n	80085b4 <_dtoa_r+0x614>
 80085c2:	4647      	mov	r7, r8
 80085c4:	e03b      	b.n	800863e <_dtoa_r+0x69e>
 80085c6:	4b9e      	ldr	r3, [pc, #632]	@ (8008840 <_dtoa_r+0x8a0>)
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085d0:	e7bc      	b.n	800854c <_dtoa_r+0x5ac>
 80085d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80085d6:	4656      	mov	r6, sl
 80085d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f8 f934 	bl	800084c <__aeabi_ddiv>
 80085e4:	f7f8 fab8 	bl	8000b58 <__aeabi_d2iz>
 80085e8:	4680      	mov	r8, r0
 80085ea:	f7f7 ff9b 	bl	8000524 <__aeabi_i2d>
 80085ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f2:	f7f8 f801 	bl	80005f8 <__aeabi_dmul>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008602:	f7f7 fe41 	bl	8000288 <__aeabi_dsub>
 8008606:	f806 4b01 	strb.w	r4, [r6], #1
 800860a:	9d03      	ldr	r5, [sp, #12]
 800860c:	eba6 040a 	sub.w	r4, r6, sl
 8008610:	42a5      	cmp	r5, r4
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	d133      	bne.n	8008680 <_dtoa_r+0x6e0>
 8008618:	f7f7 fe38 	bl	800028c <__adddf3>
 800861c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008620:	4604      	mov	r4, r0
 8008622:	460d      	mov	r5, r1
 8008624:	f7f8 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 8008628:	b9c0      	cbnz	r0, 800865c <_dtoa_r+0x6bc>
 800862a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800862e:	4620      	mov	r0, r4
 8008630:	4629      	mov	r1, r5
 8008632:	f7f8 fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008636:	b110      	cbz	r0, 800863e <_dtoa_r+0x69e>
 8008638:	f018 0f01 	tst.w	r8, #1
 800863c:	d10e      	bne.n	800865c <_dtoa_r+0x6bc>
 800863e:	9902      	ldr	r1, [sp, #8]
 8008640:	4648      	mov	r0, r9
 8008642:	f000 fb07 	bl	8008c54 <_Bfree>
 8008646:	2300      	movs	r3, #0
 8008648:	7033      	strb	r3, [r6, #0]
 800864a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800864c:	3701      	adds	r7, #1
 800864e:	601f      	str	r7, [r3, #0]
 8008650:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 824b 	beq.w	8008aee <_dtoa_r+0xb4e>
 8008658:	601e      	str	r6, [r3, #0]
 800865a:	e248      	b.n	8008aee <_dtoa_r+0xb4e>
 800865c:	46b8      	mov	r8, r7
 800865e:	4633      	mov	r3, r6
 8008660:	461e      	mov	r6, r3
 8008662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008666:	2a39      	cmp	r2, #57	@ 0x39
 8008668:	d106      	bne.n	8008678 <_dtoa_r+0x6d8>
 800866a:	459a      	cmp	sl, r3
 800866c:	d1f8      	bne.n	8008660 <_dtoa_r+0x6c0>
 800866e:	2230      	movs	r2, #48	@ 0x30
 8008670:	f108 0801 	add.w	r8, r8, #1
 8008674:	f88a 2000 	strb.w	r2, [sl]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	3201      	adds	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e7a0      	b.n	80085c2 <_dtoa_r+0x622>
 8008680:	4b6f      	ldr	r3, [pc, #444]	@ (8008840 <_dtoa_r+0x8a0>)
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	2200      	movs	r2, #0
 800868a:	2300      	movs	r3, #0
 800868c:	4604      	mov	r4, r0
 800868e:	460d      	mov	r5, r1
 8008690:	f7f8 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008694:	2800      	cmp	r0, #0
 8008696:	d09f      	beq.n	80085d8 <_dtoa_r+0x638>
 8008698:	e7d1      	b.n	800863e <_dtoa_r+0x69e>
 800869a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800869c:	2a00      	cmp	r2, #0
 800869e:	f000 80ea 	beq.w	8008876 <_dtoa_r+0x8d6>
 80086a2:	9a07      	ldr	r2, [sp, #28]
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	f300 80cd 	bgt.w	8008844 <_dtoa_r+0x8a4>
 80086aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086ac:	2a00      	cmp	r2, #0
 80086ae:	f000 80c1 	beq.w	8008834 <_dtoa_r+0x894>
 80086b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086b6:	9c08      	ldr	r4, [sp, #32]
 80086b8:	9e00      	ldr	r6, [sp, #0]
 80086ba:	9a00      	ldr	r2, [sp, #0]
 80086bc:	441a      	add	r2, r3
 80086be:	9200      	str	r2, [sp, #0]
 80086c0:	9a06      	ldr	r2, [sp, #24]
 80086c2:	2101      	movs	r1, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	4648      	mov	r0, r9
 80086c8:	9206      	str	r2, [sp, #24]
 80086ca:	f000 fb77 	bl	8008dbc <__i2b>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b166      	cbz	r6, 80086ec <_dtoa_r+0x74c>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd09      	ble.n	80086ec <_dtoa_r+0x74c>
 80086d8:	42b3      	cmp	r3, r6
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	bfa8      	it	ge
 80086de:	4633      	movge	r3, r6
 80086e0:	1ad2      	subs	r2, r2, r3
 80086e2:	9200      	str	r2, [sp, #0]
 80086e4:	9a06      	ldr	r2, [sp, #24]
 80086e6:	1af6      	subs	r6, r6, r3
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	9306      	str	r3, [sp, #24]
 80086ec:	9b08      	ldr	r3, [sp, #32]
 80086ee:	b30b      	cbz	r3, 8008734 <_dtoa_r+0x794>
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80c6 	beq.w	8008884 <_dtoa_r+0x8e4>
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	f000 80c0 	beq.w	800887e <_dtoa_r+0x8de>
 80086fe:	4629      	mov	r1, r5
 8008700:	4622      	mov	r2, r4
 8008702:	4648      	mov	r0, r9
 8008704:	f000 fc12 	bl	8008f2c <__pow5mult>
 8008708:	9a02      	ldr	r2, [sp, #8]
 800870a:	4601      	mov	r1, r0
 800870c:	4605      	mov	r5, r0
 800870e:	4648      	mov	r0, r9
 8008710:	f000 fb6a 	bl	8008de8 <__multiply>
 8008714:	9902      	ldr	r1, [sp, #8]
 8008716:	4680      	mov	r8, r0
 8008718:	4648      	mov	r0, r9
 800871a:	f000 fa9b 	bl	8008c54 <_Bfree>
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	1b1b      	subs	r3, r3, r4
 8008722:	9308      	str	r3, [sp, #32]
 8008724:	f000 80b1 	beq.w	800888a <_dtoa_r+0x8ea>
 8008728:	9a08      	ldr	r2, [sp, #32]
 800872a:	4641      	mov	r1, r8
 800872c:	4648      	mov	r0, r9
 800872e:	f000 fbfd 	bl	8008f2c <__pow5mult>
 8008732:	9002      	str	r0, [sp, #8]
 8008734:	2101      	movs	r1, #1
 8008736:	4648      	mov	r0, r9
 8008738:	f000 fb40 	bl	8008dbc <__i2b>
 800873c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800873e:	4604      	mov	r4, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 81d8 	beq.w	8008af6 <_dtoa_r+0xb56>
 8008746:	461a      	mov	r2, r3
 8008748:	4601      	mov	r1, r0
 800874a:	4648      	mov	r0, r9
 800874c:	f000 fbee 	bl	8008f2c <__pow5mult>
 8008750:	9b07      	ldr	r3, [sp, #28]
 8008752:	2b01      	cmp	r3, #1
 8008754:	4604      	mov	r4, r0
 8008756:	f300 809f 	bgt.w	8008898 <_dtoa_r+0x8f8>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 8097 	bne.w	8008890 <_dtoa_r+0x8f0>
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008768:	2b00      	cmp	r3, #0
 800876a:	f040 8093 	bne.w	8008894 <_dtoa_r+0x8f4>
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008774:	0d1b      	lsrs	r3, r3, #20
 8008776:	051b      	lsls	r3, r3, #20
 8008778:	b133      	cbz	r3, 8008788 <_dtoa_r+0x7e8>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	9b06      	ldr	r3, [sp, #24]
 8008782:	3301      	adds	r3, #1
 8008784:	9306      	str	r3, [sp, #24]
 8008786:	2301      	movs	r3, #1
 8008788:	9308      	str	r3, [sp, #32]
 800878a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 81b8 	beq.w	8008b02 <_dtoa_r+0xb62>
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008798:	6918      	ldr	r0, [r3, #16]
 800879a:	f000 fac3 	bl	8008d24 <__hi0bits>
 800879e:	f1c0 0020 	rsb	r0, r0, #32
 80087a2:	9b06      	ldr	r3, [sp, #24]
 80087a4:	4418      	add	r0, r3
 80087a6:	f010 001f 	ands.w	r0, r0, #31
 80087aa:	f000 8082 	beq.w	80088b2 <_dtoa_r+0x912>
 80087ae:	f1c0 0320 	rsb	r3, r0, #32
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	dd73      	ble.n	800889e <_dtoa_r+0x8fe>
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	f1c0 001c 	rsb	r0, r0, #28
 80087bc:	4403      	add	r3, r0
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	4403      	add	r3, r0
 80087c4:	4406      	add	r6, r0
 80087c6:	9306      	str	r3, [sp, #24]
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	dd05      	ble.n	80087da <_dtoa_r+0x83a>
 80087ce:	9902      	ldr	r1, [sp, #8]
 80087d0:	461a      	mov	r2, r3
 80087d2:	4648      	mov	r0, r9
 80087d4:	f000 fc04 	bl	8008fe0 <__lshift>
 80087d8:	9002      	str	r0, [sp, #8]
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd05      	ble.n	80087ec <_dtoa_r+0x84c>
 80087e0:	4621      	mov	r1, r4
 80087e2:	461a      	mov	r2, r3
 80087e4:	4648      	mov	r0, r9
 80087e6:	f000 fbfb 	bl	8008fe0 <__lshift>
 80087ea:	4604      	mov	r4, r0
 80087ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d061      	beq.n	80088b6 <_dtoa_r+0x916>
 80087f2:	9802      	ldr	r0, [sp, #8]
 80087f4:	4621      	mov	r1, r4
 80087f6:	f000 fc5f 	bl	80090b8 <__mcmp>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	da5b      	bge.n	80088b6 <_dtoa_r+0x916>
 80087fe:	2300      	movs	r3, #0
 8008800:	9902      	ldr	r1, [sp, #8]
 8008802:	220a      	movs	r2, #10
 8008804:	4648      	mov	r0, r9
 8008806:	f000 fa47 	bl	8008c98 <__multadd>
 800880a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 8177 	beq.w	8008b06 <_dtoa_r+0xb66>
 8008818:	4629      	mov	r1, r5
 800881a:	2300      	movs	r3, #0
 800881c:	220a      	movs	r2, #10
 800881e:	4648      	mov	r0, r9
 8008820:	f000 fa3a 	bl	8008c98 <__multadd>
 8008824:	f1bb 0f00 	cmp.w	fp, #0
 8008828:	4605      	mov	r5, r0
 800882a:	dc6f      	bgt.n	800890c <_dtoa_r+0x96c>
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dc49      	bgt.n	80088c6 <_dtoa_r+0x926>
 8008832:	e06b      	b.n	800890c <_dtoa_r+0x96c>
 8008834:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800883a:	e73c      	b.n	80086b6 <_dtoa_r+0x716>
 800883c:	3fe00000 	.word	0x3fe00000
 8008840:	40240000 	.word	0x40240000
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1e5c      	subs	r4, r3, #1
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	42a3      	cmp	r3, r4
 800884c:	db09      	blt.n	8008862 <_dtoa_r+0x8c2>
 800884e:	1b1c      	subs	r4, r3, r4
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f6bf af30 	bge.w	80086b8 <_dtoa_r+0x718>
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	1a9e      	subs	r6, r3, r2
 800885e:	2300      	movs	r3, #0
 8008860:	e72b      	b.n	80086ba <_dtoa_r+0x71a>
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008866:	9408      	str	r4, [sp, #32]
 8008868:	1ae3      	subs	r3, r4, r3
 800886a:	441a      	add	r2, r3
 800886c:	9e00      	ldr	r6, [sp, #0]
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	920d      	str	r2, [sp, #52]	@ 0x34
 8008872:	2400      	movs	r4, #0
 8008874:	e721      	b.n	80086ba <_dtoa_r+0x71a>
 8008876:	9c08      	ldr	r4, [sp, #32]
 8008878:	9e00      	ldr	r6, [sp, #0]
 800887a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800887c:	e728      	b.n	80086d0 <_dtoa_r+0x730>
 800887e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008882:	e751      	b.n	8008728 <_dtoa_r+0x788>
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	9902      	ldr	r1, [sp, #8]
 8008888:	e750      	b.n	800872c <_dtoa_r+0x78c>
 800888a:	f8cd 8008 	str.w	r8, [sp, #8]
 800888e:	e751      	b.n	8008734 <_dtoa_r+0x794>
 8008890:	2300      	movs	r3, #0
 8008892:	e779      	b.n	8008788 <_dtoa_r+0x7e8>
 8008894:	9b04      	ldr	r3, [sp, #16]
 8008896:	e777      	b.n	8008788 <_dtoa_r+0x7e8>
 8008898:	2300      	movs	r3, #0
 800889a:	9308      	str	r3, [sp, #32]
 800889c:	e779      	b.n	8008792 <_dtoa_r+0x7f2>
 800889e:	d093      	beq.n	80087c8 <_dtoa_r+0x828>
 80088a0:	9a00      	ldr	r2, [sp, #0]
 80088a2:	331c      	adds	r3, #28
 80088a4:	441a      	add	r2, r3
 80088a6:	9200      	str	r2, [sp, #0]
 80088a8:	9a06      	ldr	r2, [sp, #24]
 80088aa:	441a      	add	r2, r3
 80088ac:	441e      	add	r6, r3
 80088ae:	9206      	str	r2, [sp, #24]
 80088b0:	e78a      	b.n	80087c8 <_dtoa_r+0x828>
 80088b2:	4603      	mov	r3, r0
 80088b4:	e7f4      	b.n	80088a0 <_dtoa_r+0x900>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	46b8      	mov	r8, r7
 80088bc:	dc20      	bgt.n	8008900 <_dtoa_r+0x960>
 80088be:	469b      	mov	fp, r3
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	dd1e      	ble.n	8008904 <_dtoa_r+0x964>
 80088c6:	f1bb 0f00 	cmp.w	fp, #0
 80088ca:	f47f adb1 	bne.w	8008430 <_dtoa_r+0x490>
 80088ce:	4621      	mov	r1, r4
 80088d0:	465b      	mov	r3, fp
 80088d2:	2205      	movs	r2, #5
 80088d4:	4648      	mov	r0, r9
 80088d6:	f000 f9df 	bl	8008c98 <__multadd>
 80088da:	4601      	mov	r1, r0
 80088dc:	4604      	mov	r4, r0
 80088de:	9802      	ldr	r0, [sp, #8]
 80088e0:	f000 fbea 	bl	80090b8 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f77f ada3 	ble.w	8008430 <_dtoa_r+0x490>
 80088ea:	4656      	mov	r6, sl
 80088ec:	2331      	movs	r3, #49	@ 0x31
 80088ee:	f806 3b01 	strb.w	r3, [r6], #1
 80088f2:	f108 0801 	add.w	r8, r8, #1
 80088f6:	e59f      	b.n	8008438 <_dtoa_r+0x498>
 80088f8:	9c03      	ldr	r4, [sp, #12]
 80088fa:	46b8      	mov	r8, r7
 80088fc:	4625      	mov	r5, r4
 80088fe:	e7f4      	b.n	80088ea <_dtoa_r+0x94a>
 8008900:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8101 	beq.w	8008b0e <_dtoa_r+0xb6e>
 800890c:	2e00      	cmp	r6, #0
 800890e:	dd05      	ble.n	800891c <_dtoa_r+0x97c>
 8008910:	4629      	mov	r1, r5
 8008912:	4632      	mov	r2, r6
 8008914:	4648      	mov	r0, r9
 8008916:	f000 fb63 	bl	8008fe0 <__lshift>
 800891a:	4605      	mov	r5, r0
 800891c:	9b08      	ldr	r3, [sp, #32]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d05c      	beq.n	80089dc <_dtoa_r+0xa3c>
 8008922:	6869      	ldr	r1, [r5, #4]
 8008924:	4648      	mov	r0, r9
 8008926:	f000 f955 	bl	8008bd4 <_Balloc>
 800892a:	4606      	mov	r6, r0
 800892c:	b928      	cbnz	r0, 800893a <_dtoa_r+0x99a>
 800892e:	4b82      	ldr	r3, [pc, #520]	@ (8008b38 <_dtoa_r+0xb98>)
 8008930:	4602      	mov	r2, r0
 8008932:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008936:	f7ff bb4a 	b.w	8007fce <_dtoa_r+0x2e>
 800893a:	692a      	ldr	r2, [r5, #16]
 800893c:	3202      	adds	r2, #2
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	f105 010c 	add.w	r1, r5, #12
 8008944:	300c      	adds	r0, #12
 8008946:	f7ff fa74 	bl	8007e32 <memcpy>
 800894a:	2201      	movs	r2, #1
 800894c:	4631      	mov	r1, r6
 800894e:	4648      	mov	r0, r9
 8008950:	f000 fb46 	bl	8008fe0 <__lshift>
 8008954:	f10a 0301 	add.w	r3, sl, #1
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	eb0a 030b 	add.w	r3, sl, fp
 800895e:	9308      	str	r3, [sp, #32]
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	462f      	mov	r7, r5
 8008968:	9306      	str	r3, [sp, #24]
 800896a:	4605      	mov	r5, r0
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	9802      	ldr	r0, [sp, #8]
 8008970:	4621      	mov	r1, r4
 8008972:	f103 3bff 	add.w	fp, r3, #4294967295
 8008976:	f7ff fa89 	bl	8007e8c <quorem>
 800897a:	4603      	mov	r3, r0
 800897c:	3330      	adds	r3, #48	@ 0x30
 800897e:	9003      	str	r0, [sp, #12]
 8008980:	4639      	mov	r1, r7
 8008982:	9802      	ldr	r0, [sp, #8]
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	f000 fb97 	bl	80090b8 <__mcmp>
 800898a:	462a      	mov	r2, r5
 800898c:	9004      	str	r0, [sp, #16]
 800898e:	4621      	mov	r1, r4
 8008990:	4648      	mov	r0, r9
 8008992:	f000 fbad 	bl	80090f0 <__mdiff>
 8008996:	68c2      	ldr	r2, [r0, #12]
 8008998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899a:	4606      	mov	r6, r0
 800899c:	bb02      	cbnz	r2, 80089e0 <_dtoa_r+0xa40>
 800899e:	4601      	mov	r1, r0
 80089a0:	9802      	ldr	r0, [sp, #8]
 80089a2:	f000 fb89 	bl	80090b8 <__mcmp>
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	4602      	mov	r2, r0
 80089aa:	4631      	mov	r1, r6
 80089ac:	4648      	mov	r0, r9
 80089ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80089b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b2:	f000 f94f 	bl	8008c54 <_Bfree>
 80089b6:	9b07      	ldr	r3, [sp, #28]
 80089b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089ba:	9e00      	ldr	r6, [sp, #0]
 80089bc:	ea42 0103 	orr.w	r1, r2, r3
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	4319      	orrs	r1, r3
 80089c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c6:	d10d      	bne.n	80089e4 <_dtoa_r+0xa44>
 80089c8:	2b39      	cmp	r3, #57	@ 0x39
 80089ca:	d027      	beq.n	8008a1c <_dtoa_r+0xa7c>
 80089cc:	9a04      	ldr	r2, [sp, #16]
 80089ce:	2a00      	cmp	r2, #0
 80089d0:	dd01      	ble.n	80089d6 <_dtoa_r+0xa36>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	3331      	adds	r3, #49	@ 0x31
 80089d6:	f88b 3000 	strb.w	r3, [fp]
 80089da:	e52e      	b.n	800843a <_dtoa_r+0x49a>
 80089dc:	4628      	mov	r0, r5
 80089de:	e7b9      	b.n	8008954 <_dtoa_r+0x9b4>
 80089e0:	2201      	movs	r2, #1
 80089e2:	e7e2      	b.n	80089aa <_dtoa_r+0xa0a>
 80089e4:	9904      	ldr	r1, [sp, #16]
 80089e6:	2900      	cmp	r1, #0
 80089e8:	db04      	blt.n	80089f4 <_dtoa_r+0xa54>
 80089ea:	9807      	ldr	r0, [sp, #28]
 80089ec:	4301      	orrs	r1, r0
 80089ee:	9806      	ldr	r0, [sp, #24]
 80089f0:	4301      	orrs	r1, r0
 80089f2:	d120      	bne.n	8008a36 <_dtoa_r+0xa96>
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	ddee      	ble.n	80089d6 <_dtoa_r+0xa36>
 80089f8:	9902      	ldr	r1, [sp, #8]
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	2201      	movs	r2, #1
 80089fe:	4648      	mov	r0, r9
 8008a00:	f000 faee 	bl	8008fe0 <__lshift>
 8008a04:	4621      	mov	r1, r4
 8008a06:	9002      	str	r0, [sp, #8]
 8008a08:	f000 fb56 	bl	80090b8 <__mcmp>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	9b00      	ldr	r3, [sp, #0]
 8008a10:	dc02      	bgt.n	8008a18 <_dtoa_r+0xa78>
 8008a12:	d1e0      	bne.n	80089d6 <_dtoa_r+0xa36>
 8008a14:	07da      	lsls	r2, r3, #31
 8008a16:	d5de      	bpl.n	80089d6 <_dtoa_r+0xa36>
 8008a18:	2b39      	cmp	r3, #57	@ 0x39
 8008a1a:	d1da      	bne.n	80089d2 <_dtoa_r+0xa32>
 8008a1c:	2339      	movs	r3, #57	@ 0x39
 8008a1e:	f88b 3000 	strb.w	r3, [fp]
 8008a22:	4633      	mov	r3, r6
 8008a24:	461e      	mov	r6, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a2c:	2a39      	cmp	r2, #57	@ 0x39
 8008a2e:	d04e      	beq.n	8008ace <_dtoa_r+0xb2e>
 8008a30:	3201      	adds	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e501      	b.n	800843a <_dtoa_r+0x49a>
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	dd03      	ble.n	8008a42 <_dtoa_r+0xaa2>
 8008a3a:	2b39      	cmp	r3, #57	@ 0x39
 8008a3c:	d0ee      	beq.n	8008a1c <_dtoa_r+0xa7c>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	e7c9      	b.n	80089d6 <_dtoa_r+0xa36>
 8008a42:	9a00      	ldr	r2, [sp, #0]
 8008a44:	9908      	ldr	r1, [sp, #32]
 8008a46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a4a:	428a      	cmp	r2, r1
 8008a4c:	d028      	beq.n	8008aa0 <_dtoa_r+0xb00>
 8008a4e:	9902      	ldr	r1, [sp, #8]
 8008a50:	2300      	movs	r3, #0
 8008a52:	220a      	movs	r2, #10
 8008a54:	4648      	mov	r0, r9
 8008a56:	f000 f91f 	bl	8008c98 <__multadd>
 8008a5a:	42af      	cmp	r7, r5
 8008a5c:	9002      	str	r0, [sp, #8]
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	f04f 020a 	mov.w	r2, #10
 8008a66:	4639      	mov	r1, r7
 8008a68:	4648      	mov	r0, r9
 8008a6a:	d107      	bne.n	8008a7c <_dtoa_r+0xadc>
 8008a6c:	f000 f914 	bl	8008c98 <__multadd>
 8008a70:	4607      	mov	r7, r0
 8008a72:	4605      	mov	r5, r0
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	e777      	b.n	800896c <_dtoa_r+0x9cc>
 8008a7c:	f000 f90c 	bl	8008c98 <__multadd>
 8008a80:	4629      	mov	r1, r5
 8008a82:	4607      	mov	r7, r0
 8008a84:	2300      	movs	r3, #0
 8008a86:	220a      	movs	r2, #10
 8008a88:	4648      	mov	r0, r9
 8008a8a:	f000 f905 	bl	8008c98 <__multadd>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	e7f0      	b.n	8008a74 <_dtoa_r+0xad4>
 8008a92:	f1bb 0f00 	cmp.w	fp, #0
 8008a96:	bfcc      	ite	gt
 8008a98:	465e      	movgt	r6, fp
 8008a9a:	2601      	movle	r6, #1
 8008a9c:	4456      	add	r6, sl
 8008a9e:	2700      	movs	r7, #0
 8008aa0:	9902      	ldr	r1, [sp, #8]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 fa9a 	bl	8008fe0 <__lshift>
 8008aac:	4621      	mov	r1, r4
 8008aae:	9002      	str	r0, [sp, #8]
 8008ab0:	f000 fb02 	bl	80090b8 <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dcb4      	bgt.n	8008a22 <_dtoa_r+0xa82>
 8008ab8:	d102      	bne.n	8008ac0 <_dtoa_r+0xb20>
 8008aba:	9b00      	ldr	r3, [sp, #0]
 8008abc:	07db      	lsls	r3, r3, #31
 8008abe:	d4b0      	bmi.n	8008a22 <_dtoa_r+0xa82>
 8008ac0:	4633      	mov	r3, r6
 8008ac2:	461e      	mov	r6, r3
 8008ac4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ac8:	2a30      	cmp	r2, #48	@ 0x30
 8008aca:	d0fa      	beq.n	8008ac2 <_dtoa_r+0xb22>
 8008acc:	e4b5      	b.n	800843a <_dtoa_r+0x49a>
 8008ace:	459a      	cmp	sl, r3
 8008ad0:	d1a8      	bne.n	8008a24 <_dtoa_r+0xa84>
 8008ad2:	2331      	movs	r3, #49	@ 0x31
 8008ad4:	f108 0801 	add.w	r8, r8, #1
 8008ad8:	f88a 3000 	strb.w	r3, [sl]
 8008adc:	e4ad      	b.n	800843a <_dtoa_r+0x49a>
 8008ade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ae0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008b3c <_dtoa_r+0xb9c>
 8008ae4:	b11b      	cbz	r3, 8008aee <_dtoa_r+0xb4e>
 8008ae6:	f10a 0308 	add.w	r3, sl, #8
 8008aea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4650      	mov	r0, sl
 8008af0:	b017      	add	sp, #92	@ 0x5c
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	9b07      	ldr	r3, [sp, #28]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	f77f ae2e 	ble.w	800875a <_dtoa_r+0x7ba>
 8008afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	2001      	movs	r0, #1
 8008b04:	e64d      	b.n	80087a2 <_dtoa_r+0x802>
 8008b06:	f1bb 0f00 	cmp.w	fp, #0
 8008b0a:	f77f aed9 	ble.w	80088c0 <_dtoa_r+0x920>
 8008b0e:	4656      	mov	r6, sl
 8008b10:	9802      	ldr	r0, [sp, #8]
 8008b12:	4621      	mov	r1, r4
 8008b14:	f7ff f9ba 	bl	8007e8c <quorem>
 8008b18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b20:	eba6 020a 	sub.w	r2, r6, sl
 8008b24:	4593      	cmp	fp, r2
 8008b26:	ddb4      	ble.n	8008a92 <_dtoa_r+0xaf2>
 8008b28:	9902      	ldr	r1, [sp, #8]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	220a      	movs	r2, #10
 8008b2e:	4648      	mov	r0, r9
 8008b30:	f000 f8b2 	bl	8008c98 <__multadd>
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	e7eb      	b.n	8008b10 <_dtoa_r+0xb70>
 8008b38:	08009e41 	.word	0x08009e41
 8008b3c:	08009dc5 	.word	0x08009dc5

08008b40 <_free_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4605      	mov	r5, r0
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d041      	beq.n	8008bcc <_free_r+0x8c>
 8008b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b4c:	1f0c      	subs	r4, r1, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bfb8      	it	lt
 8008b52:	18e4      	addlt	r4, r4, r3
 8008b54:	f7fe fa6a 	bl	800702c <__malloc_lock>
 8008b58:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd0 <_free_r+0x90>)
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	b933      	cbnz	r3, 8008b6c <_free_r+0x2c>
 8008b5e:	6063      	str	r3, [r4, #4]
 8008b60:	6014      	str	r4, [r2, #0]
 8008b62:	4628      	mov	r0, r5
 8008b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b68:	f7fe ba66 	b.w	8007038 <__malloc_unlock>
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d908      	bls.n	8008b82 <_free_r+0x42>
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	1821      	adds	r1, r4, r0
 8008b74:	428b      	cmp	r3, r1
 8008b76:	bf01      	itttt	eq
 8008b78:	6819      	ldreq	r1, [r3, #0]
 8008b7a:	685b      	ldreq	r3, [r3, #4]
 8008b7c:	1809      	addeq	r1, r1, r0
 8008b7e:	6021      	streq	r1, [r4, #0]
 8008b80:	e7ed      	b.n	8008b5e <_free_r+0x1e>
 8008b82:	461a      	mov	r2, r3
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	b10b      	cbz	r3, 8008b8c <_free_r+0x4c>
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	d9fa      	bls.n	8008b82 <_free_r+0x42>
 8008b8c:	6811      	ldr	r1, [r2, #0]
 8008b8e:	1850      	adds	r0, r2, r1
 8008b90:	42a0      	cmp	r0, r4
 8008b92:	d10b      	bne.n	8008bac <_free_r+0x6c>
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	4401      	add	r1, r0
 8008b98:	1850      	adds	r0, r2, r1
 8008b9a:	4283      	cmp	r3, r0
 8008b9c:	6011      	str	r1, [r2, #0]
 8008b9e:	d1e0      	bne.n	8008b62 <_free_r+0x22>
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	6053      	str	r3, [r2, #4]
 8008ba6:	4408      	add	r0, r1
 8008ba8:	6010      	str	r0, [r2, #0]
 8008baa:	e7da      	b.n	8008b62 <_free_r+0x22>
 8008bac:	d902      	bls.n	8008bb4 <_free_r+0x74>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	e7d6      	b.n	8008b62 <_free_r+0x22>
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	1821      	adds	r1, r4, r0
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	bf04      	itt	eq
 8008bbc:	6819      	ldreq	r1, [r3, #0]
 8008bbe:	685b      	ldreq	r3, [r3, #4]
 8008bc0:	6063      	str	r3, [r4, #4]
 8008bc2:	bf04      	itt	eq
 8008bc4:	1809      	addeq	r1, r1, r0
 8008bc6:	6021      	streq	r1, [r4, #0]
 8008bc8:	6054      	str	r4, [r2, #4]
 8008bca:	e7ca      	b.n	8008b62 <_free_r+0x22>
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	200005a4 	.word	0x200005a4

08008bd4 <_Balloc>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	69c6      	ldr	r6, [r0, #28]
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	b976      	cbnz	r6, 8008bfc <_Balloc+0x28>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7fe f97a 	bl	8006ed8 <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	61e0      	str	r0, [r4, #28]
 8008be8:	b920      	cbnz	r0, 8008bf4 <_Balloc+0x20>
 8008bea:	4b18      	ldr	r3, [pc, #96]	@ (8008c4c <_Balloc+0x78>)
 8008bec:	4818      	ldr	r0, [pc, #96]	@ (8008c50 <_Balloc+0x7c>)
 8008bee:	216b      	movs	r1, #107	@ 0x6b
 8008bf0:	f7ff f92e 	bl	8007e50 <__assert_func>
 8008bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf8:	6006      	str	r6, [r0, #0]
 8008bfa:	60c6      	str	r6, [r0, #12]
 8008bfc:	69e6      	ldr	r6, [r4, #28]
 8008bfe:	68f3      	ldr	r3, [r6, #12]
 8008c00:	b183      	cbz	r3, 8008c24 <_Balloc+0x50>
 8008c02:	69e3      	ldr	r3, [r4, #28]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c0a:	b9b8      	cbnz	r0, 8008c3c <_Balloc+0x68>
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c12:	1d72      	adds	r2, r6, #5
 8008c14:	0092      	lsls	r2, r2, #2
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fe15 	bl	8009846 <_calloc_r>
 8008c1c:	b160      	cbz	r0, 8008c38 <_Balloc+0x64>
 8008c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c22:	e00e      	b.n	8008c42 <_Balloc+0x6e>
 8008c24:	2221      	movs	r2, #33	@ 0x21
 8008c26:	2104      	movs	r1, #4
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fe0c 	bl	8009846 <_calloc_r>
 8008c2e:	69e3      	ldr	r3, [r4, #28]
 8008c30:	60f0      	str	r0, [r6, #12]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e4      	bne.n	8008c02 <_Balloc+0x2e>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	6802      	ldr	r2, [r0, #0]
 8008c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c42:	2300      	movs	r3, #0
 8008c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c48:	e7f7      	b.n	8008c3a <_Balloc+0x66>
 8008c4a:	bf00      	nop
 8008c4c:	08009dd2 	.word	0x08009dd2
 8008c50:	08009e52 	.word	0x08009e52

08008c54 <_Bfree>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	69c6      	ldr	r6, [r0, #28]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b976      	cbnz	r6, 8008c7c <_Bfree+0x28>
 8008c5e:	2010      	movs	r0, #16
 8008c60:	f7fe f93a 	bl	8006ed8 <malloc>
 8008c64:	4602      	mov	r2, r0
 8008c66:	61e8      	str	r0, [r5, #28]
 8008c68:	b920      	cbnz	r0, 8008c74 <_Bfree+0x20>
 8008c6a:	4b09      	ldr	r3, [pc, #36]	@ (8008c90 <_Bfree+0x3c>)
 8008c6c:	4809      	ldr	r0, [pc, #36]	@ (8008c94 <_Bfree+0x40>)
 8008c6e:	218f      	movs	r1, #143	@ 0x8f
 8008c70:	f7ff f8ee 	bl	8007e50 <__assert_func>
 8008c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c78:	6006      	str	r6, [r0, #0]
 8008c7a:	60c6      	str	r6, [r0, #12]
 8008c7c:	b13c      	cbz	r4, 8008c8e <_Bfree+0x3a>
 8008c7e:	69eb      	ldr	r3, [r5, #28]
 8008c80:	6862      	ldr	r2, [r4, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c88:	6021      	str	r1, [r4, #0]
 8008c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	08009dd2 	.word	0x08009dd2
 8008c94:	08009e52 	.word	0x08009e52

08008c98 <__multadd>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	690d      	ldr	r5, [r1, #16]
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	461e      	mov	r6, r3
 8008ca4:	f101 0c14 	add.w	ip, r1, #20
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f8dc 3000 	ldr.w	r3, [ip]
 8008cae:	b299      	uxth	r1, r3
 8008cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8008cb4:	0c1e      	lsrs	r6, r3, #16
 8008cb6:	0c0b      	lsrs	r3, r1, #16
 8008cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8008cbc:	b289      	uxth	r1, r1
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cc4:	4285      	cmp	r5, r0
 8008cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cce:	dcec      	bgt.n	8008caa <__multadd+0x12>
 8008cd0:	b30e      	cbz	r6, 8008d16 <__multadd+0x7e>
 8008cd2:	68a3      	ldr	r3, [r4, #8]
 8008cd4:	42ab      	cmp	r3, r5
 8008cd6:	dc19      	bgt.n	8008d0c <__multadd+0x74>
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	4638      	mov	r0, r7
 8008cdc:	3101      	adds	r1, #1
 8008cde:	f7ff ff79 	bl	8008bd4 <_Balloc>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	b928      	cbnz	r0, 8008cf2 <__multadd+0x5a>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <__multadd+0x84>)
 8008cea:	480d      	ldr	r0, [pc, #52]	@ (8008d20 <__multadd+0x88>)
 8008cec:	21ba      	movs	r1, #186	@ 0xba
 8008cee:	f7ff f8af 	bl	8007e50 <__assert_func>
 8008cf2:	6922      	ldr	r2, [r4, #16]
 8008cf4:	3202      	adds	r2, #2
 8008cf6:	f104 010c 	add.w	r1, r4, #12
 8008cfa:	0092      	lsls	r2, r2, #2
 8008cfc:	300c      	adds	r0, #12
 8008cfe:	f7ff f898 	bl	8007e32 <memcpy>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7ff ffa5 	bl	8008c54 <_Bfree>
 8008d0a:	4644      	mov	r4, r8
 8008d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d10:	3501      	adds	r5, #1
 8008d12:	615e      	str	r6, [r3, #20]
 8008d14:	6125      	str	r5, [r4, #16]
 8008d16:	4620      	mov	r0, r4
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	08009e41 	.word	0x08009e41
 8008d20:	08009e52 	.word	0x08009e52

08008d24 <__hi0bits>:
 8008d24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d28:	4603      	mov	r3, r0
 8008d2a:	bf36      	itet	cc
 8008d2c:	0403      	lslcc	r3, r0, #16
 8008d2e:	2000      	movcs	r0, #0
 8008d30:	2010      	movcc	r0, #16
 8008d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d36:	bf3c      	itt	cc
 8008d38:	021b      	lslcc	r3, r3, #8
 8008d3a:	3008      	addcc	r0, #8
 8008d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d40:	bf3c      	itt	cc
 8008d42:	011b      	lslcc	r3, r3, #4
 8008d44:	3004      	addcc	r0, #4
 8008d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4a:	bf3c      	itt	cc
 8008d4c:	009b      	lslcc	r3, r3, #2
 8008d4e:	3002      	addcc	r0, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	db05      	blt.n	8008d60 <__hi0bits+0x3c>
 8008d54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d58:	f100 0001 	add.w	r0, r0, #1
 8008d5c:	bf08      	it	eq
 8008d5e:	2020      	moveq	r0, #32
 8008d60:	4770      	bx	lr

08008d62 <__lo0bits>:
 8008d62:	6803      	ldr	r3, [r0, #0]
 8008d64:	4602      	mov	r2, r0
 8008d66:	f013 0007 	ands.w	r0, r3, #7
 8008d6a:	d00b      	beq.n	8008d84 <__lo0bits+0x22>
 8008d6c:	07d9      	lsls	r1, r3, #31
 8008d6e:	d421      	bmi.n	8008db4 <__lo0bits+0x52>
 8008d70:	0798      	lsls	r0, r3, #30
 8008d72:	bf49      	itett	mi
 8008d74:	085b      	lsrmi	r3, r3, #1
 8008d76:	089b      	lsrpl	r3, r3, #2
 8008d78:	2001      	movmi	r0, #1
 8008d7a:	6013      	strmi	r3, [r2, #0]
 8008d7c:	bf5c      	itt	pl
 8008d7e:	6013      	strpl	r3, [r2, #0]
 8008d80:	2002      	movpl	r0, #2
 8008d82:	4770      	bx	lr
 8008d84:	b299      	uxth	r1, r3
 8008d86:	b909      	cbnz	r1, 8008d8c <__lo0bits+0x2a>
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	b2d9      	uxtb	r1, r3
 8008d8e:	b909      	cbnz	r1, 8008d94 <__lo0bits+0x32>
 8008d90:	3008      	adds	r0, #8
 8008d92:	0a1b      	lsrs	r3, r3, #8
 8008d94:	0719      	lsls	r1, r3, #28
 8008d96:	bf04      	itt	eq
 8008d98:	091b      	lsreq	r3, r3, #4
 8008d9a:	3004      	addeq	r0, #4
 8008d9c:	0799      	lsls	r1, r3, #30
 8008d9e:	bf04      	itt	eq
 8008da0:	089b      	lsreq	r3, r3, #2
 8008da2:	3002      	addeq	r0, #2
 8008da4:	07d9      	lsls	r1, r3, #31
 8008da6:	d403      	bmi.n	8008db0 <__lo0bits+0x4e>
 8008da8:	085b      	lsrs	r3, r3, #1
 8008daa:	f100 0001 	add.w	r0, r0, #1
 8008dae:	d003      	beq.n	8008db8 <__lo0bits+0x56>
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	4770      	bx	lr
 8008db4:	2000      	movs	r0, #0
 8008db6:	4770      	bx	lr
 8008db8:	2020      	movs	r0, #32
 8008dba:	4770      	bx	lr

08008dbc <__i2b>:
 8008dbc:	b510      	push	{r4, lr}
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	f7ff ff07 	bl	8008bd4 <_Balloc>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	b928      	cbnz	r0, 8008dd6 <__i2b+0x1a>
 8008dca:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <__i2b+0x24>)
 8008dcc:	4805      	ldr	r0, [pc, #20]	@ (8008de4 <__i2b+0x28>)
 8008dce:	f240 1145 	movw	r1, #325	@ 0x145
 8008dd2:	f7ff f83d 	bl	8007e50 <__assert_func>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	6144      	str	r4, [r0, #20]
 8008dda:	6103      	str	r3, [r0, #16]
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	bf00      	nop
 8008de0:	08009e41 	.word	0x08009e41
 8008de4:	08009e52 	.word	0x08009e52

08008de8 <__multiply>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	4617      	mov	r7, r2
 8008dee:	690a      	ldr	r2, [r1, #16]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	bfa8      	it	ge
 8008df6:	463b      	movge	r3, r7
 8008df8:	4689      	mov	r9, r1
 8008dfa:	bfa4      	itt	ge
 8008dfc:	460f      	movge	r7, r1
 8008dfe:	4699      	movge	r9, r3
 8008e00:	693d      	ldr	r5, [r7, #16]
 8008e02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	eb05 060a 	add.w	r6, r5, sl
 8008e0e:	42b3      	cmp	r3, r6
 8008e10:	b085      	sub	sp, #20
 8008e12:	bfb8      	it	lt
 8008e14:	3101      	addlt	r1, #1
 8008e16:	f7ff fedd 	bl	8008bd4 <_Balloc>
 8008e1a:	b930      	cbnz	r0, 8008e2a <__multiply+0x42>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	4b41      	ldr	r3, [pc, #260]	@ (8008f24 <__multiply+0x13c>)
 8008e20:	4841      	ldr	r0, [pc, #260]	@ (8008f28 <__multiply+0x140>)
 8008e22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e26:	f7ff f813 	bl	8007e50 <__assert_func>
 8008e2a:	f100 0414 	add.w	r4, r0, #20
 8008e2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e32:	4623      	mov	r3, r4
 8008e34:	2200      	movs	r2, #0
 8008e36:	4573      	cmp	r3, lr
 8008e38:	d320      	bcc.n	8008e7c <__multiply+0x94>
 8008e3a:	f107 0814 	add.w	r8, r7, #20
 8008e3e:	f109 0114 	add.w	r1, r9, #20
 8008e42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	1beb      	subs	r3, r5, r7
 8008e4e:	3b15      	subs	r3, #21
 8008e50:	f023 0303 	bic.w	r3, r3, #3
 8008e54:	3304      	adds	r3, #4
 8008e56:	3715      	adds	r7, #21
 8008e58:	42bd      	cmp	r5, r7
 8008e5a:	bf38      	it	cc
 8008e5c:	2304      	movcc	r3, #4
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	9103      	str	r1, [sp, #12]
 8008e64:	428b      	cmp	r3, r1
 8008e66:	d80c      	bhi.n	8008e82 <__multiply+0x9a>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	dd03      	ble.n	8008e74 <__multiply+0x8c>
 8008e6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d055      	beq.n	8008f20 <__multiply+0x138>
 8008e74:	6106      	str	r6, [r0, #16]
 8008e76:	b005      	add	sp, #20
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	f843 2b04 	str.w	r2, [r3], #4
 8008e80:	e7d9      	b.n	8008e36 <__multiply+0x4e>
 8008e82:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e86:	f1ba 0f00 	cmp.w	sl, #0
 8008e8a:	d01f      	beq.n	8008ecc <__multiply+0xe4>
 8008e8c:	46c4      	mov	ip, r8
 8008e8e:	46a1      	mov	r9, r4
 8008e90:	2700      	movs	r7, #0
 8008e92:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e96:	f8d9 3000 	ldr.w	r3, [r9]
 8008e9a:	fa1f fb82 	uxth.w	fp, r2
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ea4:	443b      	add	r3, r7
 8008ea6:	f8d9 7000 	ldr.w	r7, [r9]
 8008eaa:	0c12      	lsrs	r2, r2, #16
 8008eac:	0c3f      	lsrs	r7, r7, #16
 8008eae:	fb0a 7202 	mla	r2, sl, r2, r7
 8008eb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ebc:	4565      	cmp	r5, ip
 8008ebe:	f849 3b04 	str.w	r3, [r9], #4
 8008ec2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008ec6:	d8e4      	bhi.n	8008e92 <__multiply+0xaa>
 8008ec8:	9b01      	ldr	r3, [sp, #4]
 8008eca:	50e7      	str	r7, [r4, r3]
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ed2:	3104      	adds	r1, #4
 8008ed4:	f1b9 0f00 	cmp.w	r9, #0
 8008ed8:	d020      	beq.n	8008f1c <__multiply+0x134>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	4647      	mov	r7, r8
 8008ede:	46a4      	mov	ip, r4
 8008ee0:	f04f 0a00 	mov.w	sl, #0
 8008ee4:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ee8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008eec:	fb09 220b 	mla	r2, r9, fp, r2
 8008ef0:	4452      	add	r2, sl
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef8:	f84c 3b04 	str.w	r3, [ip], #4
 8008efc:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f04:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f08:	fb09 330a 	mla	r3, r9, sl, r3
 8008f0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f10:	42bd      	cmp	r5, r7
 8008f12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f16:	d8e5      	bhi.n	8008ee4 <__multiply+0xfc>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	50a3      	str	r3, [r4, r2]
 8008f1c:	3404      	adds	r4, #4
 8008f1e:	e79f      	b.n	8008e60 <__multiply+0x78>
 8008f20:	3e01      	subs	r6, #1
 8008f22:	e7a1      	b.n	8008e68 <__multiply+0x80>
 8008f24:	08009e41 	.word	0x08009e41
 8008f28:	08009e52 	.word	0x08009e52

08008f2c <__pow5mult>:
 8008f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f30:	4615      	mov	r5, r2
 8008f32:	f012 0203 	ands.w	r2, r2, #3
 8008f36:	4607      	mov	r7, r0
 8008f38:	460e      	mov	r6, r1
 8008f3a:	d007      	beq.n	8008f4c <__pow5mult+0x20>
 8008f3c:	4c25      	ldr	r4, [pc, #148]	@ (8008fd4 <__pow5mult+0xa8>)
 8008f3e:	3a01      	subs	r2, #1
 8008f40:	2300      	movs	r3, #0
 8008f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f46:	f7ff fea7 	bl	8008c98 <__multadd>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	10ad      	asrs	r5, r5, #2
 8008f4e:	d03d      	beq.n	8008fcc <__pow5mult+0xa0>
 8008f50:	69fc      	ldr	r4, [r7, #28]
 8008f52:	b97c      	cbnz	r4, 8008f74 <__pow5mult+0x48>
 8008f54:	2010      	movs	r0, #16
 8008f56:	f7fd ffbf 	bl	8006ed8 <malloc>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	61f8      	str	r0, [r7, #28]
 8008f5e:	b928      	cbnz	r0, 8008f6c <__pow5mult+0x40>
 8008f60:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd8 <__pow5mult+0xac>)
 8008f62:	481e      	ldr	r0, [pc, #120]	@ (8008fdc <__pow5mult+0xb0>)
 8008f64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f68:	f7fe ff72 	bl	8007e50 <__assert_func>
 8008f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f70:	6004      	str	r4, [r0, #0]
 8008f72:	60c4      	str	r4, [r0, #12]
 8008f74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f7c:	b94c      	cbnz	r4, 8008f92 <__pow5mult+0x66>
 8008f7e:	f240 2171 	movw	r1, #625	@ 0x271
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ff1a 	bl	8008dbc <__i2b>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f8e:	4604      	mov	r4, r0
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	f04f 0900 	mov.w	r9, #0
 8008f96:	07eb      	lsls	r3, r5, #31
 8008f98:	d50a      	bpl.n	8008fb0 <__pow5mult+0x84>
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f7ff ff22 	bl	8008de8 <__multiply>
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff fe53 	bl	8008c54 <_Bfree>
 8008fae:	4646      	mov	r6, r8
 8008fb0:	106d      	asrs	r5, r5, #1
 8008fb2:	d00b      	beq.n	8008fcc <__pow5mult+0xa0>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	b938      	cbnz	r0, 8008fc8 <__pow5mult+0x9c>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f7ff ff13 	bl	8008de8 <__multiply>
 8008fc2:	6020      	str	r0, [r4, #0]
 8008fc4:	f8c0 9000 	str.w	r9, [r0]
 8008fc8:	4604      	mov	r4, r0
 8008fca:	e7e4      	b.n	8008f96 <__pow5mult+0x6a>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	bf00      	nop
 8008fd4:	08009ec8 	.word	0x08009ec8
 8008fd8:	08009dd2 	.word	0x08009dd2
 8008fdc:	08009e52 	.word	0x08009e52

08008fe0 <__lshift>:
 8008fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	6849      	ldr	r1, [r1, #4]
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	4691      	mov	r9, r2
 8008ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ff8:	f108 0601 	add.w	r6, r8, #1
 8008ffc:	42b3      	cmp	r3, r6
 8008ffe:	db0b      	blt.n	8009018 <__lshift+0x38>
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff fde7 	bl	8008bd4 <_Balloc>
 8009006:	4605      	mov	r5, r0
 8009008:	b948      	cbnz	r0, 800901e <__lshift+0x3e>
 800900a:	4602      	mov	r2, r0
 800900c:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <__lshift+0xd0>)
 800900e:	4829      	ldr	r0, [pc, #164]	@ (80090b4 <__lshift+0xd4>)
 8009010:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009014:	f7fe ff1c 	bl	8007e50 <__assert_func>
 8009018:	3101      	adds	r1, #1
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	e7ee      	b.n	8008ffc <__lshift+0x1c>
 800901e:	2300      	movs	r3, #0
 8009020:	f100 0114 	add.w	r1, r0, #20
 8009024:	f100 0210 	add.w	r2, r0, #16
 8009028:	4618      	mov	r0, r3
 800902a:	4553      	cmp	r3, sl
 800902c:	db33      	blt.n	8009096 <__lshift+0xb6>
 800902e:	6920      	ldr	r0, [r4, #16]
 8009030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009034:	f104 0314 	add.w	r3, r4, #20
 8009038:	f019 091f 	ands.w	r9, r9, #31
 800903c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009044:	d02b      	beq.n	800909e <__lshift+0xbe>
 8009046:	f1c9 0e20 	rsb	lr, r9, #32
 800904a:	468a      	mov	sl, r1
 800904c:	2200      	movs	r2, #0
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	fa00 f009 	lsl.w	r0, r0, r9
 8009054:	4310      	orrs	r0, r2
 8009056:	f84a 0b04 	str.w	r0, [sl], #4
 800905a:	f853 2b04 	ldr.w	r2, [r3], #4
 800905e:	459c      	cmp	ip, r3
 8009060:	fa22 f20e 	lsr.w	r2, r2, lr
 8009064:	d8f3      	bhi.n	800904e <__lshift+0x6e>
 8009066:	ebac 0304 	sub.w	r3, ip, r4
 800906a:	3b15      	subs	r3, #21
 800906c:	f023 0303 	bic.w	r3, r3, #3
 8009070:	3304      	adds	r3, #4
 8009072:	f104 0015 	add.w	r0, r4, #21
 8009076:	4560      	cmp	r0, ip
 8009078:	bf88      	it	hi
 800907a:	2304      	movhi	r3, #4
 800907c:	50ca      	str	r2, [r1, r3]
 800907e:	b10a      	cbz	r2, 8009084 <__lshift+0xa4>
 8009080:	f108 0602 	add.w	r6, r8, #2
 8009084:	3e01      	subs	r6, #1
 8009086:	4638      	mov	r0, r7
 8009088:	612e      	str	r6, [r5, #16]
 800908a:	4621      	mov	r1, r4
 800908c:	f7ff fde2 	bl	8008c54 <_Bfree>
 8009090:	4628      	mov	r0, r5
 8009092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009096:	f842 0f04 	str.w	r0, [r2, #4]!
 800909a:	3301      	adds	r3, #1
 800909c:	e7c5      	b.n	800902a <__lshift+0x4a>
 800909e:	3904      	subs	r1, #4
 80090a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090a8:	459c      	cmp	ip, r3
 80090aa:	d8f9      	bhi.n	80090a0 <__lshift+0xc0>
 80090ac:	e7ea      	b.n	8009084 <__lshift+0xa4>
 80090ae:	bf00      	nop
 80090b0:	08009e41 	.word	0x08009e41
 80090b4:	08009e52 	.word	0x08009e52

080090b8 <__mcmp>:
 80090b8:	690a      	ldr	r2, [r1, #16]
 80090ba:	4603      	mov	r3, r0
 80090bc:	6900      	ldr	r0, [r0, #16]
 80090be:	1a80      	subs	r0, r0, r2
 80090c0:	b530      	push	{r4, r5, lr}
 80090c2:	d10e      	bne.n	80090e2 <__mcmp+0x2a>
 80090c4:	3314      	adds	r3, #20
 80090c6:	3114      	adds	r1, #20
 80090c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090d8:	4295      	cmp	r5, r2
 80090da:	d003      	beq.n	80090e4 <__mcmp+0x2c>
 80090dc:	d205      	bcs.n	80090ea <__mcmp+0x32>
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	bd30      	pop	{r4, r5, pc}
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d3f3      	bcc.n	80090d0 <__mcmp+0x18>
 80090e8:	e7fb      	b.n	80090e2 <__mcmp+0x2a>
 80090ea:	2001      	movs	r0, #1
 80090ec:	e7f9      	b.n	80090e2 <__mcmp+0x2a>
	...

080090f0 <__mdiff>:
 80090f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	4689      	mov	r9, r1
 80090f6:	4606      	mov	r6, r0
 80090f8:	4611      	mov	r1, r2
 80090fa:	4648      	mov	r0, r9
 80090fc:	4614      	mov	r4, r2
 80090fe:	f7ff ffdb 	bl	80090b8 <__mcmp>
 8009102:	1e05      	subs	r5, r0, #0
 8009104:	d112      	bne.n	800912c <__mdiff+0x3c>
 8009106:	4629      	mov	r1, r5
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff fd63 	bl	8008bd4 <_Balloc>
 800910e:	4602      	mov	r2, r0
 8009110:	b928      	cbnz	r0, 800911e <__mdiff+0x2e>
 8009112:	4b3f      	ldr	r3, [pc, #252]	@ (8009210 <__mdiff+0x120>)
 8009114:	f240 2137 	movw	r1, #567	@ 0x237
 8009118:	483e      	ldr	r0, [pc, #248]	@ (8009214 <__mdiff+0x124>)
 800911a:	f7fe fe99 	bl	8007e50 <__assert_func>
 800911e:	2301      	movs	r3, #1
 8009120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009124:	4610      	mov	r0, r2
 8009126:	b003      	add	sp, #12
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	bfbc      	itt	lt
 800912e:	464b      	movlt	r3, r9
 8009130:	46a1      	movlt	r9, r4
 8009132:	4630      	mov	r0, r6
 8009134:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009138:	bfba      	itte	lt
 800913a:	461c      	movlt	r4, r3
 800913c:	2501      	movlt	r5, #1
 800913e:	2500      	movge	r5, #0
 8009140:	f7ff fd48 	bl	8008bd4 <_Balloc>
 8009144:	4602      	mov	r2, r0
 8009146:	b918      	cbnz	r0, 8009150 <__mdiff+0x60>
 8009148:	4b31      	ldr	r3, [pc, #196]	@ (8009210 <__mdiff+0x120>)
 800914a:	f240 2145 	movw	r1, #581	@ 0x245
 800914e:	e7e3      	b.n	8009118 <__mdiff+0x28>
 8009150:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009154:	6926      	ldr	r6, [r4, #16]
 8009156:	60c5      	str	r5, [r0, #12]
 8009158:	f109 0310 	add.w	r3, r9, #16
 800915c:	f109 0514 	add.w	r5, r9, #20
 8009160:	f104 0e14 	add.w	lr, r4, #20
 8009164:	f100 0b14 	add.w	fp, r0, #20
 8009168:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800916c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	46d9      	mov	r9, fp
 8009174:	f04f 0c00 	mov.w	ip, #0
 8009178:	9b01      	ldr	r3, [sp, #4]
 800917a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800917e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	fa1f f38a 	uxth.w	r3, sl
 8009188:	4619      	mov	r1, r3
 800918a:	b283      	uxth	r3, r0
 800918c:	1acb      	subs	r3, r1, r3
 800918e:	0c00      	lsrs	r0, r0, #16
 8009190:	4463      	add	r3, ip
 8009192:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009196:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800919a:	b29b      	uxth	r3, r3
 800919c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091a0:	4576      	cmp	r6, lr
 80091a2:	f849 3b04 	str.w	r3, [r9], #4
 80091a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091aa:	d8e5      	bhi.n	8009178 <__mdiff+0x88>
 80091ac:	1b33      	subs	r3, r6, r4
 80091ae:	3b15      	subs	r3, #21
 80091b0:	f023 0303 	bic.w	r3, r3, #3
 80091b4:	3415      	adds	r4, #21
 80091b6:	3304      	adds	r3, #4
 80091b8:	42a6      	cmp	r6, r4
 80091ba:	bf38      	it	cc
 80091bc:	2304      	movcc	r3, #4
 80091be:	441d      	add	r5, r3
 80091c0:	445b      	add	r3, fp
 80091c2:	461e      	mov	r6, r3
 80091c4:	462c      	mov	r4, r5
 80091c6:	4544      	cmp	r4, r8
 80091c8:	d30e      	bcc.n	80091e8 <__mdiff+0xf8>
 80091ca:	f108 0103 	add.w	r1, r8, #3
 80091ce:	1b49      	subs	r1, r1, r5
 80091d0:	f021 0103 	bic.w	r1, r1, #3
 80091d4:	3d03      	subs	r5, #3
 80091d6:	45a8      	cmp	r8, r5
 80091d8:	bf38      	it	cc
 80091da:	2100      	movcc	r1, #0
 80091dc:	440b      	add	r3, r1
 80091de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091e2:	b191      	cbz	r1, 800920a <__mdiff+0x11a>
 80091e4:	6117      	str	r7, [r2, #16]
 80091e6:	e79d      	b.n	8009124 <__mdiff+0x34>
 80091e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80091ec:	46e6      	mov	lr, ip
 80091ee:	0c08      	lsrs	r0, r1, #16
 80091f0:	fa1c fc81 	uxtah	ip, ip, r1
 80091f4:	4471      	add	r1, lr
 80091f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091fa:	b289      	uxth	r1, r1
 80091fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009200:	f846 1b04 	str.w	r1, [r6], #4
 8009204:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009208:	e7dd      	b.n	80091c6 <__mdiff+0xd6>
 800920a:	3f01      	subs	r7, #1
 800920c:	e7e7      	b.n	80091de <__mdiff+0xee>
 800920e:	bf00      	nop
 8009210:	08009e41 	.word	0x08009e41
 8009214:	08009e52 	.word	0x08009e52

08009218 <__d2b>:
 8009218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800921c:	460f      	mov	r7, r1
 800921e:	2101      	movs	r1, #1
 8009220:	ec59 8b10 	vmov	r8, r9, d0
 8009224:	4616      	mov	r6, r2
 8009226:	f7ff fcd5 	bl	8008bd4 <_Balloc>
 800922a:	4604      	mov	r4, r0
 800922c:	b930      	cbnz	r0, 800923c <__d2b+0x24>
 800922e:	4602      	mov	r2, r0
 8009230:	4b23      	ldr	r3, [pc, #140]	@ (80092c0 <__d2b+0xa8>)
 8009232:	4824      	ldr	r0, [pc, #144]	@ (80092c4 <__d2b+0xac>)
 8009234:	f240 310f 	movw	r1, #783	@ 0x30f
 8009238:	f7fe fe0a 	bl	8007e50 <__assert_func>
 800923c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009244:	b10d      	cbz	r5, 800924a <__d2b+0x32>
 8009246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	f1b8 0300 	subs.w	r3, r8, #0
 8009250:	d023      	beq.n	800929a <__d2b+0x82>
 8009252:	4668      	mov	r0, sp
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	f7ff fd84 	bl	8008d62 <__lo0bits>
 800925a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800925e:	b1d0      	cbz	r0, 8009296 <__d2b+0x7e>
 8009260:	f1c0 0320 	rsb	r3, r0, #32
 8009264:	fa02 f303 	lsl.w	r3, r2, r3
 8009268:	430b      	orrs	r3, r1
 800926a:	40c2      	lsrs	r2, r0
 800926c:	6163      	str	r3, [r4, #20]
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	61a3      	str	r3, [r4, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	bf0c      	ite	eq
 8009278:	2201      	moveq	r2, #1
 800927a:	2202      	movne	r2, #2
 800927c:	6122      	str	r2, [r4, #16]
 800927e:	b1a5      	cbz	r5, 80092aa <__d2b+0x92>
 8009280:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009284:	4405      	add	r5, r0
 8009286:	603d      	str	r5, [r7, #0]
 8009288:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800928c:	6030      	str	r0, [r6, #0]
 800928e:	4620      	mov	r0, r4
 8009290:	b003      	add	sp, #12
 8009292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009296:	6161      	str	r1, [r4, #20]
 8009298:	e7ea      	b.n	8009270 <__d2b+0x58>
 800929a:	a801      	add	r0, sp, #4
 800929c:	f7ff fd61 	bl	8008d62 <__lo0bits>
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	6163      	str	r3, [r4, #20]
 80092a4:	3020      	adds	r0, #32
 80092a6:	2201      	movs	r2, #1
 80092a8:	e7e8      	b.n	800927c <__d2b+0x64>
 80092aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092b2:	6038      	str	r0, [r7, #0]
 80092b4:	6918      	ldr	r0, [r3, #16]
 80092b6:	f7ff fd35 	bl	8008d24 <__hi0bits>
 80092ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092be:	e7e5      	b.n	800928c <__d2b+0x74>
 80092c0:	08009e41 	.word	0x08009e41
 80092c4:	08009e52 	.word	0x08009e52

080092c8 <__sfputc_r>:
 80092c8:	6893      	ldr	r3, [r2, #8]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	b410      	push	{r4}
 80092d0:	6093      	str	r3, [r2, #8]
 80092d2:	da08      	bge.n	80092e6 <__sfputc_r+0x1e>
 80092d4:	6994      	ldr	r4, [r2, #24]
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	db01      	blt.n	80092de <__sfputc_r+0x16>
 80092da:	290a      	cmp	r1, #10
 80092dc:	d103      	bne.n	80092e6 <__sfputc_r+0x1e>
 80092de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e2:	f7fe bc82 	b.w	8007bea <__swbuf_r>
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	1c58      	adds	r0, r3, #1
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	7019      	strb	r1, [r3, #0]
 80092ee:	4608      	mov	r0, r1
 80092f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <__sfputs_r>:
 80092f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	18d5      	adds	r5, r2, r3
 8009300:	42ac      	cmp	r4, r5
 8009302:	d101      	bne.n	8009308 <__sfputs_r+0x12>
 8009304:	2000      	movs	r0, #0
 8009306:	e007      	b.n	8009318 <__sfputs_r+0x22>
 8009308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930c:	463a      	mov	r2, r7
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ffda 	bl	80092c8 <__sfputc_r>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d1f3      	bne.n	8009300 <__sfputs_r+0xa>
 8009318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800931c <_vfiprintf_r>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	460d      	mov	r5, r1
 8009322:	b09d      	sub	sp, #116	@ 0x74
 8009324:	4614      	mov	r4, r2
 8009326:	4698      	mov	r8, r3
 8009328:	4606      	mov	r6, r0
 800932a:	b118      	cbz	r0, 8009334 <_vfiprintf_r+0x18>
 800932c:	6a03      	ldr	r3, [r0, #32]
 800932e:	b90b      	cbnz	r3, 8009334 <_vfiprintf_r+0x18>
 8009330:	f7fe fb6a 	bl	8007a08 <__sinit>
 8009334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d405      	bmi.n	8009346 <_vfiprintf_r+0x2a>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	059a      	lsls	r2, r3, #22
 800933e:	d402      	bmi.n	8009346 <_vfiprintf_r+0x2a>
 8009340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009342:	f7fe fd74 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	071b      	lsls	r3, r3, #28
 800934a:	d501      	bpl.n	8009350 <_vfiprintf_r+0x34>
 800934c:	692b      	ldr	r3, [r5, #16]
 800934e:	b99b      	cbnz	r3, 8009378 <_vfiprintf_r+0x5c>
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7fe fc88 	bl	8007c68 <__swsetup_r>
 8009358:	b170      	cbz	r0, 8009378 <_vfiprintf_r+0x5c>
 800935a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800935c:	07dc      	lsls	r4, r3, #31
 800935e:	d504      	bpl.n	800936a <_vfiprintf_r+0x4e>
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	b01d      	add	sp, #116	@ 0x74
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	89ab      	ldrh	r3, [r5, #12]
 800936c:	0598      	lsls	r0, r3, #22
 800936e:	d4f7      	bmi.n	8009360 <_vfiprintf_r+0x44>
 8009370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009372:	f7fe fd5d 	bl	8007e30 <__retarget_lock_release_recursive>
 8009376:	e7f3      	b.n	8009360 <_vfiprintf_r+0x44>
 8009378:	2300      	movs	r3, #0
 800937a:	9309      	str	r3, [sp, #36]	@ 0x24
 800937c:	2320      	movs	r3, #32
 800937e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009382:	f8cd 800c 	str.w	r8, [sp, #12]
 8009386:	2330      	movs	r3, #48	@ 0x30
 8009388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009538 <_vfiprintf_r+0x21c>
 800938c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009390:	f04f 0901 	mov.w	r9, #1
 8009394:	4623      	mov	r3, r4
 8009396:	469a      	mov	sl, r3
 8009398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800939c:	b10a      	cbz	r2, 80093a2 <_vfiprintf_r+0x86>
 800939e:	2a25      	cmp	r2, #37	@ 0x25
 80093a0:	d1f9      	bne.n	8009396 <_vfiprintf_r+0x7a>
 80093a2:	ebba 0b04 	subs.w	fp, sl, r4
 80093a6:	d00b      	beq.n	80093c0 <_vfiprintf_r+0xa4>
 80093a8:	465b      	mov	r3, fp
 80093aa:	4622      	mov	r2, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7ff ffa1 	bl	80092f6 <__sfputs_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	f000 80a7 	beq.w	8009508 <_vfiprintf_r+0x1ec>
 80093ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093bc:	445a      	add	r2, fp
 80093be:	9209      	str	r2, [sp, #36]	@ 0x24
 80093c0:	f89a 3000 	ldrb.w	r3, [sl]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 809f 	beq.w	8009508 <_vfiprintf_r+0x1ec>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d4:	f10a 0a01 	add.w	sl, sl, #1
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	9307      	str	r3, [sp, #28]
 80093dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80093e2:	4654      	mov	r4, sl
 80093e4:	2205      	movs	r2, #5
 80093e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ea:	4853      	ldr	r0, [pc, #332]	@ (8009538 <_vfiprintf_r+0x21c>)
 80093ec:	f7f6 fef0 	bl	80001d0 <memchr>
 80093f0:	9a04      	ldr	r2, [sp, #16]
 80093f2:	b9d8      	cbnz	r0, 800942c <_vfiprintf_r+0x110>
 80093f4:	06d1      	lsls	r1, r2, #27
 80093f6:	bf44      	itt	mi
 80093f8:	2320      	movmi	r3, #32
 80093fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093fe:	0713      	lsls	r3, r2, #28
 8009400:	bf44      	itt	mi
 8009402:	232b      	movmi	r3, #43	@ 0x2b
 8009404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009408:	f89a 3000 	ldrb.w	r3, [sl]
 800940c:	2b2a      	cmp	r3, #42	@ 0x2a
 800940e:	d015      	beq.n	800943c <_vfiprintf_r+0x120>
 8009410:	9a07      	ldr	r2, [sp, #28]
 8009412:	4654      	mov	r4, sl
 8009414:	2000      	movs	r0, #0
 8009416:	f04f 0c0a 	mov.w	ip, #10
 800941a:	4621      	mov	r1, r4
 800941c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009420:	3b30      	subs	r3, #48	@ 0x30
 8009422:	2b09      	cmp	r3, #9
 8009424:	d94b      	bls.n	80094be <_vfiprintf_r+0x1a2>
 8009426:	b1b0      	cbz	r0, 8009456 <_vfiprintf_r+0x13a>
 8009428:	9207      	str	r2, [sp, #28]
 800942a:	e014      	b.n	8009456 <_vfiprintf_r+0x13a>
 800942c:	eba0 0308 	sub.w	r3, r0, r8
 8009430:	fa09 f303 	lsl.w	r3, r9, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	46a2      	mov	sl, r4
 800943a:	e7d2      	b.n	80093e2 <_vfiprintf_r+0xc6>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	1d19      	adds	r1, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	9103      	str	r1, [sp, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfbb      	ittet	lt
 8009448:	425b      	neglt	r3, r3
 800944a:	f042 0202 	orrlt.w	r2, r2, #2
 800944e:	9307      	strge	r3, [sp, #28]
 8009450:	9307      	strlt	r3, [sp, #28]
 8009452:	bfb8      	it	lt
 8009454:	9204      	strlt	r2, [sp, #16]
 8009456:	7823      	ldrb	r3, [r4, #0]
 8009458:	2b2e      	cmp	r3, #46	@ 0x2e
 800945a:	d10a      	bne.n	8009472 <_vfiprintf_r+0x156>
 800945c:	7863      	ldrb	r3, [r4, #1]
 800945e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009460:	d132      	bne.n	80094c8 <_vfiprintf_r+0x1ac>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	1d1a      	adds	r2, r3, #4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	9203      	str	r2, [sp, #12]
 800946a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800946e:	3402      	adds	r4, #2
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009548 <_vfiprintf_r+0x22c>
 8009476:	7821      	ldrb	r1, [r4, #0]
 8009478:	2203      	movs	r2, #3
 800947a:	4650      	mov	r0, sl
 800947c:	f7f6 fea8 	bl	80001d0 <memchr>
 8009480:	b138      	cbz	r0, 8009492 <_vfiprintf_r+0x176>
 8009482:	9b04      	ldr	r3, [sp, #16]
 8009484:	eba0 000a 	sub.w	r0, r0, sl
 8009488:	2240      	movs	r2, #64	@ 0x40
 800948a:	4082      	lsls	r2, r0
 800948c:	4313      	orrs	r3, r2
 800948e:	3401      	adds	r4, #1
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009496:	4829      	ldr	r0, [pc, #164]	@ (800953c <_vfiprintf_r+0x220>)
 8009498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800949c:	2206      	movs	r2, #6
 800949e:	f7f6 fe97 	bl	80001d0 <memchr>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d03f      	beq.n	8009526 <_vfiprintf_r+0x20a>
 80094a6:	4b26      	ldr	r3, [pc, #152]	@ (8009540 <_vfiprintf_r+0x224>)
 80094a8:	bb1b      	cbnz	r3, 80094f2 <_vfiprintf_r+0x1d6>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	3307      	adds	r3, #7
 80094ae:	f023 0307 	bic.w	r3, r3, #7
 80094b2:	3308      	adds	r3, #8
 80094b4:	9303      	str	r3, [sp, #12]
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	443b      	add	r3, r7
 80094ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80094bc:	e76a      	b.n	8009394 <_vfiprintf_r+0x78>
 80094be:	fb0c 3202 	mla	r2, ip, r2, r3
 80094c2:	460c      	mov	r4, r1
 80094c4:	2001      	movs	r0, #1
 80094c6:	e7a8      	b.n	800941a <_vfiprintf_r+0xfe>
 80094c8:	2300      	movs	r3, #0
 80094ca:	3401      	adds	r4, #1
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	4619      	mov	r1, r3
 80094d0:	f04f 0c0a 	mov.w	ip, #10
 80094d4:	4620      	mov	r0, r4
 80094d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094da:	3a30      	subs	r2, #48	@ 0x30
 80094dc:	2a09      	cmp	r2, #9
 80094de:	d903      	bls.n	80094e8 <_vfiprintf_r+0x1cc>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0c6      	beq.n	8009472 <_vfiprintf_r+0x156>
 80094e4:	9105      	str	r1, [sp, #20]
 80094e6:	e7c4      	b.n	8009472 <_vfiprintf_r+0x156>
 80094e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ec:	4604      	mov	r4, r0
 80094ee:	2301      	movs	r3, #1
 80094f0:	e7f0      	b.n	80094d4 <_vfiprintf_r+0x1b8>
 80094f2:	ab03      	add	r3, sp, #12
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	462a      	mov	r2, r5
 80094f8:	4b12      	ldr	r3, [pc, #72]	@ (8009544 <_vfiprintf_r+0x228>)
 80094fa:	a904      	add	r1, sp, #16
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7fd fe41 	bl	8007184 <_printf_float>
 8009502:	4607      	mov	r7, r0
 8009504:	1c78      	adds	r0, r7, #1
 8009506:	d1d6      	bne.n	80094b6 <_vfiprintf_r+0x19a>
 8009508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800950a:	07d9      	lsls	r1, r3, #31
 800950c:	d405      	bmi.n	800951a <_vfiprintf_r+0x1fe>
 800950e:	89ab      	ldrh	r3, [r5, #12]
 8009510:	059a      	lsls	r2, r3, #22
 8009512:	d402      	bmi.n	800951a <_vfiprintf_r+0x1fe>
 8009514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009516:	f7fe fc8b 	bl	8007e30 <__retarget_lock_release_recursive>
 800951a:	89ab      	ldrh	r3, [r5, #12]
 800951c:	065b      	lsls	r3, r3, #25
 800951e:	f53f af1f 	bmi.w	8009360 <_vfiprintf_r+0x44>
 8009522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009524:	e71e      	b.n	8009364 <_vfiprintf_r+0x48>
 8009526:	ab03      	add	r3, sp, #12
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	462a      	mov	r2, r5
 800952c:	4b05      	ldr	r3, [pc, #20]	@ (8009544 <_vfiprintf_r+0x228>)
 800952e:	a904      	add	r1, sp, #16
 8009530:	4630      	mov	r0, r6
 8009532:	f7fe f8bf 	bl	80076b4 <_printf_i>
 8009536:	e7e4      	b.n	8009502 <_vfiprintf_r+0x1e6>
 8009538:	08009eab 	.word	0x08009eab
 800953c:	08009eb5 	.word	0x08009eb5
 8009540:	08007185 	.word	0x08007185
 8009544:	080092f7 	.word	0x080092f7
 8009548:	08009eb1 	.word	0x08009eb1

0800954c <__sflush_r>:
 800954c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009554:	0716      	lsls	r6, r2, #28
 8009556:	4605      	mov	r5, r0
 8009558:	460c      	mov	r4, r1
 800955a:	d454      	bmi.n	8009606 <__sflush_r+0xba>
 800955c:	684b      	ldr	r3, [r1, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	dc02      	bgt.n	8009568 <__sflush_r+0x1c>
 8009562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd48      	ble.n	80095fa <__sflush_r+0xae>
 8009568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800956a:	2e00      	cmp	r6, #0
 800956c:	d045      	beq.n	80095fa <__sflush_r+0xae>
 800956e:	2300      	movs	r3, #0
 8009570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009574:	682f      	ldr	r7, [r5, #0]
 8009576:	6a21      	ldr	r1, [r4, #32]
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	d030      	beq.n	80095de <__sflush_r+0x92>
 800957c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	0759      	lsls	r1, r3, #29
 8009582:	d505      	bpl.n	8009590 <__sflush_r+0x44>
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	1ad2      	subs	r2, r2, r3
 8009588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800958a:	b10b      	cbz	r3, 8009590 <__sflush_r+0x44>
 800958c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	2300      	movs	r3, #0
 8009592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009594:	6a21      	ldr	r1, [r4, #32]
 8009596:	4628      	mov	r0, r5
 8009598:	47b0      	blx	r6
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	d106      	bne.n	80095ae <__sflush_r+0x62>
 80095a0:	6829      	ldr	r1, [r5, #0]
 80095a2:	291d      	cmp	r1, #29
 80095a4:	d82b      	bhi.n	80095fe <__sflush_r+0xb2>
 80095a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009650 <__sflush_r+0x104>)
 80095a8:	40ca      	lsrs	r2, r1
 80095aa:	07d6      	lsls	r6, r2, #31
 80095ac:	d527      	bpl.n	80095fe <__sflush_r+0xb2>
 80095ae:	2200      	movs	r2, #0
 80095b0:	6062      	str	r2, [r4, #4]
 80095b2:	04d9      	lsls	r1, r3, #19
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	d504      	bpl.n	80095c4 <__sflush_r+0x78>
 80095ba:	1c42      	adds	r2, r0, #1
 80095bc:	d101      	bne.n	80095c2 <__sflush_r+0x76>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b903      	cbnz	r3, 80095c4 <__sflush_r+0x78>
 80095c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80095c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	b1b9      	cbz	r1, 80095fa <__sflush_r+0xae>
 80095ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095ce:	4299      	cmp	r1, r3
 80095d0:	d002      	beq.n	80095d8 <__sflush_r+0x8c>
 80095d2:	4628      	mov	r0, r5
 80095d4:	f7ff fab4 	bl	8008b40 <_free_r>
 80095d8:	2300      	movs	r3, #0
 80095da:	6363      	str	r3, [r4, #52]	@ 0x34
 80095dc:	e00d      	b.n	80095fa <__sflush_r+0xae>
 80095de:	2301      	movs	r3, #1
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b0      	blx	r6
 80095e4:	4602      	mov	r2, r0
 80095e6:	1c50      	adds	r0, r2, #1
 80095e8:	d1c9      	bne.n	800957e <__sflush_r+0x32>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0c6      	beq.n	800957e <__sflush_r+0x32>
 80095f0:	2b1d      	cmp	r3, #29
 80095f2:	d001      	beq.n	80095f8 <__sflush_r+0xac>
 80095f4:	2b16      	cmp	r3, #22
 80095f6:	d11e      	bne.n	8009636 <__sflush_r+0xea>
 80095f8:	602f      	str	r7, [r5, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	e022      	b.n	8009644 <__sflush_r+0xf8>
 80095fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009602:	b21b      	sxth	r3, r3
 8009604:	e01b      	b.n	800963e <__sflush_r+0xf2>
 8009606:	690f      	ldr	r7, [r1, #16]
 8009608:	2f00      	cmp	r7, #0
 800960a:	d0f6      	beq.n	80095fa <__sflush_r+0xae>
 800960c:	0793      	lsls	r3, r2, #30
 800960e:	680e      	ldr	r6, [r1, #0]
 8009610:	bf08      	it	eq
 8009612:	694b      	ldreq	r3, [r1, #20]
 8009614:	600f      	str	r7, [r1, #0]
 8009616:	bf18      	it	ne
 8009618:	2300      	movne	r3, #0
 800961a:	eba6 0807 	sub.w	r8, r6, r7
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	dde9      	ble.n	80095fa <__sflush_r+0xae>
 8009626:	6a21      	ldr	r1, [r4, #32]
 8009628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800962a:	4643      	mov	r3, r8
 800962c:	463a      	mov	r2, r7
 800962e:	4628      	mov	r0, r5
 8009630:	47b0      	blx	r6
 8009632:	2800      	cmp	r0, #0
 8009634:	dc08      	bgt.n	8009648 <__sflush_r+0xfc>
 8009636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	4407      	add	r7, r0
 800964a:	eba8 0800 	sub.w	r8, r8, r0
 800964e:	e7e7      	b.n	8009620 <__sflush_r+0xd4>
 8009650:	20400001 	.word	0x20400001

08009654 <_fflush_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	690b      	ldr	r3, [r1, #16]
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	b913      	cbnz	r3, 8009664 <_fflush_r+0x10>
 800965e:	2500      	movs	r5, #0
 8009660:	4628      	mov	r0, r5
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	b118      	cbz	r0, 800966e <_fflush_r+0x1a>
 8009666:	6a03      	ldr	r3, [r0, #32]
 8009668:	b90b      	cbnz	r3, 800966e <_fflush_r+0x1a>
 800966a:	f7fe f9cd 	bl	8007a08 <__sinit>
 800966e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f3      	beq.n	800965e <_fflush_r+0xa>
 8009676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009678:	07d0      	lsls	r0, r2, #31
 800967a:	d404      	bmi.n	8009686 <_fflush_r+0x32>
 800967c:	0599      	lsls	r1, r3, #22
 800967e:	d402      	bmi.n	8009686 <_fflush_r+0x32>
 8009680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009682:	f7fe fbd4 	bl	8007e2e <__retarget_lock_acquire_recursive>
 8009686:	4628      	mov	r0, r5
 8009688:	4621      	mov	r1, r4
 800968a:	f7ff ff5f 	bl	800954c <__sflush_r>
 800968e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009690:	07da      	lsls	r2, r3, #31
 8009692:	4605      	mov	r5, r0
 8009694:	d4e4      	bmi.n	8009660 <_fflush_r+0xc>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	059b      	lsls	r3, r3, #22
 800969a:	d4e1      	bmi.n	8009660 <_fflush_r+0xc>
 800969c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800969e:	f7fe fbc7 	bl	8007e30 <__retarget_lock_release_recursive>
 80096a2:	e7dd      	b.n	8009660 <_fflush_r+0xc>

080096a4 <fiprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b503      	push	{r0, r1, lr}
 80096a8:	4601      	mov	r1, r0
 80096aa:	ab03      	add	r3, sp, #12
 80096ac:	4805      	ldr	r0, [pc, #20]	@ (80096c4 <fiprintf+0x20>)
 80096ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b2:	6800      	ldr	r0, [r0, #0]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	f7ff fe31 	bl	800931c <_vfiprintf_r>
 80096ba:	b002      	add	sp, #8
 80096bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c0:	b003      	add	sp, #12
 80096c2:	4770      	bx	lr
 80096c4:	20000020 	.word	0x20000020

080096c8 <__swhatbuf_r>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	460c      	mov	r4, r1
 80096cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d0:	2900      	cmp	r1, #0
 80096d2:	b096      	sub	sp, #88	@ 0x58
 80096d4:	4615      	mov	r5, r2
 80096d6:	461e      	mov	r6, r3
 80096d8:	da0d      	bge.n	80096f6 <__swhatbuf_r+0x2e>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096e0:	f04f 0100 	mov.w	r1, #0
 80096e4:	bf14      	ite	ne
 80096e6:	2340      	movne	r3, #64	@ 0x40
 80096e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096ec:	2000      	movs	r0, #0
 80096ee:	6031      	str	r1, [r6, #0]
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	b016      	add	sp, #88	@ 0x58
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	466a      	mov	r2, sp
 80096f8:	f000 f87c 	bl	80097f4 <_fstat_r>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	dbec      	blt.n	80096da <__swhatbuf_r+0x12>
 8009700:	9901      	ldr	r1, [sp, #4]
 8009702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800970a:	4259      	negs	r1, r3
 800970c:	4159      	adcs	r1, r3
 800970e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009712:	e7eb      	b.n	80096ec <__swhatbuf_r+0x24>

08009714 <__smakebuf_r>:
 8009714:	898b      	ldrh	r3, [r1, #12]
 8009716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009718:	079d      	lsls	r5, r3, #30
 800971a:	4606      	mov	r6, r0
 800971c:	460c      	mov	r4, r1
 800971e:	d507      	bpl.n	8009730 <__smakebuf_r+0x1c>
 8009720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	2301      	movs	r3, #1
 800972a:	6163      	str	r3, [r4, #20]
 800972c:	b003      	add	sp, #12
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	ab01      	add	r3, sp, #4
 8009732:	466a      	mov	r2, sp
 8009734:	f7ff ffc8 	bl	80096c8 <__swhatbuf_r>
 8009738:	9f00      	ldr	r7, [sp, #0]
 800973a:	4605      	mov	r5, r0
 800973c:	4639      	mov	r1, r7
 800973e:	4630      	mov	r0, r6
 8009740:	f7fd fbf4 	bl	8006f2c <_malloc_r>
 8009744:	b948      	cbnz	r0, 800975a <__smakebuf_r+0x46>
 8009746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974a:	059a      	lsls	r2, r3, #22
 800974c:	d4ee      	bmi.n	800972c <__smakebuf_r+0x18>
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	f043 0302 	orr.w	r3, r3, #2
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	e7e2      	b.n	8009720 <__smakebuf_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	6020      	str	r0, [r4, #0]
 800975e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800976a:	b15b      	cbz	r3, 8009784 <__smakebuf_r+0x70>
 800976c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f851 	bl	8009818 <_isatty_r>
 8009776:	b128      	cbz	r0, 8009784 <__smakebuf_r+0x70>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	431d      	orrs	r5, r3
 8009788:	81a5      	strh	r5, [r4, #12]
 800978a:	e7cf      	b.n	800972c <__smakebuf_r+0x18>

0800978c <_putc_r>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	460d      	mov	r5, r1
 8009790:	4614      	mov	r4, r2
 8009792:	4606      	mov	r6, r0
 8009794:	b118      	cbz	r0, 800979e <_putc_r+0x12>
 8009796:	6a03      	ldr	r3, [r0, #32]
 8009798:	b90b      	cbnz	r3, 800979e <_putc_r+0x12>
 800979a:	f7fe f935 	bl	8007a08 <__sinit>
 800979e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097a0:	07d8      	lsls	r0, r3, #31
 80097a2:	d405      	bmi.n	80097b0 <_putc_r+0x24>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	0599      	lsls	r1, r3, #22
 80097a8:	d402      	bmi.n	80097b0 <_putc_r+0x24>
 80097aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097ac:	f7fe fb3f 	bl	8007e2e <__retarget_lock_acquire_recursive>
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	60a3      	str	r3, [r4, #8]
 80097b8:	da05      	bge.n	80097c6 <_putc_r+0x3a>
 80097ba:	69a2      	ldr	r2, [r4, #24]
 80097bc:	4293      	cmp	r3, r2
 80097be:	db12      	blt.n	80097e6 <_putc_r+0x5a>
 80097c0:	b2eb      	uxtb	r3, r5
 80097c2:	2b0a      	cmp	r3, #10
 80097c4:	d00f      	beq.n	80097e6 <_putc_r+0x5a>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	6022      	str	r2, [r4, #0]
 80097cc:	701d      	strb	r5, [r3, #0]
 80097ce:	b2ed      	uxtb	r5, r5
 80097d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097d2:	07da      	lsls	r2, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_putc_r+0x56>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	059b      	lsls	r3, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_putc_r+0x56>
 80097dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097de:	f7fe fb27 	bl	8007e30 <__retarget_lock_release_recursive>
 80097e2:	4628      	mov	r0, r5
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	4629      	mov	r1, r5
 80097e8:	4622      	mov	r2, r4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7fe f9fd 	bl	8007bea <__swbuf_r>
 80097f0:	4605      	mov	r5, r0
 80097f2:	e7ed      	b.n	80097d0 <_putc_r+0x44>

080097f4 <_fstat_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	@ (8009814 <_fstat_r+0x20>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f7f8 f8ae 	bl	8001962 <_fstat>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d102      	bne.n	8009810 <_fstat_r+0x1c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b103      	cbz	r3, 8009810 <_fstat_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	200006e4 	.word	0x200006e4

08009818 <_isatty_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	@ (8009834 <_isatty_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f8 f8ad 	bl	8001982 <_isatty>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_isatty_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_isatty_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	200006e4 	.word	0x200006e4

08009838 <abort>:
 8009838:	b508      	push	{r3, lr}
 800983a:	2006      	movs	r0, #6
 800983c:	f000 f85e 	bl	80098fc <raise>
 8009840:	2001      	movs	r0, #1
 8009842:	f7f8 f877 	bl	8001934 <_exit>

08009846 <_calloc_r>:
 8009846:	b570      	push	{r4, r5, r6, lr}
 8009848:	fba1 5402 	umull	r5, r4, r1, r2
 800984c:	b934      	cbnz	r4, 800985c <_calloc_r+0x16>
 800984e:	4629      	mov	r1, r5
 8009850:	f7fd fb6c 	bl	8006f2c <_malloc_r>
 8009854:	4606      	mov	r6, r0
 8009856:	b928      	cbnz	r0, 8009864 <_calloc_r+0x1e>
 8009858:	4630      	mov	r0, r6
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	220c      	movs	r2, #12
 800985e:	6002      	str	r2, [r0, #0]
 8009860:	2600      	movs	r6, #0
 8009862:	e7f9      	b.n	8009858 <_calloc_r+0x12>
 8009864:	462a      	mov	r2, r5
 8009866:	4621      	mov	r1, r4
 8009868:	f7fe fa54 	bl	8007d14 <memset>
 800986c:	e7f4      	b.n	8009858 <_calloc_r+0x12>

0800986e <__ascii_mbtowc>:
 800986e:	b082      	sub	sp, #8
 8009870:	b901      	cbnz	r1, 8009874 <__ascii_mbtowc+0x6>
 8009872:	a901      	add	r1, sp, #4
 8009874:	b142      	cbz	r2, 8009888 <__ascii_mbtowc+0x1a>
 8009876:	b14b      	cbz	r3, 800988c <__ascii_mbtowc+0x1e>
 8009878:	7813      	ldrb	r3, [r2, #0]
 800987a:	600b      	str	r3, [r1, #0]
 800987c:	7812      	ldrb	r2, [r2, #0]
 800987e:	1e10      	subs	r0, r2, #0
 8009880:	bf18      	it	ne
 8009882:	2001      	movne	r0, #1
 8009884:	b002      	add	sp, #8
 8009886:	4770      	bx	lr
 8009888:	4610      	mov	r0, r2
 800988a:	e7fb      	b.n	8009884 <__ascii_mbtowc+0x16>
 800988c:	f06f 0001 	mvn.w	r0, #1
 8009890:	e7f8      	b.n	8009884 <__ascii_mbtowc+0x16>

08009892 <__ascii_wctomb>:
 8009892:	4603      	mov	r3, r0
 8009894:	4608      	mov	r0, r1
 8009896:	b141      	cbz	r1, 80098aa <__ascii_wctomb+0x18>
 8009898:	2aff      	cmp	r2, #255	@ 0xff
 800989a:	d904      	bls.n	80098a6 <__ascii_wctomb+0x14>
 800989c:	228a      	movs	r2, #138	@ 0x8a
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	4770      	bx	lr
 80098a6:	700a      	strb	r2, [r1, #0]
 80098a8:	2001      	movs	r0, #1
 80098aa:	4770      	bx	lr

080098ac <_raise_r>:
 80098ac:	291f      	cmp	r1, #31
 80098ae:	b538      	push	{r3, r4, r5, lr}
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	d904      	bls.n	80098c0 <_raise_r+0x14>
 80098b6:	2316      	movs	r3, #22
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098c2:	b112      	cbz	r2, 80098ca <_raise_r+0x1e>
 80098c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098c8:	b94b      	cbnz	r3, 80098de <_raise_r+0x32>
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f830 	bl	8009930 <_getpid_r>
 80098d0:	4622      	mov	r2, r4
 80098d2:	4601      	mov	r1, r0
 80098d4:	4628      	mov	r0, r5
 80098d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098da:	f000 b817 	b.w	800990c <_kill_r>
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d00a      	beq.n	80098f8 <_raise_r+0x4c>
 80098e2:	1c59      	adds	r1, r3, #1
 80098e4:	d103      	bne.n	80098ee <_raise_r+0x42>
 80098e6:	2316      	movs	r3, #22
 80098e8:	6003      	str	r3, [r0, #0]
 80098ea:	2001      	movs	r0, #1
 80098ec:	e7e7      	b.n	80098be <_raise_r+0x12>
 80098ee:	2100      	movs	r1, #0
 80098f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098f4:	4620      	mov	r0, r4
 80098f6:	4798      	blx	r3
 80098f8:	2000      	movs	r0, #0
 80098fa:	e7e0      	b.n	80098be <_raise_r+0x12>

080098fc <raise>:
 80098fc:	4b02      	ldr	r3, [pc, #8]	@ (8009908 <raise+0xc>)
 80098fe:	4601      	mov	r1, r0
 8009900:	6818      	ldr	r0, [r3, #0]
 8009902:	f7ff bfd3 	b.w	80098ac <_raise_r>
 8009906:	bf00      	nop
 8009908:	20000020 	.word	0x20000020

0800990c <_kill_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d07      	ldr	r5, [pc, #28]	@ (800992c <_kill_r+0x20>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	4611      	mov	r1, r2
 8009918:	602b      	str	r3, [r5, #0]
 800991a:	f7f7 fffb 	bl	8001914 <_kill>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d102      	bne.n	8009928 <_kill_r+0x1c>
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	b103      	cbz	r3, 8009928 <_kill_r+0x1c>
 8009926:	6023      	str	r3, [r4, #0]
 8009928:	bd38      	pop	{r3, r4, r5, pc}
 800992a:	bf00      	nop
 800992c:	200006e4 	.word	0x200006e4

08009930 <_getpid_r>:
 8009930:	f7f7 bfe8 	b.w	8001904 <_getpid>

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
