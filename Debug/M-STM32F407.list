
M-STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003998  0800b160  0800b160  0000c160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf8  0800eaf8  000101e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eaf8  0800eaf8  0000faf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb00  0800eb00  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb00  0800eb00  0000fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb04  0800eb04  0000fb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800eb08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101e8  2**0
                  CONTENTS
 10 .bss          00000964  200001e8  200001e8  000101e8  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20000b4c  20000b4c  000101e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bcd  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ae  00000000  00000000  00021de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00025098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc3  00000000  00000000  00025ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005dd1  00000000  00000000  00026bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e2d  00000000  00000000  0002c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f91  00000000  00000000  000437b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b742  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005224  00000000  00000000  0011b788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001209ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b144 	.word	0x0800b144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b144 	.word	0x0800b144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <EEPROM_DeviceInit>:
/*----------------------------- 设备初始化函数 -----------------------------*/
/**
  * @brief  EEPROM (AT24C32) 初始化
  * @retval I2C_Status 错误码
  */
static I2C_Status EEPROM_DeviceInit(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  // 检测设备是否存在
  if (HAL_I2C_IsDeviceReady(&I2C_HANDLE, EEPROM_I2C_ADDR << 1, 3, 100) != HAL_OK) {
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	2203      	movs	r2, #3
 8000edc:	21ae      	movs	r1, #174	@ 0xae
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <EEPROM_DeviceInit+0x24>)
 8000ee0:	f002 ff58 	bl	8003d94 <HAL_I2C_IsDeviceReady>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <EEPROM_DeviceInit+0x1a>
    return I2C_ERR_INIT;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e002      	b.n	8000ef4 <EEPROM_DeviceInit+0x20>
  }
  // 可在此添加EEPROM特定初始化（例如写入默认配置）
  EEPROM_ResetHealth();
 8000eee:	f000 fad5 	bl	800149c <EEPROM_ResetHealth>
  return I2C_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000264 	.word	0x20000264

08000efc <DS1307_DeviceInit>:

/**
  * @brief  DS1307 实时时钟初始化
  * @retval I2C_Status 错误码
  */
static I2C_Status DS1307_DeviceInit(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af04      	add	r7, sp, #16
  // 检测设备是否存在
  if (HAL_I2C_IsDeviceReady(&I2C_HANDLE, RTC_I2C_ADDR << 1, 3, 100) != HAL_OK) {
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	2203      	movs	r2, #3
 8000f06:	21d0      	movs	r1, #208	@ 0xd0
 8000f08:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <DS1307_DeviceInit+0x7c>)
 8000f0a:	f002 ff43 	bl	8003d94 <HAL_I2C_IsDeviceReady>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <DS1307_DeviceInit+0x1c>
    return I2C_ERR_INIT;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e02b      	b.n	8000f70 <DS1307_DeviceInit+0x74>
  }
  // 检查并启动时钟振荡器（清除CH位）
  uint8_t sec_reg;
  if (HAL_I2C_Mem_Read(&I2C_HANDLE, RTC_I2C_ADDR << 1, RTC_TIME_REG,
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	2200      	movs	r2, #0
 8000f28:	21d0      	movs	r1, #208	@ 0xd0
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <DS1307_DeviceInit+0x7c>)
 8000f2c:	f002 fd00 	bl	8003930 <HAL_I2C_Mem_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <DS1307_DeviceInit+0x3e>
                      I2C_MEMADD_SIZE_8BIT, &sec_reg, 1, 100) != HAL_OK) {
    return I2C_ERR_COMM;
 8000f36:	2302      	movs	r3, #2
 8000f38:	e01a      	b.n	8000f70 <DS1307_DeviceInit+0x74>
  }

  if (sec_reg & 0x80) {  // 如果时钟停止
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da15      	bge.n	8000f6e <DS1307_DeviceInit+0x72>
    sec_reg &= ~0x80;    // 清除停止位
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Mem_Write(&I2C_HANDLE, RTC_I2C_ADDR << 1, RTC_TIME_REG,
 8000f4c:	2364      	movs	r3, #100	@ 0x64
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	21d0      	movs	r1, #208	@ 0xd0
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <DS1307_DeviceInit+0x7c>)
 8000f60:	f002 fbec 	bl	800373c <HAL_I2C_Mem_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <DS1307_DeviceInit+0x72>
                         I2C_MEMADD_SIZE_8BIT, &sec_reg, 1, 100) != HAL_OK) {
      return I2C_ERR_COMM;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e000      	b.n	8000f70 <DS1307_DeviceInit+0x74>
    }
  }
  return I2C_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000264 	.word	0x20000264

08000f7c <I2C_Init_Devices>:
/**
  * @brief  统一I2C设备初始化入口
  * @retval I2C_Status 错误码
  *
  */
I2C_Status I2C_Init_Devices(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
   *  G -->|是| H[继续下一个设备]
   *  G -->|否| I[返回错误]
   * */

  // 步骤1: 初始化I2C硬件总线
  if (HAL_I2C_Init(&I2C_HANDLE) != HAL_OK) {
 8000f82:	4821      	ldr	r0, [pc, #132]	@ (8001008 <I2C_Init_Devices+0x8c>)
 8000f84:	f002 fa80 	bl	8003488 <HAL_I2C_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <I2C_Init_Devices+0x16>
    return I2C_ERR_INIT;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e035      	b.n	8000ffe <I2C_Init_Devices+0x82>
  }

  // 步骤2: 遍历所有设备进行初始化

  for (uint8_t i = 0; i < sizeof(dev_config)/sizeof(dev_config[0]); i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e02e      	b.n	8000ff6 <I2C_Init_Devices+0x7a>
    I2C_Status status = dev_config[i].init_fn();
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	491c      	ldr	r1, [pc, #112]	@ (800100c <I2C_Init_Devices+0x90>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	71bb      	strb	r3, [r7, #6]
    if (status != I2C_OK) {
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00f      	beq.n	8000fd6 <I2C_Init_Devices+0x5a>
      // 输出调试信息（需实现printf）
      printf("[I2C Init] Device %s initialization failed! Error: %d\n\n",
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
            dev_config[i].dev_name, status);
 8000fb8:	4914      	ldr	r1, [pc, #80]	@ (800100c <I2C_Init_Devices+0x90>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
      printf("[I2C Init] Device %s initialization failed! Error: %d\n\n",
 8000fc8:	79ba      	ldrb	r2, [r7, #6]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	@ (8001010 <I2C_Init_Devices+0x94>)
 8000fce:	f007 fbef 	bl	80087b0 <iprintf>
      return status; // 严格模式：遇到错误立即返回
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	e013      	b.n	8000ffe <I2C_Init_Devices+0x82>
    }
    printf("[I2C Init] %s initialized successfully.\n", dev_config[i].dev_name);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <I2C_Init_Devices+0x90>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <I2C_Init_Devices+0x98>)
 8000fec:	f007 fbe0 	bl	80087b0 <iprintf>
  for (uint8_t i = 0; i < sizeof(dev_config)/sizeof(dev_config[0]); i++) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d9cd      	bls.n	8000f98 <I2C_Init_Devices+0x1c>
  }

  return I2C_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000264 	.word	0x20000264
 800100c:	0800bee4 	.word	0x0800bee4
 8001010:	0800b160 	.word	0x0800b160
 8001014:	0800b198 	.word	0x0800b198

08001018 <RTC_SetTime>:
  * @brief 设置DS1307时间
  * @param time: 时间结构体指针
  * @retval HAL状态
  */

HAL_StatusTypeDef RTC_SetTime(RTC_Time* time) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];

    // 转换十进制到BCD格式
    //time->COMMAND_ID = 1;
    buffer[0] = dec_to_bcd(time->seconds);//秒
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f9f9 	bl	800141c <dec_to_bcd>
 800102a:	4603      	mov	r3, r0
 800102c:	723b      	strb	r3, [r7, #8]
    buffer[0] &= 0x7F; // 強制清除秒暫存器的最高位(CH位)，確保時鐘運行
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	723b      	strb	r3, [r7, #8]
    buffer[1] = dec_to_bcd(time->minutes);//分
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	791b      	ldrb	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f9ed 	bl	800141c <dec_to_bcd>
 8001042:	4603      	mov	r3, r0
 8001044:	727b      	strb	r3, [r7, #9]
    buffer[2] = dec_to_bcd(time->hours);//時
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	78db      	ldrb	r3, [r3, #3]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f9e6 	bl	800141c <dec_to_bcd>
 8001050:	4603      	mov	r3, r0
 8001052:	72bb      	strb	r3, [r7, #10]
    buffer[3] = dec_to_bcd(time->day);//星期
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	799b      	ldrb	r3, [r3, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f9df 	bl	800141c <dec_to_bcd>
 800105e:	4603      	mov	r3, r0
 8001060:	72fb      	strb	r3, [r7, #11]
    buffer[4] = dec_to_bcd(time->date);//日期
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9d8 	bl	800141c <dec_to_bcd>
 800106c:	4603      	mov	r3, r0
 800106e:	733b      	strb	r3, [r7, #12]
    buffer[5] = dec_to_bcd(time->month);//月
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f9d1 	bl	800141c <dec_to_bcd>
 800107a:	4603      	mov	r3, r0
 800107c:	737b      	strb	r3, [r7, #13]
    buffer[6] = dec_to_bcd(time->year);//年
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f9ca 	bl	800141c <dec_to_bcd>
 8001088:	4603      	mov	r3, r0
 800108a:	73bb      	strb	r3, [r7, #14]

    // 写入时间寄存器
    return HAL_I2C_Mem_Write(hi2c_main, RTC_I2C_ADDR << 1, RTC_TIME_REG,
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <RTC_SetTime+0x9c>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2307      	movs	r3, #7
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2200      	movs	r2, #0
 80010a2:	21d0      	movs	r1, #208	@ 0xd0
 80010a4:	f002 fb4a 	bl	800373c <HAL_I2C_Mem_Write>
 80010a8:	4603      	mov	r3, r0
                            I2C_MEMADD_SIZE_8BIT, buffer, 7, 100);
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000

080010b8 <RTC_GetTime>:
  * @param time: 时间结构体指针
  * @retval HAL状态
  */


HAL_StatusTypeDef RTC_GetTime(RTC_Time* time) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hi2c_main, RTC_I2C_ADDR << 1, RTC_TIME_REG,
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <RTC_GetTime+0xb8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2307      	movs	r3, #7
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2200      	movs	r2, #0
 80010d6:	21d0      	movs	r1, #208	@ 0xd0
 80010d8:	f002 fc2a 	bl	8003930 <HAL_I2C_Mem_Read>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
                             I2C_MEMADD_SIZE_8BIT, buffer, 7, 100);
    if(status != HAL_OK) return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <RTC_GetTime+0x32>
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	e03e      	b.n	8001168 <RTC_GetTime+0xb0>
    //這個旗標主要是用來判斷當上位機用各種不同的連線方式,下達命令的時候,可以有一個旗標可以用來
    //說明『這次是用來做RTC校正時間的命令』;為了結構上的完整,所以才寫下這一行
    //time->COMMAND_ID = 1;

    // 转换BCD到十进制并处理停止位
    time->seconds = bcd_to_dec(buffer[0] & 0x7F); // 忽略停止位
 80010ea:	7a3b      	ldrb	r3, [r7, #8]
 80010ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f9b8 	bl	8001468 <bcd_to_dec>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	715a      	strb	r2, [r3, #5]
    time->minutes = bcd_to_dec(buffer[1]);
 8001100:	7a7b      	ldrb	r3, [r7, #9]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f9b0 	bl	8001468 <bcd_to_dec>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	711a      	strb	r2, [r3, #4]
    time->hours   = bcd_to_dec(buffer[2] & 0x3F); // 24小时模式
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f9a5 	bl	8001468 <bcd_to_dec>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	70da      	strb	r2, [r3, #3]
    time->day     = bcd_to_dec(buffer[3]);
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f99d 	bl	8001468 <bcd_to_dec>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	719a      	strb	r2, [r3, #6]
    time->date    = bcd_to_dec(buffer[4]);
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f995 	bl	8001468 <bcd_to_dec>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	709a      	strb	r2, [r3, #2]
    time->month   = bcd_to_dec(buffer[5]);
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f98d 	bl	8001468 <bcd_to_dec>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	705a      	strb	r2, [r3, #1]
    time->year    = bcd_to_dec(buffer[6]);
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f985 	bl	8001468 <bcd_to_dec>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000

08001174 <DS3231_GetTemp>:




HAL_StatusTypeDef DS3231_GetTemp(DS3231_Temp* temp) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af04      	add	r7, sp, #16
 800117a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];

    HAL_StatusTypeDef status_MSB,status_LSB;

    status_MSB = HAL_I2C_Mem_Read(hi2c_main, RTC_I2C_ADDR << 1,
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <DS3231_GetTemp+0x7c>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	2211      	movs	r2, #17
 8001192:	21d0      	movs	r1, #208	@ 0xd0
 8001194:	f002 fbcc 	bl	8003930 <HAL_I2C_Mem_Read>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
                     RTC_TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT,
                     &buffer[0], 1, 100);
    status_LSB = HAL_I2C_Mem_Read(hi2c_main, RTC_I2C_ADDR << 1,
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <DS3231_GetTemp+0x7c>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	2364      	movs	r3, #100	@ 0x64
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	3301      	adds	r3, #1
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2212      	movs	r2, #18
 80011b4:	21d0      	movs	r1, #208	@ 0xd0
 80011b6:	f002 fbbb 	bl	8003930 <HAL_I2C_Mem_Read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73bb      	strb	r3, [r7, #14]
                     RTC_TEMP_LSB_REG, I2C_MEMADD_SIZE_8BIT,
                     &buffer[1], 1, 100);

    if(status_MSB != HAL_OK){
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <DS3231_GetTemp+0x5a>
    	printf("RTC_TEMP_MSB cna't Read");
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <DS3231_GetTemp+0x80>)
 80011c6:	f007 faf3 	bl	80087b0 <iprintf>
    	return status_MSB;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	e00c      	b.n	80011e8 <DS3231_GetTemp+0x74>
    }
    if(status_LSB != HAL_OK){
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <DS3231_GetTemp+0x6a>
    	printf("RTC_TEMP_MSB cna't Read");
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <DS3231_GetTemp+0x80>)
 80011d6:	f007 faeb 	bl	80087b0 <iprintf>
    	return status_LSB;
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	e004      	b.n	80011e8 <DS3231_GetTemp+0x74>
    }

    // MSB 是有號數，直接轉換

    temp->Integer = (int8_t)buffer[0];
 80011de:	7b3b      	ldrb	r3, [r7, #12]
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	701a      	strb	r2, [r3, #0]

    // LSB 的 bit7 和 bit6
    //uint8_t fractionBits = buffer[1] >> 6;
    //temp->Fraction = fractionBits;

    return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	0800b280 	.word	0x0800b280

080011f8 <Parse_TimeString>:

RTC_Time Parse_TimeString(const char *str) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]

	 printf("DEBUG: Parse_TimeString received the raw string: --->%s<---\n", str);
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	4877      	ldr	r0, [pc, #476]	@ (80013e4 <Parse_TimeString+0x1ec>)
 8001206:	f007 fad3 	bl	80087b0 <iprintf>
    RTC_Time DT = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	721a      	strb	r2, [r3, #8]
    char *token = NULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]

    // 示例字符串格式："2023,12,31,23,59,30,checksum,command_ID"
    //int year, month, day, hour, minute, second;
    // 如果傳入的字串是空的，直接返回一個空的結構體，防止崩潰

    if (str == NULL || *str == '\0') {
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <Parse_TimeString+0x30>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10c      	bne.n	8001242 <Parse_TimeString+0x4a>
        printf("ERR: Input string is NULL.\n");
 8001228:	486f      	ldr	r0, [pc, #444]	@ (80013e8 <Parse_TimeString+0x1f0>)
 800122a:	f007 fb29 	bl	8008880 <puts>
        return DT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	461a      	mov	r2, r3
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	cb03      	ldmia	r3!, {r0, r1}
 8001238:	6010      	str	r0, [r2, #0]
 800123a:	6051      	str	r1, [r2, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	7213      	strb	r3, [r2, #8]
 8001240:	e0cc      	b.n	80013dc <Parse_TimeString+0x1e4>
	    }

    char *copy = strdup(str);  // 修改3：避免修改原始字串
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f007 fc16 	bl	8008a74 <strdup>
 8001248:	4603      	mov	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
    if (copy == NULL) {
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <Parse_TimeString+0x74>
        printf("ERR: Memory allocation failed (strdup).\n");
 8001252:	4866      	ldr	r0, [pc, #408]	@ (80013ec <Parse_TimeString+0x1f4>)
 8001254:	f007 fb14 	bl	8008880 <puts>
        // 內存分配失敗
        return DT; // 內存分配失敗也返回空結構體
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	cb03      	ldmia	r3!, {r0, r1}
 8001262:	6010      	str	r0, [r2, #0]
 8001264:	6051      	str	r1, [r2, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	7213      	strb	r3, [r2, #8]
 800126a:	e0b7      	b.n	80013dc <Parse_TimeString+0x1e4>
    }

    // 1. 解析 Year
    token = strtok(copy, ",");
 800126c:	4960      	ldr	r1, [pc, #384]	@ (80013f0 <Parse_TimeString+0x1f8>)
 800126e:	69b8      	ldr	r0, [r7, #24]
 8001270:	f007 fc1c 	bl	8008aac <strtok>
 8001274:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Year failed.\n"); goto cleanup; }
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <Parse_TimeString+0x8c>
 800127c:	485d      	ldr	r0, [pc, #372]	@ (80013f4 <Parse_TimeString+0x1fc>)
 800127e:	f007 faff 	bl	8008880 <puts>
 8001282:	e09f      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.year = atoi(token)% 100;
 8001284:	69f8      	ldr	r0, [r7, #28]
 8001286:	f006 fc33 	bl	8007af0 <atoi>
 800128a:	4603      	mov	r3, r0
 800128c:	4a5a      	ldr	r2, [pc, #360]	@ (80013f8 <Parse_TimeString+0x200>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	1151      	asrs	r1, r2, #5
 8001294:	17da      	asrs	r2, r3, #31
 8001296:	1a8a      	subs	r2, r1, r2
 8001298:	2164      	movs	r1, #100	@ 0x64
 800129a:	fb01 f202 	mul.w	r2, r1, r2
 800129e:	1a9a      	subs	r2, r3, r2
 80012a0:	b2d3      	uxtb	r3, r2
 80012a2:	733b      	strb	r3, [r7, #12]
    //printf("OK: Parsed Year = %u\n", DT.year);

    // 2. 解析 Month
    token = strtok(NULL, ",");
 80012a4:	4952      	ldr	r1, [pc, #328]	@ (80013f0 <Parse_TimeString+0x1f8>)
 80012a6:	2000      	movs	r0, #0
 80012a8:	f007 fc00 	bl	8008aac <strtok>
 80012ac:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Month failed.\n"); goto cleanup; }
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <Parse_TimeString+0xc4>
 80012b4:	4851      	ldr	r0, [pc, #324]	@ (80013fc <Parse_TimeString+0x204>)
 80012b6:	f007 fae3 	bl	8008880 <puts>
 80012ba:	e083      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.month = atoi(token);
 80012bc:	69f8      	ldr	r0, [r7, #28]
 80012be:	f006 fc17 	bl	8007af0 <atoi>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	737b      	strb	r3, [r7, #13]
    //printf("OK: Parsed Month = %u\n", DT.month);

    //3. 日
    token = strtok(NULL, ",");
 80012c8:	4949      	ldr	r1, [pc, #292]	@ (80013f0 <Parse_TimeString+0x1f8>)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f007 fbee 	bl	8008aac <strtok>
 80012d0:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Date failed.\n"); goto cleanup; }
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <Parse_TimeString+0xe8>
 80012d8:	4849      	ldr	r0, [pc, #292]	@ (8001400 <Parse_TimeString+0x208>)
 80012da:	f007 fad1 	bl	8008880 <puts>
 80012de:	e071      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.date = atoi(token);
 80012e0:	69f8      	ldr	r0, [r7, #28]
 80012e2:	f006 fc05 	bl	8007af0 <atoi>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	73bb      	strb	r3, [r7, #14]
    //printf("OK: Parsed Date = %u\n", DT.date);

    //4. 時
    token = strtok(NULL, ",");
 80012ec:	4940      	ldr	r1, [pc, #256]	@ (80013f0 <Parse_TimeString+0x1f8>)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f007 fbdc 	bl	8008aac <strtok>
 80012f4:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Hours failed.\n"); goto cleanup; }
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <Parse_TimeString+0x10c>
 80012fc:	4841      	ldr	r0, [pc, #260]	@ (8001404 <Parse_TimeString+0x20c>)
 80012fe:	f007 fabf 	bl	8008880 <puts>
 8001302:	e05f      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.hours = atoi(token);
 8001304:	69f8      	ldr	r0, [r7, #28]
 8001306:	f006 fbf3 	bl	8007af0 <atoi>
 800130a:	4603      	mov	r3, r0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
    //printf("OK: Parsed Hours = %u\n", DT.hours);

    //5. 分
    token = strtok(NULL, ",");
 8001310:	4937      	ldr	r1, [pc, #220]	@ (80013f0 <Parse_TimeString+0x1f8>)
 8001312:	2000      	movs	r0, #0
 8001314:	f007 fbca 	bl	8008aac <strtok>
 8001318:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Minutes failed.\n"); goto cleanup; }
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <Parse_TimeString+0x130>
 8001320:	4839      	ldr	r0, [pc, #228]	@ (8001408 <Parse_TimeString+0x210>)
 8001322:	f007 faad 	bl	8008880 <puts>
 8001326:	e04d      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.minutes = atoi(token);
 8001328:	69f8      	ldr	r0, [r7, #28]
 800132a:	f006 fbe1 	bl	8007af0 <atoi>
 800132e:	4603      	mov	r3, r0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	743b      	strb	r3, [r7, #16]
    //printf("OK: Parsed Minutes = %u\n", DT.minutes);

    //6. 秒
    token = strtok(NULL, ",");
 8001334:	492e      	ldr	r1, [pc, #184]	@ (80013f0 <Parse_TimeString+0x1f8>)
 8001336:	2000      	movs	r0, #0
 8001338:	f007 fbb8 	bl	8008aac <strtok>
 800133c:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Seconds failed.\n"); goto cleanup; }
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <Parse_TimeString+0x154>
 8001344:	4831      	ldr	r0, [pc, #196]	@ (800140c <Parse_TimeString+0x214>)
 8001346:	f007 fa9b 	bl	8008880 <puts>
 800134a:	e03b      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.seconds = atoi(token);
 800134c:	69f8      	ldr	r0, [r7, #28]
 800134e:	f006 fbcf 	bl	8007af0 <atoi>
 8001352:	4603      	mov	r3, r0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	747b      	strb	r3, [r7, #17]
    //printf("OK: Parsed Seconds = %u\n", DT.seconds);

    //7. 星期
    token = strtok(NULL, ",");
 8001358:	4925      	ldr	r1, [pc, #148]	@ (80013f0 <Parse_TimeString+0x1f8>)
 800135a:	2000      	movs	r0, #0
 800135c:	f007 fba6 	bl	8008aac <strtok>
 8001360:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing date failed.\n"); goto cleanup; }
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <Parse_TimeString+0x178>
 8001368:	4829      	ldr	r0, [pc, #164]	@ (8001410 <Parse_TimeString+0x218>)
 800136a:	f007 fa89 	bl	8008880 <puts>
 800136e:	e029      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.day = atoi(token);
 8001370:	69f8      	ldr	r0, [r7, #28]
 8001372:	f006 fbbd 	bl	8007af0 <atoi>
 8001376:	4603      	mov	r3, r0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	74bb      	strb	r3, [r7, #18]
    //printf("OK: Parsed Seconds = %u\n", DT.seconds);

    //7. 解析 COMMAND_ID
    token = strtok(NULL, ",");
 800137c:	491c      	ldr	r1, [pc, #112]	@ (80013f0 <Parse_TimeString+0x1f8>)
 800137e:	2000      	movs	r0, #0
 8001380:	f007 fb94 	bl	8008aac <strtok>
 8001384:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Command_ID failed.\n"); goto cleanup; }
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <Parse_TimeString+0x19c>
 800138c:	4821      	ldr	r0, [pc, #132]	@ (8001414 <Parse_TimeString+0x21c>)
 800138e:	f007 fa77 	bl	8008880 <puts>
 8001392:	e017      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.Command_ID = atoi(token);
 8001394:	69f8      	ldr	r0, [r7, #28]
 8001396:	f006 fbab 	bl	8007af0 <atoi>
 800139a:	4603      	mov	r3, r0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	74fb      	strb	r3, [r7, #19]
    //printf("OK: Parsed Command_ID = %u\n", DT.Command_ID);

    //8. 解析 checksum
    token = strtok(NULL, ",");
 80013a0:	4913      	ldr	r1, [pc, #76]	@ (80013f0 <Parse_TimeString+0x1f8>)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f007 fb82 	bl	8008aac <strtok>
 80013a8:	61f8      	str	r0, [r7, #28]
    if (token == NULL) { printf("ERR: Parsing Checksum failed.\n"); goto cleanup; }
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <Parse_TimeString+0x1c0>
 80013b0:	4819      	ldr	r0, [pc, #100]	@ (8001418 <Parse_TimeString+0x220>)
 80013b2:	f007 fa65 	bl	8008880 <puts>
 80013b6:	e005      	b.n	80013c4 <Parse_TimeString+0x1cc>
    DT.checksum = atoi(token); // 假設你的結構體有 checksum
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	f006 fb99 	bl	8007af0 <atoi>
 80013be:	4603      	mov	r3, r0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	753b      	strb	r3, [r7, #20]
    //printf("OK: Parsed Checksum = %u\n", DT.checksum);


cleanup:
    free(copy);
 80013c4:	69b8      	ldr	r0, [r7, #24]
 80013c6:	f006 fb9f 	bl	8007b08 <free>
    return DT;  // 修改4：回傳結構體
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	cb03      	ldmia	r3!, {r0, r1}
 80013d4:	6010      	str	r0, [r2, #0]
 80013d6:	6051      	str	r1, [r2, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	7213      	strb	r3, [r2, #8]
}
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800b298 	.word	0x0800b298
 80013e8:	0800b2d8 	.word	0x0800b2d8
 80013ec:	0800b2f4 	.word	0x0800b2f4
 80013f0:	0800b31c 	.word	0x0800b31c
 80013f4:	0800b320 	.word	0x0800b320
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	0800b33c 	.word	0x0800b33c
 8001400:	0800b358 	.word	0x0800b358
 8001404:	0800b374 	.word	0x0800b374
 8001408:	0800b390 	.word	0x0800b390
 800140c:	0800b3b0 	.word	0x0800b3b0
 8001410:	0800b3d0 	.word	0x0800b3d0
 8001414:	0800b3ec 	.word	0x0800b3ec
 8001418:	0800b40c 	.word	0x0800b40c

0800141c <dec_to_bcd>:
/* ====================RTC 函數結束=================*/

/* ====================[共用工具函数] BCD/十进制转换=================*/
// [MOD] 新增以下两个转换函数
uint8_t dec_to_bcd(uint8_t val) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <dec_to_bcd+0x48>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	b258      	sxtb	r0, r3
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <dec_to_bcd+0x48>)
 800143c:	fba3 1302 	umull	r1, r3, r3, r2
 8001440:	08d9      	lsrs	r1, r3, #3
 8001442:	460b      	mov	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4303      	orrs	r3, r0
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	cccccccd 	.word	0xcccccccd

08001468 <bcd_to_dec>:
uint8_t bcd_to_dec(uint8_t val) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
    return ((val >> 4) * 10) + (val & 0x0F);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <EEPROM_ResetHealth>:

void EEPROM_GetHealth(EEPROM_Health* health) {
  memcpy(health, &health_monitor, sizeof(EEPROM_Health));
}

void EEPROM_ResetHealth(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  memset(&health_monitor, 0, sizeof(EEPROM_Health));
 80014a0:	220c      	movs	r2, #12
 80014a2:	2100      	movs	r1, #0
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <EEPROM_ResetHealth+0x14>)
 80014a6:	f007 fadd 	bl	8008a64 <memset>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000204 	.word	0x20000204

080014b4 <CheckTimeStruct>:


//確認輸入的時間參數正確與否


bool CheckTimeStruct (const RTC_Time* time_to_check ){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	if(time_to_check->Command_ID != 1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	79db      	ldrb	r3, [r3, #7]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d004      	beq.n	80014ce <CheckTimeStruct+0x1a>
	{
		printf("is not time commend \n\n");
 80014c4:	481b      	ldr	r0, [pc, #108]	@ (8001534 <CheckTimeStruct+0x80>)
 80014c6:	f007 f9db 	bl	8008880 <puts>
	    return false;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e02e      	b.n	800152c <CheckTimeStruct+0x78>
	  // 使用 && (AND) 將所有條件串聯起來。
	    // 只有當 (條件1) AND (條件2) AND (條件3) ... 全部成立時，
	    // 整個表達式的結果才會是 true。
	    // 只要其中任何一個條件不成立，整個表達式立刻變為 false。

	    bool is_ok = (time_to_check->month >= 1 && time_to_check->month <= 12) &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	785b      	ldrb	r3, [r3, #1]
	            (time_to_check->date  >= 1 && time_to_check->date  <= 31) &&
	            (time_to_check->hours <= 23) && // 小時範圍 0-23
	            (time_to_check->minutes <= 59) && // 分鐘範圍 0-59
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d019      	beq.n	800150a <CheckTimeStruct+0x56>
	    bool is_ok = (time_to_check->month >= 1 && time_to_check->month <= 12) &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d815      	bhi.n	800150a <CheckTimeStruct+0x56>
	            (time_to_check->date  >= 1 && time_to_check->date  <= 31) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	789b      	ldrb	r3, [r3, #2]
	    bool is_ok = (time_to_check->month >= 1 && time_to_check->month <= 12) &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d011      	beq.n	800150a <CheckTimeStruct+0x56>
	            (time_to_check->date  >= 1 && time_to_check->date  <= 31) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80d      	bhi.n	800150a <CheckTimeStruct+0x56>
	            (time_to_check->hours <= 23) && // 小時範圍 0-23
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	78db      	ldrb	r3, [r3, #3]
	            (time_to_check->date  >= 1 && time_to_check->date  <= 31) &&
 80014f2:	2b17      	cmp	r3, #23
 80014f4:	d809      	bhi.n	800150a <CheckTimeStruct+0x56>
	            (time_to_check->minutes <= 59) && // 分鐘範圍 0-59
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	791b      	ldrb	r3, [r3, #4]
	            (time_to_check->hours <= 23) && // 小時範圍 0-23
 80014fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80014fc:	d805      	bhi.n	800150a <CheckTimeStruct+0x56>
	            (time_to_check->seconds <= 59);   // 秒鐘範圍 0-59
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	795b      	ldrb	r3, [r3, #5]
	            (time_to_check->minutes <= 59) && // 分鐘範圍 0-59
 8001502:	2b3b      	cmp	r3, #59	@ 0x3b
 8001504:	d801      	bhi.n	800150a <CheckTimeStruct+0x56>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <CheckTimeStruct+0x58>
 800150a:	2300      	movs	r3, #0
	    bool is_ok = (time_to_check->month >= 1 && time_to_check->month <= 12) &&
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]

	    if (is_ok) {
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <CheckTimeStruct+0x70>
	           printf("Validation OK: All fields are valid.\n");
 800151c:	4806      	ldr	r0, [pc, #24]	@ (8001538 <CheckTimeStruct+0x84>)
 800151e:	f007 f9af 	bl	8008880 <puts>
 8001522:	e002      	b.n	800152a <CheckTimeStruct+0x76>
	       } else {
	           printf("Validation FAILED: At least one field is out of range.\n");
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <CheckTimeStruct+0x88>)
 8001526:	f007 f9ab 	bl	8008880 <puts>
	       }

	       return is_ok;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800b880 	.word	0x0800b880
 8001538:	0800b898 	.word	0x0800b898
 800153c:	0800b8c0 	.word	0x0800b8c0

08001540 <HandleUartCommands>:
 *
 *         這種設計將「命令的接收/組裝」(由 ProcessUartRingBuffer 負責) 和
 *         「命令的解析/執行」(由本函數負責) 這兩個關注點完全分離，使得
 *         主迴圈的邏輯非常清晰，且整個系統是非阻塞的。
 */
void HandleUartCommands(void) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af04      	add	r7, sp, #16

    // 步驟 1: 檢查是否有一個完整的命令已經被 ProcessUartRingBuffer() 組裝好了
	// 預設 ProcessUartRingBuffer();都是正確的
	//但是這邊看不出來,

    if (g_command_line_ready) {
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HandleUartCommands+0xc4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d049      	beq.n	80015e4 <HandleUartCommands+0xa4>

        // --- 命令處理流程開始 ---

        // 為了安全，打印收到的原始命令

        printf("CMD RX: %s\n", g_command_line_buffer);
 8001550:	492d      	ldr	r1, [pc, #180]	@ (8001608 <HandleUartCommands+0xc8>)
 8001552:	482e      	ldr	r0, [pc, #184]	@ (800160c <HandleUartCommands+0xcc>)
 8001554:	f007 f92c 	bl	80087b0 <iprintf>

        // 步驟 2: 【已修正】直接將完整的命令字串傳遞給 Parse_TimeString
        //          讓它一次性解析所有欄位，包括 Command_ID
        //DS130T7_Time
        RTC_Time parsed_data= Parse_TimeString(g_command_line_buffer);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	492b      	ldr	r1, [pc, #172]	@ (8001608 <HandleUartCommands+0xc8>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe4b 	bl	80011f8 <Parse_TimeString>
        //<< 出現incompatible types when initializing type 'int' using type 'DS1307_Time'的錯誤



            // 步驟 3: 使用 switch 結構，根據命令 ID 分派任務
            switch (parsed_data.Command_ID) {
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <HandleUartCommands+0x2e>
 8001568:	2b02      	cmp	r3, #2
 800156a:	d016      	beq.n	800159a <HandleUartCommands+0x5a>
 800156c:	e033      	b.n	80015d6 <HandleUartCommands+0x96>
                case 1: // 命令 1: 設定時間
                	{
                        if (CheckTimeStruct(&parsed_data)) {
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff9f 	bl	80014b4 <CheckTimeStruct>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d032      	beq.n	80015e2 <HandleUartCommands+0xa2>
                        	if (RTC_SetTime(&parsed_data) == HAL_OK) {
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd4a 	bl	8001018 <RTC_SetTime>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HandleUartCommands+0x52>
                                printf("OK: Time set successfully.\n");
 800158a:	4821      	ldr	r0, [pc, #132]	@ (8001610 <HandleUartCommands+0xd0>)
 800158c:	f007 f978 	bl	8008880 <puts>
                            } else {
                                printf("ERR: Failed to set time via command.\n");
                            }
                        }
                    break;
 8001590:	e027      	b.n	80015e2 <HandleUartCommands+0xa2>
                                printf("ERR: Failed to set time via command.\n");
 8001592:	4820      	ldr	r0, [pc, #128]	@ (8001614 <HandleUartCommands+0xd4>)
 8001594:	f007 f974 	bl	8008880 <puts>
                    break;
 8001598:	e023      	b.n	80015e2 <HandleUartCommands+0xa2>

                case 2: // 命令 2: 獲取時間
                    {
                    	// 【确认】重用 parsed_data 来接收 GetTime 的结果。
                    	// 这是可行的，因为在这个 case 中，它不再需要被用于其他目的。
                        if (RTC_GetTime(&parsed_data) == HAL_OK) {
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fd8b 	bl	80010b8 <RTC_GetTime>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d112      	bne.n	80015ce <HandleUartCommands+0x8e>
                            printf("OK: Current time is 20%02u-%02u-%02u %02u:%02u:%02u\n",
                            		parsed_data.year, parsed_data.month, parsed_data.date,
 80015a8:	793b      	ldrb	r3, [r7, #4]
                            printf("OK: Current time is 20%02u-%02u-%02u %02u:%02u:%02u\n",
 80015aa:	4618      	mov	r0, r3
                            		parsed_data.year, parsed_data.month, parsed_data.date,
 80015ac:	797b      	ldrb	r3, [r7, #5]
                            printf("OK: Current time is 20%02u-%02u-%02u %02u:%02u:%02u\n",
 80015ae:	461c      	mov	r4, r3
                            		parsed_data.year, parsed_data.month, parsed_data.date,
 80015b0:	79bb      	ldrb	r3, [r7, #6]
                            printf("OK: Current time is 20%02u-%02u-%02u %02u:%02u:%02u\n",
 80015b2:	461d      	mov	r5, r3
									parsed_data.hours, parsed_data.minutes, parsed_data.seconds);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	7a3a      	ldrb	r2, [r7, #8]
 80015b8:	7a79      	ldrb	r1, [r7, #9]
                            printf("OK: Current time is 20%02u-%02u-%02u %02u:%02u:%02u\n",
 80015ba:	9102      	str	r1, [sp, #8]
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	462b      	mov	r3, r5
 80015c2:	4622      	mov	r2, r4
 80015c4:	4601      	mov	r1, r0
 80015c6:	4814      	ldr	r0, [pc, #80]	@ (8001618 <HandleUartCommands+0xd8>)
 80015c8:	f007 f8f2 	bl	80087b0 <iprintf>
                        } else {
                            printf("ERR: Failed to get time via command.\n");
                        }
                    }
                    break;
 80015cc:	e00a      	b.n	80015e4 <HandleUartCommands+0xa4>
                            printf("ERR: Failed to get time via command.\n");
 80015ce:	4813      	ldr	r0, [pc, #76]	@ (800161c <HandleUartCommands+0xdc>)
 80015d0:	f007 f956 	bl	8008880 <puts>
                    break;
 80015d4:	e006      	b.n	80015e4 <HandleUartCommands+0xa4>

                    // 在這裡可以輕鬆添加 case 3, 4, ...

                    default: // 未知的命令 ID
                    	printf("ERR: Unknown Command ID %d received.\n", parsed_data.Command_ID);
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	4619      	mov	r1, r3
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <HandleUartCommands+0xe0>)
 80015dc:	f007 f8e8 	bl	80087b0 <iprintf>
                    break;
 80015e0:	e000      	b.n	80015e4 <HandleUartCommands+0xa4>
                    break;
 80015e2:	bf00      	nop
                    }
            }
    }

        // 步驟 4: 【非常重要】處理完畢，必須放下旗子，重置緩衝區，準備接收下一條命令
        g_command_line_index = 0;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HandleUartCommands+0xe4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	801a      	strh	r2, [r3, #0]
        memset(g_command_line_buffer, 0, sizeof(g_command_line_buffer));
 80015ea:	2250      	movs	r2, #80	@ 0x50
 80015ec:	2100      	movs	r1, #0
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <HandleUartCommands+0xc8>)
 80015f0:	f007 fa38 	bl	8008a64 <memset>
        g_command_line_ready = false;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HandleUartCommands+0xc4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]

        // --- 命令處理流程結束 ---

}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdb0      	pop	{r4, r5, r7, pc}
 8001602:	bf00      	nop
 8001604:	20000262 	.word	0x20000262
 8001608:	20000210 	.word	0x20000210
 800160c:	0800b8f8 	.word	0x0800b8f8
 8001610:	0800b904 	.word	0x0800b904
 8001614:	0800b920 	.word	0x0800b920
 8001618:	0800b948 	.word	0x0800b948
 800161c:	0800b980 	.word	0x0800b980
 8001620:	0800b9a8 	.word	0x0800b9a8
 8001624:	20000260 	.word	0x20000260

08001628 <ProcessUartRingBuffer>:

/**
 * @brief 從 UART 環形緩衝區處理字節流，嘗試組裝成一行完整的命令。
 *        此函數應在主迴圈中被反覆、快速地調用。
 */
void ProcessUartRingBuffer(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

    // --- 防禦性檢查 ---
    // 如果上一條命令已經準備好，但主迴圈還沒處理 (旗標還是 true)，
    // 那我們就先不組裝新的命令，避免覆蓋掉未處理的數據。
    if (g_command_line_ready) {
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <ProcessUartRingBuffer+0x8c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d138      	bne.n	80016aa <ProcessUartRingBuffer+0x82>
        return; // 立刻退出，等待主迴圈處理
    }

    // --- 核心邏輯：從環形緩衝區取數據 ---
    // 只要環形緩衝區裡還有字節，我們就一直處理它。
    while (!rx_buf_is_empty()) {
 8001638:	e02e      	b.n	8001698 <ProcessUartRingBuffer+0x70>

        // 從環形緩衝區安全地取出一個字節。
        // (注意：你的 ring_buffer 實現可能需要關中斷來保證線程安全)
        uint8_t byte = rx_buf_get();
 800163a:	f000 fc61 	bl	8001f00 <rx_buf_get>
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

        // --- 判斷讀取到的字節是什麼 ---

        // 情況 A：讀到的是行結束符（回車或換行）
        if (byte == '\r' || byte == '\n') {
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b0d      	cmp	r3, #13
 8001646:	d002      	beq.n	800164e <ProcessUartRingBuffer+0x26>
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d10d      	bne.n	800166a <ProcessUartRingBuffer+0x42>

            // 檢查之前是否已經有內容（避免處理一個空的行）
            if (g_command_line_index > 0) {
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <ProcessUartRingBuffer+0x90>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d020      	beq.n	8001698 <ProcessUartRingBuffer+0x70>

                // 這是一行命令的結束！
                // 1. 在緩衝區的當前位置加上字串結束符 '\0'
                g_command_line_buffer[g_command_line_index] = '\0';
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <ProcessUartRingBuffer+0x90>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <ProcessUartRingBuffer+0x94>)
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

                // 2. 【核心】舉起旗子，通知主迴圈！
                g_command_line_ready = true;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <ProcessUartRingBuffer+0x8c>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]

                // 3. 工作完成，立刻退出函數。
                //    索引 g_command_line_index 會在主迴圈處理完命令後被重置。
                return;
 8001668:	e020      	b.n	80016ac <ProcessUartRingBuffer+0x84>
            }
            // 如果是空行 (index 為 0)，我們就忽略它，繼續下一個循環。

        }
        // 情況 B：讀到的是一個可打印的普通字符
        else if (isprint(byte)) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3301      	adds	r3, #1
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <ProcessUartRingBuffer+0x98>)
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <ProcessUartRingBuffer+0x70>

            // 檢查我們的行緩衝區是否還有空間
            if (g_command_line_index < (sizeof(g_command_line_buffer) - 1)) {
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <ProcessUartRingBuffer+0x90>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2b4e      	cmp	r3, #78	@ 0x4e
 8001682:	d809      	bhi.n	8001698 <ProcessUartRingBuffer+0x70>
                // 將這個字符存入緩衝區，並將索引後移一位
                g_command_line_buffer[g_command_line_index++] = byte;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <ProcessUartRingBuffer+0x90>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	b291      	uxth	r1, r2
 800168c:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <ProcessUartRingBuffer+0x90>)
 800168e:	8011      	strh	r1, [r2, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <ProcessUartRingBuffer+0x94>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	5453      	strb	r3, [r2, r1]
    while (!rx_buf_is_empty()) {
 8001698:	f000 fbc0 	bl	8001e1c <rx_buf_is_empty>
 800169c:	4603      	mov	r3, r0
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1c8      	bne.n	800163a <ProcessUartRingBuffer+0x12>
 80016a8:	e000      	b.n	80016ac <ProcessUartRingBuffer+0x84>
        return; // 立刻退出，等待主迴圈處理
 80016aa:	bf00      	nop
    }

    // 如果程式碼執行到這裡，說明環形緩衝區已經被處理完了，
    // 但是還沒有遇到一個完整的行結束符。
    // 沒關係，函數靜靜地結束，等待下一次被主迴圈調用。
}
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000262 	.word	0x20000262
 80016b8:	20000260 	.word	0x20000260
 80016bc:	20000210 	.word	0x20000210
 80016c0:	0800e714 	.word	0x0800e714

080016c4 <Scan_I2C_Address>:
#include <stdio.h>

// 假設 hi2c1 是你的 I2C Handle
// extern I2C_HandleTypeDef hi2c1;

void Scan_I2C_Address(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
    printf("--- Starting I2C Bus Scan ---\n");
 80016ca:	481b      	ldr	r0, [pc, #108]	@ (8001738 <Scan_I2C_Address+0x74>)
 80016cc:	f007 f8d8 	bl	8008880 <puts>
    HAL_StatusTypeDef status;
    uint8_t found_count = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	71fb      	strb	r3, [r7, #7]

    // I2C 的 7 位地址範圍是 1 到 127
    for (uint8_t i = 1; i < 128; i++) {
 80016d4:	2301      	movs	r3, #1
 80016d6:	71bb      	strb	r3, [r7, #6]
 80016d8:	e019      	b.n	800170e <Scan_I2C_Address+0x4a>
        // HAL 庫的函數需要一個左移一位的 8 位地址
        uint16_t device_address = (uint16_t)(i << 1);
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	80bb      	strh	r3, [r7, #4]

        // 嘗試與該地址進行一次簡短的通訊，超時設定得很短
        // `Trials` 設為 1，`Timeout` 設為 10ms
        status = HAL_I2C_IsDeviceReady(&hi2c1, device_address, 1, 10);
 80016e2:	88b9      	ldrh	r1, [r7, #4]
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	4814      	ldr	r0, [pc, #80]	@ (800173c <Scan_I2C_Address+0x78>)
 80016ea:	f002 fb53 	bl	8003d94 <HAL_I2C_IsDeviceReady>
 80016ee:	4603      	mov	r3, r0
 80016f0:	70fb      	strb	r3, [r7, #3]

        // 如果返回 HAL_OK，說明這個地址上有設備在回應
        if (status == HAL_OK) {
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <Scan_I2C_Address+0x44>
            printf("SUCCESS: Found device at I2C address 0x%02X\n", i);
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	@ (8001740 <Scan_I2C_Address+0x7c>)
 80016fe:	f007 f857 	bl	80087b0 <iprintf>
            found_count++;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	3301      	adds	r3, #1
 8001706:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 1; i < 128; i++) {
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	3301      	adds	r3, #1
 800170c:	71bb      	strb	r3, [r7, #6]
 800170e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001712:	2b00      	cmp	r3, #0
 8001714:	dae1      	bge.n	80016da <Scan_I2C_Address+0x16>
        }
    }

    if (found_count == 0) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d103      	bne.n	8001724 <Scan_I2C_Address+0x60>
        printf("RESULT: No I2C devices found on the bus.\n");
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <Scan_I2C_Address+0x80>)
 800171e:	f007 f8af 	bl	8008880 <puts>
    } else {
        printf("--- Scan Finished. Found %u device(s). ---\n", found_count);
    }
}
 8001722:	e004      	b.n	800172e <Scan_I2C_Address+0x6a>
        printf("--- Scan Finished. Found %u device(s). ---\n", found_count);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4619      	mov	r1, r3
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <Scan_I2C_Address+0x84>)
 800172a:	f007 f841 	bl	80087b0 <iprintf>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	0800b9d0 	.word	0x0800b9d0
 800173c:	20000264 	.word	0x20000264
 8001740:	0800b9f0 	.word	0x0800b9f0
 8001744:	0800ba20 	.word	0x0800ba20
 8001748:	0800ba4c 	.word	0x0800ba4c

0800174c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	@ 0x30
 8001750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	4b62      	ldr	r3, [pc, #392]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a61      	ldr	r2, [pc, #388]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b54      	ldr	r3, [pc, #336]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a53      	ldr	r2, [pc, #332]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b51      	ldr	r3, [pc, #324]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a4c      	ldr	r2, [pc, #304]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|ILI9552_RS_Pin|ILI9552_RTS_Pin|ILI9552_CS_Pin
 800180a:	2200      	movs	r2, #0
 800180c:	f640 7188 	movw	r1, #3976	@ 0xf88
 8001810:	4838      	ldr	r0, [pc, #224]	@ (80018f4 <MX_GPIO_Init+0x1a8>)
 8001812:	f001 fe05 	bl	8003420 <HAL_GPIO_WritePin>
                          |SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2101      	movs	r1, #1
 800181a:	4837      	ldr	r0, [pc, #220]	@ (80018f8 <MX_GPIO_Init+0x1ac>)
 800181c:	f001 fe00 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_CLK_Pin|SEG_DIO_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2130      	movs	r1, #48	@ 0x30
 8001824:	4834      	ldr	r0, [pc, #208]	@ (80018f8 <MX_GPIO_Init+0x1ac>)
 8001826:	f001 fdfb 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_STB_GPIO_Port, SEG_STB_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	4833      	ldr	r0, [pc, #204]	@ (80018fc <MX_GPIO_Init+0x1b0>)
 8001830:	f001 fdf6 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800183a:	4831      	ldr	r0, [pc, #196]	@ (8001900 <MX_GPIO_Init+0x1b4>)
 800183c:	f001 fdf0 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin ILI9552_RS_Pin ILI9552_RTS_Pin ILI9552_CS_Pin
                           SPI1_CS_Pin SPI2_CS_Pin */

  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|ILI9552_RS_Pin|ILI9552_RTS_Pin|ILI9552_CS_Pin
 8001840:	f640 7388 	movw	r3, #3976	@ 0xf88
 8001844:	61fb      	str	r3, [r7, #28]
                          |SPI1_CS_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4826      	ldr	r0, [pc, #152]	@ (80018f4 <MX_GPIO_Init+0x1a8>)
 800185a:	f001 fc45 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin SEG_CLK_Pin SEG_DIO_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|SEG_CLK_Pin|SEG_DIO_Pin;
 800185e:	2331      	movs	r3, #49	@ 0x31
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <MX_GPIO_Init+0x1ac>)
 8001876:	f001 fc37 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800187e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	481d      	ldr	r0, [pc, #116]	@ (8001904 <MX_GPIO_Init+0x1b8>)
 8001890:	f001 fc2a 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_STB_Pin */
  GPIO_InitStruct.Pin = SEG_STB_Pin;
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SEG_STB_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4814      	ldr	r0, [pc, #80]	@ (80018fc <MX_GPIO_Init+0x1b0>)
 80018ac:	f001 fc1c 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018b0:	2304      	movs	r3, #4
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	480e      	ldr	r0, [pc, #56]	@ (80018fc <MX_GPIO_Init+0x1b0>)
 80018c4:	f001 fc10 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80018c8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4807      	ldr	r0, [pc, #28]	@ (8001900 <MX_GPIO_Init+0x1b4>)
 80018e2:	f001 fc01 	bl	80030e8 <HAL_GPIO_Init>

}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40020000 	.word	0x40020000

08001908 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <MX_I2C1_Init+0x50>)
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <MX_I2C1_Init+0x54>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001914:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <MX_I2C1_Init+0x58>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800192a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_I2C1_Init+0x50>)
 8001946:	f001 fd9f 	bl	8003488 <HAL_I2C_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001950:	f000 fa4a 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000264 	.word	0x20000264
 800195c:	40005400 	.word	0x40005400
 8001960:	000186a0 	.word	0x000186a0

08001964 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a21      	ldr	r2, [pc, #132]	@ (8001a08 <HAL_I2C_MspInit+0xa4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d13b      	bne.n	80019fe <HAL_I2C_MspInit+0x9a>
	   * PB6     ------> I2C1_SCL
	   * PB7     ------> I2C1_SDA
    */
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a2:	23c0      	movs	r3, #192	@ 0xc0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b2:	2304      	movs	r3, #4
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4814      	ldr	r0, [pc, #80]	@ (8001a10 <HAL_I2C_MspInit+0xac>)
 80019be:	f001 fb93 	bl	80030e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 80019cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <HAL_I2C_MspInit+0xa8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201f      	movs	r0, #31
 80019e4:	f001 faa9 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019e8:	201f      	movs	r0, #31
 80019ea:	f001 fac2 	bl	8002f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2020      	movs	r0, #32
 80019f4:	f001 faa1 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019f8:	2020      	movs	r0, #32
 80019fa:	f001 faba 	bl	8002f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	b0a3      	sub	sp, #140	@ 0x8c
 8001a18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1a:	f001 f91d 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1e:	f000 f979 	bl	8001d14 <SystemClock_Config>
     * param  無
     * @return 無
     * @note   這裡可以寫一些額外的備註
     * @warning 這裡可以寫警告資訊
     */
  MX_GPIO_Init();
 8001a22:	f7ff fe93 	bl	800174c <MX_GPIO_Init>
     * @brief  SPI1初始化
     * param  無
     * @return 無

     */
  MX_SPI1_Init();
 8001a26:	f000 faa3 	bl	8001f70 <MX_SPI1_Init>
     * @brief  SPI2初始化
     * param  無
     * @return 無

     */
    MX_SPI2_Init();
 8001a2a:	f000 fad7 	bl	8001fdc <MX_SPI2_Init>
      * @brief  USART2初始化
      * param  無
      * @return 無
      */

  MX_USART2_UART_Init();
 8001a2e:	f000 fe11 	bl	8002654 <MX_USART2_UART_Init>
      * param  無
      * @return 無
      *
 	 *
     */
  MX_I2C1_Init();
 8001a32:	f7ff ff69 	bl	8001908 <MX_I2C1_Init>
    //MX_TIM1_Init();

  //MX_I2C3_Init();
  
  /* USER CODE BEGIN 2 */
  uart_io_init(); // 初始化UART輸入輸出
 8001a36:	f000 fcc5 	bl	80023c4 <uart_io_init>
  //




  printf("\n*************Scan_I2C_Address********************\n");
 8001a3a:	489e      	ldr	r0, [pc, #632]	@ (8001cb4 <main+0x2a0>)
 8001a3c:	f006 ff20 	bl	8008880 <puts>
  printf("Scan All I2C Device Address \n");
 8001a40:	489d      	ldr	r0, [pc, #628]	@ (8001cb8 <main+0x2a4>)
 8001a42:	f006 ff1d 	bl	8008880 <puts>
  Scan_I2C_Address();
 8001a46:	f7ff fe3d 	bl	80016c4 <Scan_I2C_Address>
  printf("\n************************************************\n");
 8001a4a:	489c      	ldr	r0, [pc, #624]	@ (8001cbc <main+0x2a8>)
 8001a4c:	f006 ff18 	bl	8008880 <puts>
  
  printf("\n**************I2C init. Device *****************\n");
 8001a50:	489b      	ldr	r0, [pc, #620]	@ (8001cc0 <main+0x2ac>)
 8001a52:	f006 ff15 	bl	8008880 <puts>
#endif

#endif


  I2C_Status status = I2C_Init_Devices();
 8001a56:	f7ff fa91 	bl	8000f7c <I2C_Init_Devices>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

    if (status != I2C_OK) {
 8001a60:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <main+0x6a>
      printf("[错误] I2C设备初始化失败! 错误码: %d\n", status);
 8001a68:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4895      	ldr	r0, [pc, #596]	@ (8001cc4 <main+0x2b0>)
 8001a70:	f006 fe9e 	bl	80087b0 <iprintf>
      Error_Handler();  // 需自定义错误处理函数
 8001a74:	f000 f9b8 	bl	8001de8 <Error_Handler>
      return status;
 8001a78:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a7c:	e116      	b.n	8001cac <main+0x298>
    }
    printf("I2C device init ok!yy \n\n");
 8001a7e:	4892      	ldr	r0, [pc, #584]	@ (8001cc8 <main+0x2b4>)
 8001a80:	f006 fefe 	bl	8008880 <puts>
    printf("\n************System Ready.**************************\n");
 8001a84:	4891      	ldr	r0, [pc, #580]	@ (8001ccc <main+0x2b8>)
 8001a86:	f006 fefb 	bl	8008880 <puts>


#define oled

#ifdef oled
    printf("init oled \n");
 8001a8a:	4891      	ldr	r0, [pc, #580]	@ (8001cd0 <main+0x2bc>)
 8001a8c:	f006 fef8 	bl	8008880 <puts>

    SH1106_StatusTypeDef oled_status; // 创建一个变量来接收返回值
    oled_status = SH1106_Init();     // 调用初始化函数
 8001a90:	f000 ff28 	bl	80028e4 <SH1106_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	#define HORSE_ANIM_WIDTH  128
	#define HORSE_ANIM_HEIGHT 64

	#define HORSE_ANIM_FRAME_COUNT (sizeof(horse_anim_frames) / sizeof(horse_anim_frames[0]))

    const unsigned char* horse_anim_frames[10] = {
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd4 <main+0x2c0>)
 8001a9c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aae:	e884 0003 	stmia.w	r4, {r0, r1}
            horse1, horse2, horse3, horse4, horse5,
            horse6, horse7, horse8, horse9, horse10
        };


    SH1106_Fill(SH1106_COLOR_BLACK);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 ffca 	bl	8002a4c <SH1106_Fill>
	SH1106_UpdateScreen();
 8001ab8:	f000 ff92 	bl	80029e0 <SH1106_UpdateScreen>


    if(oled_status == SH1106_OK){
 8001abc:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11d      	bne.n	8001b00 <main+0xec>
    	while(1){
    		for(int i=1;i< HORSE_ANIM_FRAME_COUNT;i++){// **修正：索引從 0 到 FRAME_COUNT-1**
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ac8:	e016      	b.n	8001af8 <main+0xe4>
    			// 每繪製一幀前清屏，清除上一幀的殘影
    			// 由於 DrawBitmap 會在畫圖前判斷像素是否為黑，所以通常只會在背景是靜態的情況下需要手動清屏
                // 但對於動畫，通常是全屏重畫，所以每次清屏是正常的
                SH1106_Fill(SH1106_COLOR_BLACK);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 ffbe 	bl	8002a4c <SH1106_Fill>

                // 繪製當前幀的馬
                SH1106_DrawBitmap(0, 0, horse_anim_frames[i], HORSE_ANIM_WIDTH, HORSE_ANIM_HEIGHT, SH1106_COLOR_WHITE);
 8001ad0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3378      	adds	r3, #120	@ 0x78
 8001ad6:	443b      	add	r3, r7
 8001ad8:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2340      	movs	r3, #64	@ 0x40
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f001 f819 	bl	8002b20 <SH1106_DrawBitmap>

                // 更新螢幕，將緩衝區內容 (馬) 顯示出來
                SH1106_UpdateScreen();
 8001aee:	f000 ff77 	bl	80029e0 <SH1106_UpdateScreen>
    		for(int i=1;i< HORSE_ANIM_FRAME_COUNT;i++){// **修正：索引從 0 到 FRAME_COUNT-1**
 8001af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af4:	3301      	adds	r3, #1
 8001af6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d9e5      	bls.n	8001aca <main+0xb6>
 8001afe:	e7e1      	b.n	8001ac4 <main+0xb0>
    		}
		    //SH1106_Fill(SH1106_COLOR_BLACK);
			//SH1106_UpdateScreen();
    	}
    }else{
		printf("OLED SH1106 Initialization FAILED! Error Code: %d\r\n", oled_status);
 8001b00:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b04:	4619      	mov	r1, r3
 8001b06:	4874      	ldr	r0, [pc, #464]	@ (8001cd8 <main+0x2c4>)
 8001b08:	f006 fe52 	bl	80087b0 <iprintf>

    //<讀取階段>
    HAL_StatusTypeDef DT_status;	//時間和日期的讀取狀態
    HAL_StatusTypeDef Temp_status;	//溫度的讀取狀態

    RTC_Time dt = {0};				//時間和日期
 8001b0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	721a      	strb	r2, [r3, #8]
    DS3231_Temp Temp={0};			//RTC的溫度
 8001b18:	2300      	movs	r3, #0
 8001b1a:	873b      	strh	r3, [r7, #56]	@ 0x38

    char YandN;



    printf("need setup time ? [Y]/[N] \n");
 8001b1c:	486f      	ldr	r0, [pc, #444]	@ (8001cdc <main+0x2c8>)
 8001b1e:	f006 feaf 	bl	8008880 <puts>
    scanf(" %c",&YandN);
 8001b22:	f107 0313 	add.w	r3, r7, #19
 8001b26:	4619      	mov	r1, r3
 8001b28:	486d      	ldr	r0, [pc, #436]	@ (8001ce0 <main+0x2cc>)
 8001b2a:	f006 feb1 	bl	8008890 <iscanf>

    if(YandN =='Y' || YandN =='y'){
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b59      	cmp	r3, #89	@ 0x59
 8001b32:	d002      	beq.n	8001b3a <main+0x126>
 8001b34:	7cfb      	ldrb	r3, [r7, #19]
 8001b36:	2b79      	cmp	r3, #121	@ 0x79
 8001b38:	d15b      	bne.n	8001bf2 <main+0x1de>
    	printf("\n input time :\n");
 8001b3a:	486a      	ldr	r0, [pc, #424]	@ (8001ce4 <main+0x2d0>)
 8001b3c:	f006 fea0 	bl	8008880 <puts>
        scanf("%32s", input_str);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4868      	ldr	r0, [pc, #416]	@ (8001ce8 <main+0x2d4>)
 8001b48:	f006 fea2 	bl	8008890 <iscanf>
        printf("Received_time : %s\r\n\n",input_str);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4866      	ldr	r0, [pc, #408]	@ (8001cec <main+0x2d8>)
 8001b54:	f006 fe2c 	bl	80087b0 <iprintf>
        dt = Parse_TimeString(input_str);
 8001b58:	463b      	mov	r3, r7
 8001b5a:	f107 0214 	add.w	r2, r7, #20
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fb49 	bl	80011f8 <Parse_TimeString>
 8001b66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b6a:	463a      	mov	r2, r7
 8001b6c:	6810      	ldr	r0, [r2, #0]
 8001b6e:	6851      	ldr	r1, [r2, #4]
 8001b70:	c303      	stmia	r3!, {r0, r1}
 8001b72:	7a12      	ldrb	r2, [r2, #8]
 8001b74:	701a      	strb	r2, [r3, #0]

        if (CheckTimeStruct(&dt)){
 8001b76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fc9a 	bl	80014b4 <CheckTimeStruct>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d031      	beq.n	8001bea <main+0x1d6>
        	printf("set time... \n");
 8001b86:	485a      	ldr	r0, [pc, #360]	@ (8001cf0 <main+0x2dc>)
 8001b88:	f006 fe7a 	bl	8008880 <puts>
        	DT_status = RTC_SetTime(&dt);
 8001b8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fa41 	bl	8001018 <RTC_SetTime>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
        	if (DT_status == HAL_OK) {
 8001b9c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11b      	bne.n	8001bdc <main+0x1c8>
        		printf("時間設定成功: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
        				dt.year, dt.month, dt.date, dt.day,
 8001ba4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
        		printf("時間設定成功: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001ba8:	461c      	mov	r4, r3
        				dt.year, dt.month, dt.date, dt.day,
 8001baa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
        		printf("時間設定成功: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001bae:	461d      	mov	r5, r3
        				dt.year, dt.month, dt.date, dt.day,
 8001bb0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
        		printf("時間設定成功: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001bb4:	461e      	mov	r6, r3
        				dt.year, dt.month, dt.date, dt.day,
 8001bb6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
						dt.hours , dt.minutes, dt.seconds);
 8001bba:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001bbe:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001bc2:	f897 0041 	ldrb.w	r0, [r7, #65]	@ 0x41
        		printf("時間設定成功: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001bc6:	9003      	str	r0, [sp, #12]
 8001bc8:	9102      	str	r1, [sp, #8]
 8001bca:	9201      	str	r2, [sp, #4]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	4633      	mov	r3, r6
 8001bd0:	462a      	mov	r2, r5
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	4847      	ldr	r0, [pc, #284]	@ (8001cf4 <main+0x2e0>)
 8001bd6:	f006 fdeb 	bl	80087b0 <iprintf>
        if (CheckTimeStruct(&dt)){
 8001bda:	e017      	b.n	8001c0c <main+0x1f8>
        	} else {
        		printf("錯誤: 時間設定失敗 (HAL狀態碼: %d)\r\n", DT_status);
 8001bdc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001be0:	4619      	mov	r1, r3
 8001be2:	4845      	ldr	r0, [pc, #276]	@ (8001cf8 <main+0x2e4>)
 8001be4:	f006 fde4 	bl	80087b0 <iprintf>
        if (CheckTimeStruct(&dt)){
 8001be8:	e010      	b.n	8001c0c <main+0x1f8>
        	}

        }else{
        	printf("No calibration command, do not calibrate the time, display the time \n\n");
 8001bea:	4844      	ldr	r0, [pc, #272]	@ (8001cfc <main+0x2e8>)
 8001bec:	f006 fe48 	bl	8008880 <puts>
        if (CheckTimeStruct(&dt)){
 8001bf0:	e00c      	b.n	8001c0c <main+0x1f8>
        }
    }else if(YandN =='N' || YandN =='n'){
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001bf6:	d002      	beq.n	8001bfe <main+0x1ea>
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	2b6e      	cmp	r3, #110	@ 0x6e
 8001bfc:	d103      	bne.n	8001c06 <main+0x1f2>
    	printf("show Time \n\n");
 8001bfe:	4840      	ldr	r0, [pc, #256]	@ (8001d00 <main+0x2ec>)
 8001c00:	f006 fe3e 	bl	8008880 <puts>
 8001c04:	e002      	b.n	8001c0c <main+0x1f8>
    }else{
    	printf("No input, no time correction, display time\n\n");
 8001c06:	483f      	ldr	r0, [pc, #252]	@ (8001d04 <main+0x2f0>)
 8001c08:	f006 fe3a 	bl	8008880 <puts>
#ifdef loop
    while(1){


        // 任務 1: 不斷地、非阻塞地從 UART 數據流中組裝命令
        ProcessUartRingBuffer();
 8001c0c:	f7ff fd0c 	bl	8001628 <ProcessUartRingBuffer>

        // 任務 2: 呼叫我們新的命令處理中心，讓它去檢查旗標並執行命令
        HandleUartCommands();
 8001c10:	f7ff fc96 	bl	8001540 <HandleUartCommands>

        // 讀取時間
    	DT_status = RTC_GetTime(&dt);
 8001c14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fa4d 	bl	80010b8 <RTC_GetTime>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71

    	//顯示時間 as
    	if (DT_status == HAL_OK) {
 8001c24:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11b      	bne.n	8001c64 <main+0x250>
    		printf("現在時間: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
    				dt.year,dt.month,dt.date,dt.day,dt.hours,dt.minutes,dt.seconds);
 8001c2c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
    		printf("現在時間: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001c30:	461c      	mov	r4, r3
    				dt.year,dt.month,dt.date,dt.day,dt.hours,dt.minutes,dt.seconds);
 8001c32:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
    		printf("現在時間: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001c36:	461d      	mov	r5, r3
    				dt.year,dt.month,dt.date,dt.day,dt.hours,dt.minutes,dt.seconds);
 8001c38:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
    		printf("現在時間: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001c3c:	461e      	mov	r6, r3
    				dt.year,dt.month,dt.date,dt.day,dt.hours,dt.minutes,dt.seconds);
 8001c3e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c42:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001c46:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8001c4a:	f897 0041 	ldrb.w	r0, [r7, #65]	@ 0x41
    		printf("現在時間: 20%02d-%02u-%02u(%02u) %02u:%02u:%02u\r\n",
 8001c4e:	9003      	str	r0, [sp, #12]
 8001c50:	9102      	str	r1, [sp, #8]
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4633      	mov	r3, r6
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	482a      	ldr	r0, [pc, #168]	@ (8001d08 <main+0x2f4>)
 8001c5e:	f006 fda7 	bl	80087b0 <iprintf>
 8001c62:	e005      	b.n	8001c70 <main+0x25c>
    	} else {
    		printf("錯誤: 時間設定失敗 (HAL狀態碼: %d)\r\n", DT_status);
 8001c64:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <main+0x2e4>)
 8001c6c:	f006 fda0 	bl	80087b0 <iprintf>
    	}

    	Temp_status = DS3231_GetTemp(&Temp);
 8001c70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fa7d 	bl	8001174 <DS3231_GetTemp>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

    	if(Temp_status == HAL_OK)
 8001c80:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10c      	bne.n	8001ca2 <main+0x28e>
    	{
    		printf("現在溫度: %d.%s °C\r\n", Temp.Integer,fracStr[Temp.Fraction]);
 8001c88:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <main+0x2f8>)
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	481c      	ldr	r0, [pc, #112]	@ (8001d10 <main+0x2fc>)
 8001c9e:	f006 fd87 	bl	80087b0 <iprintf>

    		//printf("現在溫度: 20%02d \r\n",    		    				Temp.Integer, Temp.Fraction);
    	}

    	//memset(input_str, 0, sizeof(input_str)); // 清空輸入緩衝
    	HAL_Delay(1000);
 8001ca2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ca6:	f001 f849 	bl	8002d3c <HAL_Delay>
        ProcessUartRingBuffer();
 8001caa:	e7af      	b.n	8001c0c <main+0x1f8>
    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */

}
 8001cac:	4618      	mov	r0, r3
 8001cae:	377c      	adds	r7, #124	@ 0x7c
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	0800ba78 	.word	0x0800ba78
 8001cb8:	0800baac 	.word	0x0800baac
 8001cbc:	0800bacc 	.word	0x0800bacc
 8001cc0:	0800bb00 	.word	0x0800bb00
 8001cc4:	0800bb34 	.word	0x0800bb34
 8001cc8:	0800bb68 	.word	0x0800bb68
 8001ccc:	0800bb80 	.word	0x0800bb80
 8001cd0:	0800bbb8 	.word	0x0800bbb8
 8001cd4:	0800bd98 	.word	0x0800bd98
 8001cd8:	0800bbc4 	.word	0x0800bbc4
 8001cdc:	0800bbf8 	.word	0x0800bbf8
 8001ce0:	0800bc14 	.word	0x0800bc14
 8001ce4:	0800bc18 	.word	0x0800bc18
 8001ce8:	0800bc28 	.word	0x0800bc28
 8001cec:	0800bc30 	.word	0x0800bc30
 8001cf0:	0800bc48 	.word	0x0800bc48
 8001cf4:	0800bc58 	.word	0x0800bc58
 8001cf8:	0800bc94 	.word	0x0800bc94
 8001cfc:	0800bcc4 	.word	0x0800bcc4
 8001d00:	0800bd0c 	.word	0x0800bd0c
 8001d04:	0800bd18 	.word	0x0800bd18
 8001d08:	0800bd44 	.word	0x0800bd44
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	0800bd7c 	.word	0x0800bd7c

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b094      	sub	sp, #80	@ 0x50
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	2230      	movs	r2, #48	@ 0x30
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f006 fe9e 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <SystemClock_Config+0xcc>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	4a27      	ldr	r2, [pc, #156]	@ (8001de0 <SystemClock_Config+0xcc>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <SystemClock_Config+0xcc>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <SystemClock_Config+0xd0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a21      	ldr	r2, [pc, #132]	@ (8001de4 <SystemClock_Config+0xd0>)
 8001d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <SystemClock_Config+0xd0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d84:	2308      	movs	r3, #8
 8001d86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d88:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d92:	2307      	movs	r3, #7
 8001d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f9d4 	bl	8006148 <HAL_RCC_OscConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001da6:	f000 f81f 	bl	8001de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001daa:	230f      	movs	r3, #15
 8001dac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dae:	2302      	movs	r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001db6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2105      	movs	r1, #5
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 fc35 	bl	8006638 <HAL_RCC_ClockConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001dd4:	f000 f808 	bl	8001de8 <Error_Handler>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3750      	adds	r7, #80	@ 0x50
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <Error_Handler+0x8>

08001df4 <ring_buffer_init>:

/**
 *  @brief初始化函式
 *  初始化頭尾指針，表示緩衝區為空。
 */
void ring_buffer_init(void) {
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
    rx_buf.head = 0;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <ring_buffer_init+0x20>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
    rx_buf.tail = 0;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <ring_buffer_init+0x20>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	805a      	strh	r2, [r3, #2]
    rx_buf_error = 0; // 初始化錯誤標誌
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <ring_buffer_init+0x24>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	200002b8 	.word	0x200002b8
 8001e18:	2000033c 	.word	0x2000033c

08001e1c <rx_buf_is_empty>:

 /**
 *  @brief判斷ring buff是否為空
 *  空條件：頭尾指針重合。
 */
bool rx_buf_is_empty(void) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    return (rx_buf.head == rx_buf.tail);
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <rx_buf_is_empty+0x24>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <rx_buf_is_empty+0x24>)
 8001e28:	885b      	ldrh	r3, [r3, #2]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	200002b8 	.word	0x200002b8

08001e44 <rx_buf_is_full>:
/**
 *  @brief判斷ring buff是否為滿
 *  滿條件：頭指針的下一個位置是尾指針（犧牲一個存儲單元來區分空和滿狀態）。
 */

bool rx_buf_is_full(void) {
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
    return ((rx_buf.head + 1) % RX_BUF_SIZE == rx_buf.tail);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <rx_buf_is_full+0x34>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	425a      	negs	r2, r3
 8001e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e5a:	bf58      	it	pl
 8001e5c:	4253      	negpl	r3, r2
 8001e5e:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <rx_buf_is_full+0x34>)
 8001e60:	8852      	ldrh	r2, [r2, #2]
 8001e62:	b292      	uxth	r2, r2
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	200002b8 	.word	0x200002b8

08001e7c <rx_buf_put>:
 *  僅在緩衝區未滿時寫入，避免數據覆蓋。
 */
//<V4.12>
//修改：添加臨界區保護與溢位標記

void rx_buf_put(uint8_t data) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e86:	f3ef 8310 	mrs	r3, PRIMASK
 8001e8a:	613b      	str	r3, [r7, #16]
  return(result);
 8001e8c:	693b      	ldr	r3, [r7, #16]
    uint32_t primask = __get_PRIMASK(); // 保存當前中斷狀態
 8001e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
    __disable_irq();                    // 禁用中斷（進入臨界區）

    if (!rx_buf_is_full()) {
 8001e94:	f7ff ffd6 	bl	8001e44 <rx_buf_is_full>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <rx_buf_put+0x56>
        rx_buf.buffer[rx_buf.head] = data;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <rx_buf_put+0x7c>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <rx_buf_put+0x7c>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	711a      	strb	r2, [r3, #4]
        rx_buf.head = (rx_buf.head + 1) % RX_BUF_SIZE;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <rx_buf_put+0x7c>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec6:	bf58      	it	pl
 8001ec8:	4253      	negpl	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <rx_buf_put+0x7c>)
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	e007      	b.n	8001ee2 <rx_buf_put+0x66>
    } else {
        rx_buf_error |= RINGBUF_ERROR_OVERFLOW; // 標記溢位錯誤
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <rx_buf_put+0x80>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <rx_buf_put+0x80>)
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f383 8810 	msr	PRIMASK, r3
}
 8001eec:	bf00      	nop
    }

    __set_PRIMASK(primask); // 恢復中斷狀態（退出臨界區）
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002b8 	.word	0x200002b8
 8001efc:	2000033c 	.word	0x2000033c

08001f00 <rx_buf_get>:
/**
 *  @brief 數據讀取
 *  僅在緩衝區非空時讀取，避免讀取無效數據。
 */
// 修改：添加臨界區保護
uint8_t rx_buf_get(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0e:	607b      	str	r3, [r7, #4]
  return(result);
 8001f10:	687b      	ldr	r3, [r7, #4]
    uint32_t primask = __get_PRIMASK();
 8001f12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
    __disable_irq();

    if (!rx_buf_is_empty()) {
 8001f18:	f7ff ff80 	bl	8001e1c <rx_buf_is_empty>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f083 0301 	eor.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d015      	beq.n	8001f54 <rx_buf_get+0x54>
        data = rx_buf.buffer[rx_buf.tail];
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <rx_buf_get+0x6c>)
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <rx_buf_get+0x6c>)
 8001f32:	4413      	add	r3, r2
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
        rx_buf.tail = (rx_buf.tail + 1) % RX_BUF_SIZE;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <rx_buf_get+0x6c>)
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	425a      	negs	r2, r3
 8001f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f4a:	bf58      	it	pl
 8001f4c:	4253      	negpl	r3, r2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <rx_buf_get+0x6c>)
 8001f52:	805a      	strh	r2, [r3, #2]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	bf00      	nop
    }

    __set_PRIMASK(primask);
    return data;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002b8 	.word	0x200002b8

08001f70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f76:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <MX_SPI1_Init+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <MX_SPI1_Init+0x64>)
 8001fc2:	f004 fd59 	bl	8006a78 <HAL_SPI_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fcc:	f7ff ff0c 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000340 	.word	0x20000340
 8001fd8:	40013000 	.word	0x40013000

08001fdc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <MX_SPI2_Init+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001fe8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_SPI2_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002028:	220a      	movs	r2, #10
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <MX_SPI2_Init+0x64>)
 800202e:	f004 fd23 	bl	8006a78 <HAL_SPI_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002038:	f7ff fed6 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000398 	.word	0x20000398
 8002044:	40003800 	.word	0x40003800

08002048 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	@ 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a41      	ldr	r2, [pc, #260]	@ (800216c <HAL_SPI_MspInit+0x124>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12c      	bne.n	80020c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	4a3f      	ldr	r2, [pc, #252]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002078:	6453      	str	r3, [r2, #68]	@ 0x44
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a38      	ldr	r2, [pc, #224]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80020a2:	23e0      	movs	r3, #224	@ 0xe0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020b2:	2305      	movs	r3, #5
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	482d      	ldr	r0, [pc, #180]	@ (8002174 <HAL_SPI_MspInit+0x12c>)
 80020be:	f001 f813 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020c2:	e04f      	b.n	8002164 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <HAL_SPI_MspInit+0x130>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d14a      	bne.n	8002164 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_SPI_MspInit+0x128>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002122:	230c      	movs	r3, #12
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002132:	2305      	movs	r3, #5
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	480f      	ldr	r0, [pc, #60]	@ (800217c <HAL_SPI_MspInit+0x134>)
 800213e:	f000 ffd3 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002154:	2305      	movs	r3, #5
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4808      	ldr	r0, [pc, #32]	@ (8002180 <HAL_SPI_MspInit+0x138>)
 8002160:	f000 ffc2 	bl	80030e8 <HAL_GPIO_Init>
}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	@ 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40013000 	.word	0x40013000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40003800 	.word	0x40003800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020400 	.word	0x40020400

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a0f      	ldr	r2, [pc, #60]	@ (80021d0 <HAL_MspInit+0x4c>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021c2:	2007      	movs	r0, #7
 80021c4:	f000 feae 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <NMI_Handler+0x4>

080021dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <MemManage_Handler+0x4>

080021ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222a:	f000 fd67 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <I2C1_EV_IRQHandler+0x10>)
 800223a:	f001 fed9 	bl	8003ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000264 	.word	0x20000264

08002248 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <I2C1_ER_IRQHandler+0x10>)
 800224e:	f002 f840 	bl	80042d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000264 	.word	0x20000264

0800225c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <USART2_IRQHandler+0x10>)
 8002262:	f004 fd3d 	bl	8006ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000564 	.word	0x20000564

08002270 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <USART3_IRQHandler+0x10>)
 8002276:	f004 fd33 	bl	8006ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200005ac 	.word	0x200005ac

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229e:	f006 fcbb 	bl	8008c18 <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
  return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <_exit+0x12>

080022ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f2:	605a      	str	r2, [r3, #4]
  return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_isatty>:

int _isatty(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	@ (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	@ (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f006 fc58 	bl	8008c18 <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20020000 	.word	0x20020000
 8002394:	00001000 	.word	0x00001000
 8002398:	200003f0 	.word	0x200003f0
 800239c:	20000b50 	.word	0x20000b50

080023a0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  *
  */
void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <SystemInit+0x20>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <SystemInit+0x20>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <uart_io_init>:
 * *************************************************
 * @brief　初始化UART中斷接收
 * ************************************************
 *
 */
void uart_io_init(void) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
    ring_buffer_init();
 80023c8:	f7ff fd14 	bl	8001df4 <ring_buffer_init>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1); // 显式类型转换
 80023cc:	2201      	movs	r2, #1
 80023ce:	4903      	ldr	r1, [pc, #12]	@ (80023dc <uart_io_init+0x18>)
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <uart_io_init+0x1c>)
 80023d2:	f004 fc60 	bl	8006c96 <HAL_UART_Receive_IT>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200003f4 	.word	0x200003f4
 80023e0:	20000564 	.word	0x20000564

080023e4 <HAL_UART_TxCpltCallback>:

//---------TX start-----------------------------------



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_UART_TxCpltCallback+0x24>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d102      	bne.n	80023fc <HAL_UART_TxCpltCallback+0x18>
        uart_tx_busy = false; // 標記發送完成
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_UART_TxCpltCallback+0x28>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    }
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40004400 	.word	0x40004400
 800240c:	2000045d 	.word	0x2000045d

08002410 <_write>:

// 改進的 _write 函式
int _write(int file, char *data, int len) {
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b08b      	sub	sp, #44	@ 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
    if (file != STDOUT_FILENO && file != STDERR_FILENO) {
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d005      	beq.n	800242e <_write+0x1e>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d002      	beq.n	800242e <_write+0x1e>
        return -1;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	e075      	b.n	800251a <_write+0x10a>
    }
    // Step 1: 直接處理換行符，填充當前非活躍緩衝區
    uint8_t target_buffer = (active_buffer == 0) ? 1 : 0;  // 選擇非活躍緩衝區
 800242e:	4b3d      	ldr	r3, [pc, #244]	@ (8002524 <_write+0x114>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	77fb      	strb	r3, [r7, #31]
    uint16_t processed_len = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	84fb      	strh	r3, [r7, #38]	@ 0x26

    for (int i = 0; i < len; i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	e034      	b.n	80024b4 <_write+0xa4>
        if (data[i] == '\n') {
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d119      	bne.n	800248a <_write+0x7a>
            if (processed_len + 2 > TX_BUFFER_SIZE) break;
 8002456:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002458:	2b7e      	cmp	r3, #126	@ 0x7e
 800245a:	d830      	bhi.n	80024be <_write+0xae>
            tx_buffer[target_buffer][processed_len++] = '\r';
 800245c:	7ffa      	ldrb	r2, [r7, #31]
 800245e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002460:	1c59      	adds	r1, r3, #1
 8002462:	84f9      	strh	r1, [r7, #38]	@ 0x26
 8002464:	4618      	mov	r0, r3
 8002466:	4930      	ldr	r1, [pc, #192]	@ (8002528 <_write+0x118>)
 8002468:	01d3      	lsls	r3, r2, #7
 800246a:	440b      	add	r3, r1
 800246c:	4403      	add	r3, r0
 800246e:	220d      	movs	r2, #13
 8002470:	701a      	strb	r2, [r3, #0]
            tx_buffer[target_buffer][processed_len++] = '\n';
 8002472:	7ffa      	ldrb	r2, [r7, #31]
 8002474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	84f9      	strh	r1, [r7, #38]	@ 0x26
 800247a:	4618      	mov	r0, r3
 800247c:	492a      	ldr	r1, [pc, #168]	@ (8002528 <_write+0x118>)
 800247e:	01d3      	lsls	r3, r2, #7
 8002480:	440b      	add	r3, r1
 8002482:	4403      	add	r3, r0
 8002484:	220a      	movs	r2, #10
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e011      	b.n	80024ae <_write+0x9e>
        } else {
            if (processed_len + 1 > TX_BUFFER_SIZE) break;
 800248a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800248c:	2b7f      	cmp	r3, #127	@ 0x7f
 800248e:	d818      	bhi.n	80024c2 <_write+0xb2>
            tx_buffer[target_buffer][processed_len++] = data[i];
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	18d1      	adds	r1, r2, r3
 8002496:	7ffa      	ldrb	r2, [r7, #31]
 8002498:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800249a:	1c58      	adds	r0, r3, #1
 800249c:	84f8      	strh	r0, [r7, #38]	@ 0x26
 800249e:	461c      	mov	r4, r3
 80024a0:	7808      	ldrb	r0, [r1, #0]
 80024a2:	4921      	ldr	r1, [pc, #132]	@ (8002528 <_write+0x118>)
 80024a4:	01d3      	lsls	r3, r2, #7
 80024a6:	440b      	add	r3, r1
 80024a8:	4423      	add	r3, r4
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	3301      	adds	r3, #1
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbc6      	blt.n	800244a <_write+0x3a>
 80024bc:	e002      	b.n	80024c4 <_write+0xb4>
            if (processed_len + 2 > TX_BUFFER_SIZE) break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <_write+0xb4>
            if (processed_len + 1 > TX_BUFFER_SIZE) break;
 80024c2:	bf00      	nop
        }
    }
    // Step 2: 等待前一次傳輸完成（非阻塞檢查，避免死等）
    uint32_t start = HAL_GetTick();
 80024c4:	f000 fc2e 	bl	8002d24 <HAL_GetTick>
 80024c8:	61b8      	str	r0, [r7, #24]
    while (uart_tx_busy) {
 80024ca:	e009      	b.n	80024e0 <_write+0xd0>
        if (HAL_GetTick() - start > 100) {
 80024cc:	f000 fc2a 	bl	8002d24 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d902      	bls.n	80024e0 <_write+0xd0>
            return -1;  // 超時返回錯誤
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e01c      	b.n	800251a <_write+0x10a>
    while (uart_tx_busy) {
 80024e0:	4b12      	ldr	r3, [pc, #72]	@ (800252c <_write+0x11c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <_write+0xbc>
        }
    }

    // Step 3: 啟動新傳輸並切換活躍緩衝區
    HAL_StatusTypeDef status = HAL_UART_Transmit_IT(&huart2, tx_buffer[target_buffer], processed_len);
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
 80024ec:	01db      	lsls	r3, r3, #7
 80024ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <_write+0x118>)
 80024f0:	4413      	add	r3, r2
 80024f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024f4:	4619      	mov	r1, r3
 80024f6:	480e      	ldr	r0, [pc, #56]	@ (8002530 <_write+0x120>)
 80024f8:	f004 fb97 	bl	8006c2a <HAL_UART_Transmit_IT>
 80024fc:	4603      	mov	r3, r0
 80024fe:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <_write+0x106>
        uart_tx_busy = true;
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <_write+0x11c>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
        active_buffer = target_buffer;  // 更新活躍緩衝區
 800250c:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <_write+0x114>)
 800250e:	7ffb      	ldrb	r3, [r7, #31]
 8002510:	7013      	strb	r3, [r2, #0]
        return len;  // 返回原始長度
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	e001      	b.n	800251a <_write+0x10a>
    }
    return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	372c      	adds	r7, #44	@ 0x2c
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	20000560 	.word	0x20000560
 8002528:	20000460 	.word	0x20000460
 800252c:	2000045d 	.word	0x2000045d
 8002530:	20000564 	.word	0x20000564

08002534 <_read>:
//--------------------------------------------------
*/

//<0412 新增>

int _read(int file, char *ptr, int len) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
    //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // 调试用LED

    if (file == STDIN_FILENO) {
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d134      	bne.n	80025b0 <_read+0x7c>
        int received = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
        uint32_t start = HAL_GetTick(); // 改用 HAL 的 tick 函数
 800254a:	f000 fbeb 	bl	8002d24 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]
        while (received < len) {
 8002550:	e026      	b.n	80025a0 <_read+0x6c>
            if (!rx_buf_is_empty()) {
 8002552:	f7ff fc63 	bl	8001e1c <rx_buf_is_empty>
 8002556:	4603      	mov	r3, r0
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <_read+0x5a>
                *ptr = rx_buf_get();
 8002562:	f7ff fccd 	bl	8001f00 <rx_buf_get>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	701a      	strb	r2, [r3, #0]
                ptr++;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
                received++;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
                if (*(ptr-1) == '\n' || *(ptr-1) == '\r') break;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b0a      	cmp	r3, #10
 8002582:	d013      	beq.n	80025ac <_read+0x78>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b0d      	cmp	r3, #13
 800258c:	d00e      	beq.n	80025ac <_read+0x78>
            }
            // 超时 5 秒（5000ms）
            if (HAL_GetTick() - start >= 5000) break;
 800258e:	f000 fbc9 	bl	8002d24 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3287 	movw	r2, #4999	@ 0x1387
 800259c:	4293      	cmp	r3, r2
 800259e:	d804      	bhi.n	80025aa <_read+0x76>
        while (received < len) {
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	dbd4      	blt.n	8002552 <_read+0x1e>
 80025a8:	e000      	b.n	80025ac <_read+0x78>
            if (HAL_GetTick() - start >= 5000) break;
 80025aa:	bf00      	nop
        }
        return received;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	e001      	b.n	80025b4 <_read+0x80>
    }
    return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_UART_RxCpltCallback>:


#ifdef FullLineInput
//這個個中斷程式適合用在『一整行的輸入,然後後續分析內容』

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin); // 调试用LED
 80025c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025c8:	481c      	ldr	r0, [pc, #112]	@ (800263c <HAL_UART_RxCpltCallback+0x80>)
 80025ca:	f000 ff42 	bl	8003452 <HAL_GPIO_TogglePin>

    if (huart->Instance == USART2) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002640 <HAL_UART_RxCpltCallback+0x84>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d12d      	bne.n	8002634 <HAL_UART_RxCpltCallback+0x78>
        // 移除阻塞的 HAL_Delay，改用非阻塞操作
        char received_char = rxBuffer[0]; // 获取接收到的字符
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <HAL_UART_RxCpltCallback+0x88>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	73fb      	strb	r3, [r7, #15]

        rx_buf_put(received_char); // 存入环形缓冲区
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc4b 	bl	8001e7c <rx_buf_put>

        // 边界检查，防止溢出
        if (RX_index < BUFFER_SIZE - 1) { // 保留一个位置给终止符
 80025e6:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b62      	cmp	r3, #98	@ 0x62
 80025ec:	d81a      	bhi.n	8002624 <HAL_UART_RxCpltCallback+0x68>
            if (received_char == '\r' || received_char == '\n') {
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b0d      	cmp	r3, #13
 80025f2:	d002      	beq.n	80025fa <HAL_UART_RxCpltCallback+0x3e>
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b0a      	cmp	r3, #10
 80025f8:	d109      	bne.n	800260e <HAL_UART_RxCpltCallback+0x52>
                inputBuffer[RX_index] = '\0'; // 终止字符串
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_UART_RxCpltCallback+0x90>)
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]
                RX_index = 0; // 重置索引
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e00d      	b.n	800262a <HAL_UART_RxCpltCallback+0x6e>
            } else {
                inputBuffer[RX_index++] = received_char; // 存储字符
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	b2d1      	uxtb	r1, r2
 8002616:	4a0c      	ldr	r2, [pc, #48]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 8002618:	7011      	strb	r1, [r2, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_UART_RxCpltCallback+0x90>)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	5453      	strb	r3, [r2, r1]
 8002622:	e002      	b.n	800262a <HAL_UART_RxCpltCallback+0x6e>
            }
        } else {
            // 缓冲区满，清空并提示错误
            RX_index = 0;
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_UART_RxCpltCallback+0x8c>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
        }

        // 重启接收中断
        HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 800262a:	2201      	movs	r2, #1
 800262c:	4905      	ldr	r1, [pc, #20]	@ (8002644 <HAL_UART_RxCpltCallback+0x88>)
 800262e:	4808      	ldr	r0, [pc, #32]	@ (8002650 <HAL_UART_RxCpltCallback+0x94>)
 8002630:	f004 fb31 	bl	8006c96 <HAL_UART_Receive_IT>
    }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40004400 	.word	0x40004400
 8002644:	200003f4 	.word	0x200003f4
 8002648:	2000045c 	.word	0x2000045c
 800264c:	200003f8 	.word	0x200003f8
 8002650:	20000564 	.word	0x20000564

08002654 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <MX_USART2_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <MX_USART2_UART_Init+0x4c>)
 800268c:	f004 fa7d 	bl	8006b8a <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f7ff fba7 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000564 	.word	0x20000564
 80026a4:	40004400 	.word	0x40004400

080026a8 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	@ 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_UART_MspInit+0x148>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d134      	bne.n	8002734 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b49      	ldr	r3, [pc, #292]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a48      	ldr	r2, [pc, #288]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b42      	ldr	r3, [pc, #264]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a41      	ldr	r2, [pc, #260]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002702:	230c      	movs	r3, #12
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002712:	2307      	movs	r3, #7
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4836      	ldr	r0, [pc, #216]	@ (80027f8 <HAL_UART_MspInit+0x150>)
 800271e:	f000 fce3 	bl	80030e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2026      	movs	r0, #38	@ 0x26
 8002728:	f000 fc07 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800272c:	2026      	movs	r0, #38	@ 0x26
 800272e:	f000 fc20 	bl	8002f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002732:	e058      	b.n	80027e6 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_UART_MspInit+0x154>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d153      	bne.n	80027e6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b2c      	ldr	r3, [pc, #176]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a2b      	ldr	r2, [pc, #172]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b25      	ldr	r3, [pc, #148]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_UART_MspInit+0x14c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027a4:	2307      	movs	r3, #7
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4814      	ldr	r0, [pc, #80]	@ (8002800 <HAL_UART_MspInit+0x158>)
 80027b0:	f000 fc9a 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c6:	2307      	movs	r3, #7
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <HAL_UART_MspInit+0x15c>)
 80027d2:	f000 fc89 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2027      	movs	r0, #39	@ 0x27
 80027dc:	f000 fbad 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027e0:	2027      	movs	r0, #39	@ 0x27
 80027e2:	f000 fbc6 	bl	8002f72 <HAL_NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3730      	adds	r7, #48	@ 0x30
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40004800 	.word	0x40004800
 8002800:	40020400 	.word	0x40020400
 8002804:	40020c00 	.word	0x40020c00

08002808 <SH1106_Translate_HAL_Status>:
/**
 * @brief  【已实现】将 HAL_StatusTypeDef 转换为 SH1106_StatusTypeDef
 * @param  hal_status: 从 HAL 库函数返回的状态码
 * @retval 对应的 SH1106 状态码
 */
static SH1106_StatusTypeDef SH1106_Translate_HAL_Status(HAL_StatusTypeDef hal_status) {
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
    switch(hal_status) {
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d00a      	beq.n	800282e <SH1106_Translate_HAL_Status+0x26>
 8002818:	2b03      	cmp	r3, #3
 800281a:	dc0a      	bgt.n	8002832 <SH1106_Translate_HAL_Status+0x2a>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <SH1106_Translate_HAL_Status+0x1e>
 8002820:	2b02      	cmp	r3, #2
 8002822:	d002      	beq.n	800282a <SH1106_Translate_HAL_Status+0x22>
 8002824:	e005      	b.n	8002832 <SH1106_Translate_HAL_Status+0x2a>
        case HAL_OK:
            return SH1106_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e004      	b.n	8002834 <SH1106_Translate_HAL_Status+0x2c>

        case HAL_BUSY:
            return SH1106_ERROR_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <SH1106_Translate_HAL_Status+0x2c>

        case HAL_TIMEOUT:
            return SH1106_ERROR_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e000      	b.n	8002834 <SH1106_Translate_HAL_Status+0x2c>

        case HAL_ERROR:
        default:
            return SH1106_ERROR;
 8002832:	2301      	movs	r3, #1
    }
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SH1106_WriteCommand>:

/**
 * @brief  【統一】發送一個命令字節
 */

static SH1106_StatusTypeDef SH1106_WriteCommand(uint8_t command) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af04      	add	r7, sp, #16
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, 0x00, 1, &command, 1, 100);
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	2200      	movs	r2, #0
 800285a:	2178      	movs	r1, #120	@ 0x78
 800285c:	480e      	ldr	r0, [pc, #56]	@ (8002898 <SH1106_WriteCommand+0x58>)
 800285e:	f000 ff6d 	bl	800373c <HAL_I2C_Mem_Write>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00f      	beq.n	800288c <SH1106_WriteCommand+0x4c>
        // 在返回错误之前，先打印详细的日志！
        LOG_ERROR("I2C WriteCommand failed for CMD=0x%02X, HAL_Status=%d", command, status);
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	461a      	mov	r2, r3
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	225f      	movs	r2, #95	@ 0x5f
 8002878:	4908      	ldr	r1, [pc, #32]	@ (800289c <SH1106_WriteCommand+0x5c>)
 800287a:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <SH1106_WriteCommand+0x60>)
 800287c:	f005 ff98 	bl	80087b0 <iprintf>
        return SH1106_Translate_HAL_Status(status); // 假设有这个转换函数
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ffc0 	bl	8002808 <SH1106_Translate_HAL_Status>
 8002888:	4603      	mov	r3, r0
 800288a:	e000      	b.n	800288e <SH1106_WriteCommand+0x4e>
    }
    return SH1106_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000264 	.word	0x20000264
 800289c:	0800bdd0 	.word	0x0800bdd0
 80028a0:	0800bdf4 	.word	0x0800bdf4

080028a4 <OLED_WriteData>:
/**
 * @brief  【統一】發送一塊數據
 */

// 傳送資料（Data，可傳整個 buffer）
SH1106_StatusTypeDef OLED_WriteData(uint8_t *data, uint16_t size) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af04      	add	r7, sp, #16
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(SH1106_I2C, SH1106_I2C_ADDR, 0x40, 1, data, size, HAL_MAX_DELAY);
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2301      	movs	r3, #1
 80028c0:	2240      	movs	r2, #64	@ 0x40
 80028c2:	2178      	movs	r1, #120	@ 0x78
 80028c4:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <OLED_WriteData+0x3c>)
 80028c6:	f000 ff39 	bl	800373c <HAL_I2C_Mem_Write>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
    return SH1106_Translate_HAL_Status(status);
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff99 	bl	8002808 <SH1106_Translate_HAL_Status>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000264 	.word	0x20000264

080028e4 <SH1106_Init>:
 * **/
#ifdef Ver_SH1106

// ... (宏定义部分不变) ...

SH1106_StatusTypeDef SH1106_Init(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&hi2c1, SH1106_I2C_ADDR, 1, 200) != HAL_OK) {
 80028e8:	23c8      	movs	r3, #200	@ 0xc8
 80028ea:	2201      	movs	r2, #1
 80028ec:	2178      	movs	r1, #120	@ 0x78
 80028ee:	4836      	ldr	r0, [pc, #216]	@ (80029c8 <SH1106_Init+0xe4>)
 80028f0:	f001 fa50 	bl	8003d94 <HAL_I2C_IsDeviceReady>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <SH1106_Init+0x26>
        LOG_ERROR("Device not found at I2C address 0x%02X", SH1106_I2C_ADDR);
 80028fa:	2378      	movs	r3, #120	@ 0x78
 80028fc:	22d4      	movs	r2, #212	@ 0xd4
 80028fe:	4933      	ldr	r1, [pc, #204]	@ (80029cc <SH1106_Init+0xe8>)
 8002900:	4833      	ldr	r0, [pc, #204]	@ (80029d0 <SH1106_Init+0xec>)
 8002902:	f005 ff55 	bl	80087b0 <iprintf>
        return SH1106_ERROR_INIT_DEV_NOT_FOUND;
 8002906:	2305      	movs	r3, #5
 8002908:	e05c      	b.n	80029c4 <SH1106_Init+0xe0>
    }

    HAL_Delay(100);
 800290a:	2064      	movs	r0, #100	@ 0x64
 800290c:	f000 fa16 	bl	8002d3c <HAL_Delay>
    LOG_INFO("SH1106 Device found. Sending init sequence...");
 8002910:	4830      	ldr	r0, [pc, #192]	@ (80029d4 <SH1106_Init+0xf0>)
 8002912:	f005 ffb5 	bl	8008880 <puts>

    SH1106_WriteCommand(OLED_DISPLAY_OFF);
 8002916:	20ae      	movs	r0, #174	@ 0xae
 8002918:	f7ff ff92 	bl	8002840 <SH1106_WriteCommand>

    // --- 1. 核心时钟和布局配置 ---
    SH1106_WriteCommand(OLED_SET_CLK_DIV);
 800291c:	20d5      	movs	r0, #213	@ 0xd5
 800291e:	f7ff ff8f 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_CLK_DIV);
 8002922:	2080      	movs	r0, #128	@ 0x80
 8002924:	f7ff ff8c 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_MUX_RATIO);
 8002928:	20a8      	movs	r0, #168	@ 0xa8
 800292a:	f7ff ff89 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_MUX_RATIO);
 800292e:	203f      	movs	r0, #63	@ 0x3f
 8002930:	f7ff ff86 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_DISPLAY_OFFSET);
 8002934:	20d3      	movs	r0, #211	@ 0xd3
 8002936:	f7ff ff83 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_DISPLAY_OFFSET);
 800293a:	2000      	movs	r0, #0
 800293c:	f7ff ff80 	bl	8002840 <SH1106_WriteCommand>
    //SH1106_WriteCommand(OLED_SET_START_LINE | 0x00); // 明确设置起始行为 0

    // --- 2. SH1106 专属配置 (关键) ---
    // 设置 Column 起始地址为 2，以在 132 宽的 RAM 中居中显示 128 宽的图像
    // 这等同于 SH1106_COLUMN_OFFSET 的作用，但在 Init 中设置更彻底
    SH1106_WriteCommand(0x02); // Set Lower Column Address
 8002940:	2002      	movs	r0, #2
 8002942:	f7ff ff7d 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(0x10); // Set Higher Column Address
 8002946:	2010      	movs	r0, #16
 8002948:	f7ff ff7a 	bl	8002840 <SH1106_WriteCommand>

    // --- 3. 硬件扫描方向 ---
    SH1106_WriteCommand(OLED_SEG_REMAP_127); // Column 129 mapped to SEG0
 800294c:	20a1      	movs	r0, #161	@ 0xa1
 800294e:	f7ff ff77 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(OLED_SCAN_DIR_REMAP); // Scan from COM[N-1] to COM0
 8002952:	20c8      	movs	r0, #200	@ 0xc8
 8002954:	f7ff ff74 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_COM_CONFIG);
 8002958:	20da      	movs	r0, #218	@ 0xda
 800295a:	f7ff ff71 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_COM_CONFIG);
 800295e:	2012      	movs	r0, #18
 8002960:	f7ff ff6e 	bl	8002840 <SH1106_WriteCommand>

    // --- 4. 电压和亮度配置 ---
    SH1106_WriteCommand(OLED_SET_DC_DC_MODE);
 8002964:	20ad      	movs	r0, #173	@ 0xad
 8002966:	f7ff ff6b 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(OLED_DC_DC_ON); // 打开内置电荷泵
 800296a:	208b      	movs	r0, #139	@ 0x8b
 800296c:	f7ff ff68 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_CONTRAST);
 8002970:	2081      	movs	r0, #129	@ 0x81
 8002972:	f7ff ff65 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_CONTRAST_VALUE);
 8002976:	20ff      	movs	r0, #255	@ 0xff
 8002978:	f7ff ff62 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_PRECHARGE);
 800297c:	20d9      	movs	r0, #217	@ 0xd9
 800297e:	f7ff ff5f 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_PRECHARGE);
 8002982:	201f      	movs	r0, #31
 8002984:	f7ff ff5c 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_VCOMH);
 8002988:	20db      	movs	r0, #219	@ 0xdb
 800298a:	f7ff ff59 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(INIT_VCOMH);
 800298e:	2040      	movs	r0, #64	@ 0x40
 8002990:	f7ff ff56 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_SET_PUMP_VOLTAGE | INIT_PUMP_VOLTAGE); // 明确设置电荷泵电压
 8002994:	2032      	movs	r0, #50	@ 0x32
 8002996:	f7ff ff53 	bl	8002840 <SH1106_WriteCommand>

    // --- 5. 最终显示模式设置 ---
    SH1106_WriteCommand(OLED_DISPLAY_ALL_ON_RESUME); // 显示 RAM 内容
 800299a:	20a4      	movs	r0, #164	@ 0xa4
 800299c:	f7ff ff50 	bl	8002840 <SH1106_WriteCommand>
    SH1106_WriteCommand(OLED_NORMAL_DISPLAY);       // 正常模式
 80029a0:	20a6      	movs	r0, #166	@ 0xa6
 80029a2:	f7ff ff4d 	bl	8002840 <SH1106_WriteCommand>

    SH1106_WriteCommand(OLED_DISPLAY_ON);           // 开显示
 80029a6:	20af      	movs	r0, #175	@ 0xaf
 80029a8:	f7ff ff4a 	bl	8002840 <SH1106_WriteCommand>

    // ... (软件状态初始化和清屏) ...
    SH1106.Initialized = 1;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <SH1106_Init+0xf4>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	715a      	strb	r2, [r3, #5]
    SH1106_Fill(SH1106_COLOR_BLACK);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 f84a 	bl	8002a4c <SH1106_Fill>
    SH1106_UpdateScreen();
 80029b8:	f000 f812 	bl	80029e0 <SH1106_UpdateScreen>

    LOG_INFO("Init sequence sent successfully.");
 80029bc:	4807      	ldr	r0, [pc, #28]	@ (80029dc <SH1106_Init+0xf8>)
 80029be:	f005 ff5f 	bl	8008880 <puts>
    return SH1106_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000264 	.word	0x20000264
 80029cc:	0800bdd0 	.word	0x0800bdd0
 80029d0:	0800be3c 	.word	0x0800be3c
 80029d4:	0800be74 	.word	0x0800be74
 80029d8:	200009f4 	.word	0x200009f4
 80029dc:	0800beac 	.word	0x0800beac

080029e0 <SH1106_UpdateScreen>:
/**
 * @brief 將緩存區內容刷新到螢幕
 */


void SH1106_UpdateScreen(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < (SH1106_HEIGHT / 8); page++) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	e024      	b.n	8002a36 <SH1106_UpdateScreen+0x56>
        SH1106_WriteCommand(0xB0 + page);
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	3b50      	subs	r3, #80	@ 0x50
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff24 	bl	8002840 <SH1106_WriteCommand>
        uint8_t col_addr = SH1106_COLUMN_OFFSET;
 80029f8:	2302      	movs	r3, #2
 80029fa:	71bb      	strb	r3, [r7, #6]
        SH1106_WriteCommand(0x00 | (col_addr & 0x0F));
 80029fc:	79bb      	ldrb	r3, [r7, #6]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff1b 	bl	8002840 <SH1106_WriteCommand>
        SH1106_WriteCommand(0x10 | ((col_addr >> 4) & 0x0F));
 8002a0a:	79bb      	ldrb	r3, [r7, #6]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f043 0310 	orr.w	r3, r3, #16
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff10 	bl	8002840 <SH1106_WriteCommand>
        OLED_WriteData(&SH1106_Buffer[SH1106_WIDTH * page], SH1106_WIDTH);
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	01db      	lsls	r3, r3, #7
 8002a24:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <SH1106_UpdateScreen+0x68>)
 8002a26:	4413      	add	r3, r2
 8002a28:	2180      	movs	r1, #128	@ 0x80
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff3a 	bl	80028a4 <OLED_WriteData>
    for (uint8_t page = 0; page < (SH1106_HEIGHT / 8); page++) {
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	3301      	adds	r3, #1
 8002a34:	71fb      	strb	r3, [r7, #7]
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	d9d7      	bls.n	80029ec <SH1106_UpdateScreen+0xc>
    }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200005f4 	.word	0x200005f4

08002a4c <SH1106_Fill>:


/**
 * @brief 用指定顏色填充整個緩存區
 */
void SH1106_Fill(SH1106_COLOR_t color) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <SH1106_Fill+0x14>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <SH1106_Fill+0x16>
 8002a60:	23ff      	movs	r3, #255	@ 0xff
 8002a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a66:	4619      	mov	r1, r3
 8002a68:	4803      	ldr	r0, [pc, #12]	@ (8002a78 <SH1106_Fill+0x2c>)
 8002a6a:	f005 fffb 	bl	8008a64 <memset>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200005f4 	.word	0x200005f4

08002a7c <SH1106_DrawPixel>:


/**
 * @brief 在緩存區中畫一個點
 */
void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
 8002a86:	460b      	mov	r3, r1
 8002a88:	80bb      	strh	r3, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	70fb      	strb	r3, [r7, #3]
    if (x >= SH1106_WIDTH || y >= SH1106_HEIGHT) {
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a92:	d83d      	bhi.n	8002b10 <SH1106_DrawPixel+0x94>
 8002a94:	88bb      	ldrh	r3, [r7, #4]
 8002a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a98:	d83a      	bhi.n	8002b10 <SH1106_DrawPixel+0x94>
        return; // 超出邊界
    }

    if (color == SH1106_COLOR_WHITE) {
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d11a      	bne.n	8002ad6 <SH1106_DrawPixel+0x5a>
        SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= (1 << (y % 8));
 8002aa0:	88fa      	ldrh	r2, [r7, #6]
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	b298      	uxth	r0, r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	01db      	lsls	r3, r3, #7
 8002aac:	4413      	add	r3, r2
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <SH1106_DrawPixel+0xa0>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	b25a      	sxtb	r2, r3
 8002ab4:	88bb      	ldrh	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b259      	sxtb	r1, r3
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	01db      	lsls	r3, r3, #7
 8002acc:	4413      	add	r3, r2
 8002ace:	b2c9      	uxtb	r1, r1
 8002ad0:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <SH1106_DrawPixel+0xa0>)
 8002ad2:	54d1      	strb	r1, [r2, r3]
 8002ad4:	e01d      	b.n	8002b12 <SH1106_DrawPixel+0x96>
    } else {
        SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	08db      	lsrs	r3, r3, #3
 8002adc:	b298      	uxth	r0, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	01db      	lsls	r3, r3, #7
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <SH1106_DrawPixel+0xa0>)
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	b25a      	sxtb	r2, r3
 8002aea:	88bb      	ldrh	r3, [r7, #4]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	b259      	sxtb	r1, r3
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	4603      	mov	r3, r0
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	4413      	add	r3, r2
 8002b08:	b2c9      	uxtb	r1, r1
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <SH1106_DrawPixel+0xa0>)
 8002b0c:	54d1      	strb	r1, [r2, r3]
 8002b0e:	e000      	b.n	8002b12 <SH1106_DrawPixel+0x96>
        return; // 超出邊界
 8002b10:	bf00      	nop
    }
}
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	200005f4 	.word	0x200005f4

08002b20 <SH1106_DrawBitmap>:
 * @param height   图像高度 (像素)
 * @param is_vertical_format 数据格式: 0=水平扫描, 1=垂直扫描
 *
 */
void SH1106_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60ba      	str	r2, [r7, #8]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	81fb      	strh	r3, [r7, #14]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	81bb      	strh	r3, [r7, #12]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da00      	bge.n	8002b42 <SH1106_DrawBitmap+0x22>
 8002b40:	3307      	adds	r3, #7
 8002b42:	10db      	asrs	r3, r3, #3
 8002b44:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]

    for (int16_t j = 0; j < h; j++, y++) // 外層迴圈：遍歷每一行 (row)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	82bb      	strh	r3, [r7, #20]
 8002b4e:	e04e      	b.n	8002bee <SH1106_DrawBitmap+0xce>
    	{
        for (int16_t i = 0; i < w; i++) // 內層迴圈：遍歷該行的每一個像素 (pixel)
 8002b50:	2300      	movs	r3, #0
 8002b52:	827b      	strh	r3, [r7, #18]
 8002b54:	e039      	b.n	8002bca <SH1106_DrawBitmap+0xaa>
        	{
            // 【關鍵邏輯 1】
            if (i % 8 == 0) {
 8002b56:	8a7b      	ldrh	r3, [r7, #18]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d112      	bne.n	8002b88 <SH1106_DrawBitmap+0x68>
            	// 只在需要的時候（每 8 個像素）從記憶體讀取一次新的 byte
                byte = bitmap[j * byteWidth + i / 8];
 8002b62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b6a:	fb03 f202 	mul.w	r2, r3, r2
 8002b6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da00      	bge.n	8002b78 <SH1106_DrawBitmap+0x58>
 8002b76:	3307      	adds	r3, #7
 8002b78:	10db      	asrs	r3, r3, #3
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	75fb      	strb	r3, [r7, #23]
            }
            // 【關鍵邏輯 2】
            if (byte & (0x80 >> (i % 8))) {
 8002b88:	7dfa      	ldrb	r2, [r7, #23]
 8002b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b8e:	4259      	negs	r1, r3
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	f001 0107 	and.w	r1, r1, #7
 8002b98:	bf58      	it	pl
 8002b9a:	424b      	negpl	r3, r1
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	410b      	asrs	r3, r1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <SH1106_DrawBitmap+0x9e>
            	// 使用位元遮罩檢查當前像素對應的 bit 是否為 1
                // 0x80 >> 0 -> 1000 0000 (檢查第0個像素)
                // 0x80 >> 1 -> 0100 0000 (檢查第1個像素)
                // ...
                // 0x80 >> 7 -> 0000 0001 (檢查第7個像素)
                SH1106_DrawPixel(x + i, y, (SH1106_COLOR_t)color);
 8002baa:	89fa      	ldrh	r2, [r7, #14]
 8002bac:	8a7b      	ldrh	r3, [r7, #18]
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	89b9      	ldrh	r1, [r7, #12]
 8002bb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5f 	bl	8002a7c <SH1106_DrawPixel>
        for (int16_t i = 0; i < w; i++) // 內層迴圈：遍歷該行的每一個像素 (pixel)
 8002bbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	827b      	strh	r3, [r7, #18]
 8002bca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dbbf      	blt.n	8002b56 <SH1106_DrawBitmap+0x36>
    for (int16_t j = 0; j < h; j++, y++) // 外層迴圈：遍歷每一行 (row)
 8002bd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	82bb      	strh	r3, [r7, #20]
 8002be2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	81bb      	strh	r3, [r7, #12]
 8002bee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002bf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbaa      	blt.n	8002b50 <SH1106_DrawBitmap+0x30>
            }
        }
    }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c08:	f7ff fbca 	bl	80023a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c0c:	480c      	ldr	r0, [pc, #48]	@ (8002c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c0e:	490d      	ldr	r1, [pc, #52]	@ (8002c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c14:	e002      	b.n	8002c1c <LoopCopyDataInit>

08002c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1a:	3304      	adds	r3, #4

08002c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c20:	d3f9      	bcc.n	8002c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c24:	4c0a      	ldr	r4, [pc, #40]	@ (8002c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c28:	e001      	b.n	8002c2e <LoopFillZerobss>

08002c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c2c:	3204      	adds	r2, #4

08002c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c30:	d3fb      	bcc.n	8002c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c32:	f005 fff7 	bl	8008c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7fe feed 	bl	8001a14 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c48:	0800eb08 	.word	0x0800eb08
  ldr r2, =_sbss
 8002c4c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c50:	20000b4c 	.word	0x20000b4c

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f94f 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fa7a 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f967 	bl	8002f8e <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 f92f 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000014 	.word	0x20000014
 8002cf4:	2000001c 	.word	0x2000001c
 8002cf8:	20000018 	.word	0x20000018

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000001c 	.word	0x2000001c
 8002d20:	200009fc 	.word	0x200009fc

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200009fc 	.word	0x200009fc

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000001c 	.word	0x2000001c

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	@ (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff3e 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff31 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff feb6 	bl	8002d24 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d008      	beq.n	8002fd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2280      	movs	r2, #128	@ 0x80
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e052      	b.n	800307e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0216 	bic.w	r2, r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <HAL_DMA_Abort+0x62>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0208 	bic.w	r2, r2, #8
 8003016:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003028:	e013      	b.n	8003052 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302a:	f7ff fe7b 	bl	8002d24 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b05      	cmp	r3, #5
 8003036:	d90c      	bls.n	8003052 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e015      	b.n	800307e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e4      	bne.n	800302a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003064:	223f      	movs	r2, #63	@ 0x3f
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d004      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2280      	movs	r2, #128	@ 0x80
 800309e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e00c      	b.n	80030be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2205      	movs	r2, #5
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d8:	b2db      	uxtb	r3, r3
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	@ 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e16b      	b.n	80033dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 815a 	bne.w	80033d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80b4 	beq.w	80033d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b60      	ldr	r3, [pc, #384]	@ (80033f4 <HAL_GPIO_Init+0x30c>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	4a5f      	ldr	r2, [pc, #380]	@ (80033f4 <HAL_GPIO_Init+0x30c>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327c:	6453      	str	r3, [r2, #68]	@ 0x44
 800327e:	4b5d      	ldr	r3, [pc, #372]	@ (80033f4 <HAL_GPIO_Init+0x30c>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a5b      	ldr	r2, [pc, #364]	@ (80033f8 <HAL_GPIO_Init+0x310>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a52      	ldr	r2, [pc, #328]	@ (80033fc <HAL_GPIO_Init+0x314>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02b      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a51      	ldr	r2, [pc, #324]	@ (8003400 <HAL_GPIO_Init+0x318>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d025      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a50      	ldr	r2, [pc, #320]	@ (8003404 <HAL_GPIO_Init+0x31c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003408 <HAL_GPIO_Init+0x320>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x21a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4e      	ldr	r2, [pc, #312]	@ (800340c <HAL_GPIO_Init+0x324>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x216>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003410 <HAL_GPIO_Init+0x328>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x212>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003414 <HAL_GPIO_Init+0x32c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x20e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003418 <HAL_GPIO_Init+0x330>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x20a>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e00e      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e00c      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e00a      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032fa:	2305      	movs	r3, #5
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032fe:	2304      	movs	r3, #4
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x228>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x228>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x228>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x228>
 800330e:	2300      	movs	r3, #0
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003320:	4935      	ldr	r1, [pc, #212]	@ (80033f8 <HAL_GPIO_Init+0x310>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332e:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_GPIO_Init+0x334>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003352:	4a32      	ldr	r2, [pc, #200]	@ (800341c <HAL_GPIO_Init+0x334>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003358:	4b30      	ldr	r3, [pc, #192]	@ (800341c <HAL_GPIO_Init+0x334>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800337c:	4a27      	ldr	r2, [pc, #156]	@ (800341c <HAL_GPIO_Init+0x334>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <HAL_GPIO_Init+0x334>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a6:	4a1d      	ldr	r2, [pc, #116]	@ (800341c <HAL_GPIO_Init+0x334>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <HAL_GPIO_Init+0x334>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d0:	4a12      	ldr	r2, [pc, #72]	@ (800341c <HAL_GPIO_Init+0x334>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	f67f ae90 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40021400 	.word	0x40021400
 8003414:	40021800 	.word	0x40021800
 8003418:	40021c00 	.word	0x40021c00
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800343c:	e003      	b.n	8003446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	041a      	lsls	r2, r3, #16
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	43d9      	mvns	r1, r3
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	400b      	ands	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e12b      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe fa58 	bl	8001964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ec:	f003 fa9c 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a81      	ldr	r2, [pc, #516]	@ (80036fc <HAL_I2C_Init+0x274>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d807      	bhi.n	800350c <HAL_I2C_Init+0x84>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a80      	ldr	r2, [pc, #512]	@ (8003700 <HAL_I2C_Init+0x278>)
 8003500:	4293      	cmp	r3, r2
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e006      	b.n	800351a <HAL_I2C_Init+0x92>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a7d      	ldr	r2, [pc, #500]	@ (8003704 <HAL_I2C_Init+0x27c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	bf94      	ite	ls
 8003514:	2301      	movls	r3, #1
 8003516:	2300      	movhi	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0e7      	b.n	80036f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a78      	ldr	r2, [pc, #480]	@ (8003708 <HAL_I2C_Init+0x280>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0c9b      	lsrs	r3, r3, #18
 800352c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a6a      	ldr	r2, [pc, #424]	@ (80036fc <HAL_I2C_Init+0x274>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d802      	bhi.n	800355c <HAL_I2C_Init+0xd4>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	e009      	b.n	8003570 <HAL_I2C_Init+0xe8>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	4a69      	ldr	r2, [pc, #420]	@ (800370c <HAL_I2C_Init+0x284>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	3301      	adds	r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003582:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	495c      	ldr	r1, [pc, #368]	@ (80036fc <HAL_I2C_Init+0x274>)
 800358c:	428b      	cmp	r3, r1
 800358e:	d819      	bhi.n	80035c4 <HAL_I2C_Init+0x13c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e59      	subs	r1, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fbb1 f3f3 	udiv	r3, r1, r3
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035a4:	400b      	ands	r3, r1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_I2C_Init+0x138>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e59      	subs	r1, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	e051      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c0:	2304      	movs	r3, #4
 80035c2:	e04f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <HAL_I2C_Init+0x168>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e012      	b.n	8003616 <HAL_I2C_Init+0x18e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	0099      	lsls	r1, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x196>
 800361a:	2301      	movs	r3, #1
 800361c:	e022      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <HAL_I2C_Init+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e58      	subs	r0, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	fbb0 f3f3 	udiv	r3, r0, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003642:	e00f      	b.n	8003664 <HAL_I2C_Init+0x1dc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	6809      	ldr	r1, [r1, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6911      	ldr	r1, [r2, #16]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	4311      	orrs	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	000186a0 	.word	0x000186a0
 8003700:	001e847f 	.word	0x001e847f
 8003704:	003d08ff 	.word	0x003d08ff
 8003708:	431bde83 	.word	0x431bde83
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d103      	bne.n	800372e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff fae5 	bl	8002d24 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 80d9 	bne.w	800391c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	496d      	ldr	r1, [pc, #436]	@ (8003928 <HAL_I2C_Mem_Write+0x1ec>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f002 fa63 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e0cc      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Write+0x56>
 800378e:	2302      	movs	r3, #2
 8003790:	e0c5      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2221      	movs	r2, #33	@ 0x21
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <HAL_I2C_Mem_Write+0x1f0>)
 80037f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fa:	88f8      	ldrh	r0, [r7, #6]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f001 fff2 	bl	80057f4 <I2C_RequestMemoryWrite>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d052      	beq.n	80038bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e081      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f002 fb28 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_I2C_Mem_Write+0x180>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1aa      	bne.n	800381a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f002 fb1b 	bl	8005f04 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d107      	bne.n	80038ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e016      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00100002 	.word	0x00100002
 800392c:	ffff0000 	.word	0xffff0000

08003930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7ff f9eb 	bl	8002d24 <HAL_GetTick>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 8214 	bne.w	8003d86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2319      	movs	r3, #25
 8003964:	2201      	movs	r2, #1
 8003966:	497b      	ldr	r1, [pc, #492]	@ (8003b54 <HAL_I2C_Mem_Read+0x224>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f002 f969 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	e207      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Read+0x56>
 8003982:	2302      	movs	r3, #2
 8003984:	e200      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d007      	beq.n	80039ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2222      	movs	r2, #34	@ 0x22
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	@ 0x40
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003b58 <HAL_I2C_Mem_Read+0x228>)
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ee:	88f8      	ldrh	r0, [r7, #6]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f001 ff8e 	bl	8005920 <I2C_RequestMemoryRead>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1bc      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	623b      	str	r3, [r7, #32]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e190      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d11b      	bne.n	8003a7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e170      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d11b      	bne.n	8003abe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	e150      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ad4:	e144      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	f200 80f1 	bhi.w	8003cc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d123      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f002 fa83 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e145      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b2e:	e117      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d14e      	bne.n	8003bd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4906      	ldr	r1, [pc, #24]	@ (8003b5c <HAL_I2C_Mem_Read+0x22c>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f002 f87c 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e11a      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
 8003b52:	bf00      	nop
 8003b54:	00100002 	.word	0x00100002
 8003b58:	ffff0000 	.word	0xffff0000
 8003b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bd4:	e0c4      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	2200      	movs	r2, #0
 8003bde:	496c      	ldr	r1, [pc, #432]	@ (8003d90 <HAL_I2C_Mem_Read+0x460>)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f002 f82d 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0cb      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4955      	ldr	r1, [pc, #340]	@ (8003d90 <HAL_I2C_Mem_Read+0x460>)
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f001 ffff 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e09d      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cc0:	e04e      	b.n	8003d60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f002 f996 	bl	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e058      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d124      	bne.n	8003d60 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d107      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f47f aeb6 	bne.w	8003ad6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3728      	adds	r7, #40	@ 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	00010004 	.word	0x00010004

08003d94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	@ 0x28
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7fe ffbe 	bl	8002d24 <HAL_GetTick>
 8003da8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	f040 8111 	bne.w	8003fde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4988      	ldr	r1, [pc, #544]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f001 ff3a 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e104      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_I2C_IsDeviceReady+0x50>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0fd      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d007      	beq.n	8003e0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2224      	movs	r2, #36	@ 0x24
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a70      	ldr	r2, [pc, #448]	@ (8003fec <HAL_I2C_IsDeviceReady+0x258>)
 8003e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f001 fef8 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e64:	d103      	bne.n	8003e6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0b6      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fe ff4f 	bl	8002d24 <HAL_GetTick>
 8003e86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb6:	e025      	b.n	8003f04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eb8:	f7fe ff34 	bl	8002d24 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <HAL_I2C_IsDeviceReady+0x13a>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22a0      	movs	r2, #160	@ 0xa0
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f0e:	d005      	beq.n	8003f1c <HAL_I2C_IsDeviceReady+0x188>
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <HAL_I2C_IsDeviceReady+0x188>
 8003f16:	7dbb      	ldrb	r3, [r7, #22]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0cd      	beq.n	8003eb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d129      	bne.n	8003f86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4921      	ldr	r1, [pc, #132]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f001 fe6c 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e036      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e02c      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2319      	movs	r3, #25
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	490f      	ldr	r1, [pc, #60]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f001 fe48 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e012      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f4ff af32 	bcc.w	8003e2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004010:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d003      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0x38>
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	f040 80c1 	bne.w	80041aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_I2C_EV_IRQHandler+0x6e>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004048:	d003      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x62>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004050:	d101      	bne.n	8004056 <HAL_I2C_EV_IRQHandler+0x66>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_I2C_EV_IRQHandler+0x68>
 8004056:	2300      	movs	r3, #0
 8004058:	2b01      	cmp	r3, #1
 800405a:	f000 8132 	beq.w	80042c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_I2C_EV_IRQHandler+0x92>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f002 f84b 	bl	8006110 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fd9b 	bl	8004bb6 <I2C_Master_SB>
 8004080:	e092      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fe11 	bl	8004cc2 <I2C_Master_ADD10>
 80040a0:	e082      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fe2b 	bl	8004d16 <I2C_Master_ADDR>
 80040c0:	e072      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03b      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040dc:	f000 80f3 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00f      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0a9b      	lsrs	r3, r3, #10
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9f3 	bl	80044f0 <I2C_MasterTransmit_TXE>
 800410a:	e04d      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80d6 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	0a5b      	lsrs	r3, r3, #9
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80cf 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	2b21      	cmp	r3, #33	@ 0x21
 800412c:	d103      	bne.n	8004136 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fa7a 	bl	8004628 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004134:	e0c7      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	f040 80c4 	bne.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fae8 	bl	8004714 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004144:	e0bf      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004154:	f000 80b7 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x194>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x194>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb61 	bl	8004844 <I2C_MasterReceive_RXNE>
 8004182:	e011      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 809a 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8093 	beq.w	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fc17 	bl	80049d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a6:	e08e      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80041a8:	e08d      	b.n	80042c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e007      	b.n	80041cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_I2C_EV_IRQHandler+0x20e>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 ffdc 	bl	80051b4 <I2C_Slave_ADDR>
 80041fc:	e066      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x22e>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	0a5b      	lsrs	r3, r3, #9
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f001 f816 	bl	8005248 <I2C_Slave_STOPF>
 800421c:	e056      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	2b21      	cmp	r3, #33	@ 0x21
 8004222:	d002      	beq.n	800422a <HAL_I2C_EV_IRQHandler+0x23a>
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b29      	cmp	r3, #41	@ 0x29
 8004228:	d125      	bne.n	8004276 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00f      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x266>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	0a9b      	lsrs	r3, r3, #10
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x266>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fef2 	bl	8005038 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004254:	e039      	b.n	80042ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d033      	beq.n	80042ca <HAL_I2C_EV_IRQHandler+0x2da>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02d      	beq.n	80042ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 ff1f 	bl	80050b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004274:	e029      	b.n	80042ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	0a9b      	lsrs	r3, r3, #10
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 ff2a 	bl	80050f4 <I2C_SlaveReceive_RXNE>
 80042a0:	e014      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ff58 	bl	8005170 <I2C_SlaveReceive_BTF>
 80042c0:	e004      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08a      	sub	sp, #40	@ 0x28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x4e>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800431e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	0a5b      	lsrs	r3, r3, #9
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x78>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004348:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	0a9b      	lsrs	r3, r3, #10
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03f      	beq.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d039      	beq.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004362:	7efb      	ldrb	r3, [r7, #27]
 8004364:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800437c:	7ebb      	ldrb	r3, [r7, #26]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d112      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b21      	cmp	r3, #33	@ 0x21
 800438c:	d008      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b29      	cmp	r3, #41	@ 0x29
 8004392:	d005      	beq.n	80043a0 <HAL_I2C_ER_IRQHandler+0xce>
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b28      	cmp	r3, #40	@ 0x28
 8004398:	d106      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b21      	cmp	r3, #33	@ 0x21
 800439e:	d103      	bne.n	80043a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 f881 	bl	80054a8 <I2C_Slave_AF>
 80043a6:	e016      	b.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ba:	7efb      	ldrb	r3, [r7, #27]
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d002      	beq.n	80043c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80043c0:	7efb      	ldrb	r3, [r7, #27]
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d107      	bne.n	80043d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	0adb      	lsrs	r3, r3, #11
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <HAL_I2C_ER_IRQHandler+0x12e>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80043fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f001 f8bc 	bl	8005590 <I2C_ITError>
  }
}
 8004418:	bf00      	nop
 800441a:	3728      	adds	r7, #40	@ 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
 800447c:	4613      	mov	r3, r2
 800447e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004506:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d150      	bne.n	80045b8 <I2C_MasterTransmit_TXE+0xc8>
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b21      	cmp	r3, #33	@ 0x21
 800451a:	d14d      	bne.n	80045b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d01d      	beq.n	800455e <I2C_MasterTransmit_TXE+0x6e>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b20      	cmp	r3, #32
 8004526:	d01a      	beq.n	800455e <I2C_MasterTransmit_TXE+0x6e>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800452e:	d016      	beq.n	800455e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2211      	movs	r2, #17
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff62 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800455c:	e060      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800456c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d107      	bne.n	80045a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff7d 	bl	80044a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045a6:	e03b      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff35 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045b6:	e033      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b21      	cmp	r3, #33	@ 0x21
 80045bc:	d005      	beq.n	80045ca <I2C_MasterTransmit_TXE+0xda>
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	d12d      	bne.n	8004620 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b22      	cmp	r3, #34	@ 0x22
 80045c8:	d12a      	bne.n	8004620 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d108      	bne.n	80045e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045e4:	e01c      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	d103      	bne.n	80045fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f88e 	bl	8004714 <I2C_MemoryTransmit_TXE_BTF>
}
 80045f8:	e012      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800461e:	e7ff      	b.n	8004620 <I2C_MasterTransmit_TXE+0x130>
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b21      	cmp	r3, #33	@ 0x21
 8004640:	d164      	bne.n	800470c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004670:	e04c      	b.n	800470c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d01d      	beq.n	80046b4 <I2C_MasterTransmit_BTF+0x8c>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b20      	cmp	r3, #32
 800467c:	d01a      	beq.n	80046b4 <I2C_MasterTransmit_BTF+0x8c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004684:	d016      	beq.n	80046b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004694:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2211      	movs	r2, #17
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff feb7 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
}
 80046b2:	e02b      	b.n	800470c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b40      	cmp	r3, #64	@ 0x40
 80046ec:	d107      	bne.n	80046fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fed2 	bl	80044a0 <HAL_I2C_MemTxCpltCallback>
}
 80046fc:	e006      	b.n	800470c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fe8a 	bl	8004420 <HAL_I2C_MasterTxCpltCallback>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11d      	bne.n	8004768 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10b      	bne.n	800474c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800474a:	e077      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	b29b      	uxth	r3, r3
 8004752:	121b      	asrs	r3, r3, #8
 8004754:	b2da      	uxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004766:	e069      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10b      	bne.n	8004788 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004774:	b2da      	uxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004786:	e059      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	2b02      	cmp	r3, #2
 800478e:	d152      	bne.n	8004836 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b22      	cmp	r3, #34	@ 0x22
 8004794:	d10d      	bne.n	80047b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047b0:	e044      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d015      	beq.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b21      	cmp	r3, #33	@ 0x21
 80047c0:	d112      	bne.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047e6:	e029      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d124      	bne.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b21      	cmp	r3, #33	@ 0x21
 80047f6:	d121      	bne.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004806:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004816:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fe36 	bl	80044a0 <HAL_I2C_MemTxCpltCallback>
}
 8004834:	e002      	b.n	800483c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe ff6a 	bl	8003710 <I2C_Flush_DR>
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	@ 0x22
 8004856:	f040 80b9 	bne.w	80049cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d921      	bls.n	80048b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b03      	cmp	r3, #3
 800489c:	f040 8096 	bne.w	80049cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80048b0:	e08c      	b.n	80049cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d07f      	beq.n	80049ba <I2C_MasterReceive_RXNE+0x176>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <I2C_MasterReceive_RXNE+0x82>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d179      	bne.n	80049ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fb64 	bl	8005f94 <I2C_WaitOnSTOPRequestThroughIT>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d14c      	bne.n	800496c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d10a      	bne.n	8004942 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fdba 	bl	80044b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004940:	e044      	b.n	80049cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d002      	beq.n	8004956 <I2C_MasterReceive_RXNE+0x112>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b20      	cmp	r3, #32
 8004954:	d103      	bne.n	800495e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
 800495c:	e002      	b.n	8004964 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2212      	movs	r2, #18
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fd65 	bl	8004434 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800496a:	e02f      	b.n	80049cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800497a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fd88 	bl	80044c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049b8:	e008      	b.n	80049cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c8:	605a      	str	r2, [r3, #4]
}
 80049ca:	e7ff      	b.n	80049cc <I2C_MasterReceive_RXNE+0x188>
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d11b      	bne.n	8004a24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a22:	e0c4      	b.n	8004bae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d129      	bne.n	8004a82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d00a      	beq.n	8004a5a <I2C_MasterReceive_BTF+0x86>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d007      	beq.n	8004a5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a80:	e095      	b.n	8004bae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d17d      	bne.n	8004b88 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d002      	beq.n	8004a98 <I2C_MasterReceive_BTF+0xc4>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d108      	bne.n	8004aaa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e016      	b.n	8004ad8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d002      	beq.n	8004ab6 <I2C_MasterReceive_BTF+0xe2>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d108      	bne.n	8004ac8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e007      	b.n	8004ad8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d10a      	bne.n	8004b5e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fcac 	bl	80044b4 <HAL_I2C_MemRxCpltCallback>
}
 8004b5c:	e027      	b.n	8004bae <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d002      	beq.n	8004b72 <I2C_MasterReceive_BTF+0x19e>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d103      	bne.n	8004b7a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b78:	e002      	b.n	8004b80 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2212      	movs	r2, #18
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fc57 	bl	8004434 <HAL_I2C_MasterRxCpltCallback>
}
 8004b86:	e012      	b.n	8004bae <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b40      	cmp	r3, #64	@ 0x40
 8004bc8:	d117      	bne.n	8004bfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004be4:	e067      	b.n	8004cb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]
}
 8004bf8:	e05d      	b.n	8004cb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c02:	d133      	bne.n	8004c6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b21      	cmp	r3, #33	@ 0x21
 8004c0e:	d109      	bne.n	8004c24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c20:	611a      	str	r2, [r3, #16]
 8004c22:	e008      	b.n	8004c36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <I2C_Master_SB+0x92>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d032      	beq.n	8004cb6 <I2C_Master_SB+0x100>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02d      	beq.n	8004cb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c68:	605a      	str	r2, [r3, #4]
}
 8004c6a:	e024      	b.n	8004cb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10e      	bne.n	8004c92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	11db      	asrs	r3, r3, #7
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0306 	and.w	r3, r3, #6
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f063 030f 	orn	r3, r3, #15
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	611a      	str	r2, [r3, #16]
}
 8004c90:	e011      	b.n	8004cb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10d      	bne.n	8004cb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	11db      	asrs	r3, r3, #7
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f003 0306 	and.w	r3, r3, #6
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f063 030e 	orn	r3, r3, #14
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	611a      	str	r2, [r3, #16]
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <I2C_Master_ADD10+0x26>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d108      	bne.n	8004cfa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <I2C_Master_ADD10+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d08:	605a      	str	r2, [r3, #4]
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b091      	sub	sp, #68	@ 0x44
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b22      	cmp	r3, #34	@ 0x22
 8004d3e:	f040 8169 	bne.w	8005014 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <I2C_Master_ADDR+0x54>
 8004d4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d4e:	2b40      	cmp	r3, #64	@ 0x40
 8004d50:	d10b      	bne.n	8004d6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d52:	2300      	movs	r3, #0
 8004d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	e160      	b.n	800502c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d11d      	bne.n	8004dae <I2C_Master_ADDR+0x98>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d7a:	d118      	bne.n	8004dae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004da0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dac:	e13e      	b.n	800502c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d113      	bne.n	8004de0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db8:	2300      	movs	r3, #0
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e115      	b.n	800500c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	f040 808a 	bne.w	8004f00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df2:	d137      	bne.n	8004e64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e12:	d113      	bne.n	8004e3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e24:	2300      	movs	r3, #0
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	e0e7      	b.n	800500c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e0d3      	b.n	800500c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d02e      	beq.n	8004ec8 <I2C_Master_ADDR+0x1b2>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d02b      	beq.n	8004ec8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e72:	2b12      	cmp	r3, #18
 8004e74:	d102      	bne.n	8004e7c <I2C_Master_ADDR+0x166>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d125      	bne.n	8004ec8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00e      	beq.n	8004ea0 <I2C_Master_ADDR+0x18a>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d00b      	beq.n	8004ea0 <I2C_Master_ADDR+0x18a>
 8004e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d008      	beq.n	8004ea0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e007      	b.n	8004eb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	e0a1      	b.n	800500c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e085      	b.n	800500c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d14d      	bne.n	8004fa6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d016      	beq.n	8004f3e <I2C_Master_ADDR+0x228>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d013      	beq.n	8004f3e <I2C_Master_ADDR+0x228>
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d010      	beq.n	8004f3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e007      	b.n	8004f4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f5c:	d117      	bne.n	8004f8e <I2C_Master_ADDR+0x278>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f64:	d00b      	beq.n	8004f7e <I2C_Master_ADDR+0x268>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d008      	beq.n	8004f7e <I2C_Master_ADDR+0x268>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d005      	beq.n	8004f7e <I2C_Master_ADDR+0x268>
 8004f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d002      	beq.n	8004f7e <I2C_Master_ADDR+0x268>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d107      	bne.n	8004f8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	e032      	b.n	800500c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc4:	d117      	bne.n	8004ff6 <I2C_Master_ADDR+0x2e0>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fcc:	d00b      	beq.n	8004fe6 <I2C_Master_ADDR+0x2d0>
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d008      	beq.n	8004fe6 <I2C_Master_ADDR+0x2d0>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d005      	beq.n	8004fe6 <I2C_Master_ADDR+0x2d0>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d002      	beq.n	8004fe6 <I2C_Master_ADDR+0x2d0>
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d107      	bne.n	8004ff6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ff4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005012:	e00b      	b.n	800502c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	e7ff      	b.n	800502c <I2C_Master_ADDR+0x316>
 800502c:	bf00      	nop
 800502e:	3744      	adds	r7, #68	@ 0x44
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005046:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02b      	beq.n	80050aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d114      	bne.n	80050aa <I2C_SlaveTransmit_TXE+0x72>
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b29      	cmp	r3, #41	@ 0x29
 8005084:	d111      	bne.n	80050aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005094:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2221      	movs	r2, #33	@ 0x21
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2228      	movs	r2, #40	@ 0x28
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f9cf 	bl	8004448 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d011      	beq.n	80050e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005102:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02c      	beq.n	8005168 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d114      	bne.n	8005168 <I2C_SlaveReceive_RXNE+0x74>
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b2a      	cmp	r3, #42	@ 0x2a
 8005142:	d111      	bne.n	8005168 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005152:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2222      	movs	r2, #34	@ 0x22
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2228      	movs	r2, #40	@ 0x28
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff f97a 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d012      	beq.n	80051a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051ce:	2b28      	cmp	r3, #40	@ 0x28
 80051d0:	d127      	bne.n	8005222 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	81bb      	strh	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005214:	89ba      	ldrh	r2, [r7, #12]
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff f928 	bl	8004470 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005220:	e00e      	b.n	8005240 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005256:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005266:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a4:	d172      	bne.n	800538c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b22      	cmp	r3, #34	@ 0x22
 80052aa:	d002      	beq.n	80052b2 <I2C_Slave_STOPF+0x6a>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80052b0:	d135      	bne.n	800531e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd feed 	bl	80030ca <HAL_DMA_GetState>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d049      	beq.n	800538a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	4a69      	ldr	r2, [pc, #420]	@ (80054a0 <I2C_Slave_STOPF+0x258>)
 80052fc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd febf 	bl	8003086 <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03d      	beq.n	800538a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005318:	4610      	mov	r0, r2
 800531a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800531c:	e035      	b.n	800538a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005350:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd feb7 	bl	80030ca <HAL_DMA_GetState>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d014      	beq.n	800538c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	4a4e      	ldr	r2, [pc, #312]	@ (80054a0 <I2C_Slave_STOPF+0x258>)
 8005368:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd fe89 	bl	8003086 <HAL_DMA_Abort_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	e000      	b.n	800538c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800538a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d03e      	beq.n	8005414 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d112      	bne.n	80053ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d112      	bne.n	80053fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	f043 0204 	orr.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8b7 	bl	8005590 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005422:	e039      	b.n	8005498 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b2a      	cmp	r3, #42	@ 0x2a
 8005428:	d109      	bne.n	800543e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2228      	movs	r2, #40	@ 0x28
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff f80f 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b28      	cmp	r3, #40	@ 0x28
 8005448:	d111      	bne.n	800546e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <I2C_Slave_STOPF+0x25c>)
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f810 	bl	800448c <HAL_I2C_ListenCpltCallback>
}
 800546c:	e014      	b.n	8005498 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	2b22      	cmp	r3, #34	@ 0x22
 8005474:	d002      	beq.n	800547c <I2C_Slave_STOPF+0x234>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b22      	cmp	r3, #34	@ 0x22
 800547a:	d10d      	bne.n	8005498 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe ffe2 	bl	800445c <HAL_I2C_SlaveRxCpltCallback>
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	08005af1 	.word	0x08005af1
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d002      	beq.n	80054ca <I2C_Slave_AF+0x22>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d129      	bne.n	800551e <I2C_Slave_AF+0x76>
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b28      	cmp	r3, #40	@ 0x28
 80054ce:	d126      	bne.n	800551e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2e      	ldr	r2, [pc, #184]	@ (800558c <I2C_Slave_AF+0xe4>)
 80054d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fe ffb8 	bl	800448c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800551c:	e031      	b.n	8005582 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b21      	cmp	r3, #33	@ 0x21
 8005522:	d129      	bne.n	8005578 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a19      	ldr	r2, [pc, #100]	@ (800558c <I2C_Slave_AF+0xe4>)
 8005528:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2221      	movs	r2, #33	@ 0x21
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800554e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005558:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005568:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fe f8d0 	bl	8003710 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fe ff69 	bl	8004448 <HAL_I2C_SlaveTxCpltCallback>
}
 8005576:	e004      	b.n	8005582 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005580:	615a      	str	r2, [r3, #20]
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	ffff0000 	.word	0xffff0000

08005590 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d002      	beq.n	80055b4 <I2C_ITError+0x24>
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d10a      	bne.n	80055ca <I2C_ITError+0x3a>
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b22      	cmp	r3, #34	@ 0x22
 80055b8:	d107      	bne.n	80055ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055d0:	2b28      	cmp	r3, #40	@ 0x28
 80055d2:	d107      	bne.n	80055e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2228      	movs	r2, #40	@ 0x28
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80055e2:	e015      	b.n	8005610 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f2:	d00a      	beq.n	800560a <I2C_ITError+0x7a>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b60      	cmp	r3, #96	@ 0x60
 80055f8:	d007      	beq.n	800560a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800561a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561e:	d162      	bne.n	80056e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800562e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d020      	beq.n	8005680 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	4a6a      	ldr	r2, [pc, #424]	@ (80057ec <I2C_ITError+0x25c>)
 8005644:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564a:	4618      	mov	r0, r3
 800564c:	f7fd fd1b 	bl	8003086 <HAL_DMA_Abort_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8089 	beq.w	800576a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800567a:	4610      	mov	r0, r2
 800567c:	4798      	blx	r3
 800567e:	e074      	b.n	800576a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	4a59      	ldr	r2, [pc, #356]	@ (80057ec <I2C_ITError+0x25c>)
 8005686:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	4618      	mov	r0, r3
 800568e:	f7fd fcfa 	bl	8003086 <HAL_DMA_Abort_IT>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d068      	beq.n	800576a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a2:	2b40      	cmp	r3, #64	@ 0x40
 80056a4:	d10b      	bne.n	80056be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	e041      	b.n	800576a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b60      	cmp	r3, #96	@ 0x60
 80056f0:	d125      	bne.n	800573e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d10b      	bne.n	8005726 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fe fed0 	bl	80044dc <HAL_I2C_AbortCpltCallback>
 800573c:	e015      	b.n	800576a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d10b      	bne.n	8005764 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fe feaf 	bl	80044c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10e      	bne.n	8005798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d113      	bne.n	80057e4 <I2C_ITError+0x254>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b28      	cmp	r3, #40	@ 0x28
 80057c0:	d110      	bne.n	80057e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <I2C_ITError+0x260>)
 80057c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fe fe54 	bl	800448c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08005af1 	.word	0x08005af1
 80057f0:	ffff0000 	.word	0xffff0000

080057f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	461a      	mov	r2, r3
 8005802:	4603      	mov	r3, r0
 8005804:	817b      	strh	r3, [r7, #10]
 8005806:	460b      	mov	r3, r1
 8005808:	813b      	strh	r3, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800581c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2200      	movs	r2, #0
 8005826:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa08 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005844:	d103      	bne.n	800584e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e05f      	b.n	8005912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	492d      	ldr	r1, [pc, #180]	@ (800591c <I2C_RequestMemoryWrite+0x128>)
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa63 	bl	8005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e04c      	b.n	8005912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005890:	6a39      	ldr	r1, [r7, #32]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 faee 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d107      	bne.n	80058b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e02b      	b.n	8005912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d105      	bne.n	80058cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	e021      	b.n	8005910 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058dc:	6a39      	ldr	r1, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fac8 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d107      	bne.n	8005902 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e005      	b.n	8005912 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005906:	893b      	ldrh	r3, [r7, #8]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	00010002 	.word	0x00010002

08005920 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	817b      	strh	r3, [r7, #10]
 8005932:	460b      	mov	r3, r1
 8005934:	813b      	strh	r3, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005948:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2200      	movs	r2, #0
 8005962:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f96a 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005980:	d103      	bne.n	800598a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005988:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e0aa      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800599c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	4952      	ldr	r1, [pc, #328]	@ (8005aec <I2C_RequestMemoryRead+0x1cc>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f9c5 	bl	8005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e097      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa50 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d107      	bne.n	80059f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e076      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fc:	893b      	ldrh	r3, [r7, #8]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	e021      	b.n	8005a4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa2a 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e050      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a42:	893b      	ldrh	r3, [r7, #8]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4e:	6a39      	ldr	r1, [r7, #32]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fa0f 	bl	8005e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d107      	bne.n	8005a74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e035      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f8d3 	bl	8005c40 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aae:	d103      	bne.n	8005ab8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e013      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	4906      	ldr	r1, [pc, #24]	@ (8005aec <I2C_RequestMemoryRead+0x1cc>)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f92e 	bl	8005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	00010002 	.word	0x00010002

08005af0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c38 <I2C_DMAAbort+0x148>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	4a4a      	ldr	r2, [pc, #296]	@ (8005c3c <I2C_DMAAbort+0x14c>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0a1a      	lsrs	r2, r3, #8
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005b36:	e00a      	b.n	8005b4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4c:	d0ea      	beq.n	8005b24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b60      	cmp	r3, #96	@ 0x60
 8005bbe:	d10e      	bne.n	8005bde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7fe fc80 	bl	80044dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bdc:	e027      	b.n	8005c2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005be4:	2b28      	cmp	r3, #40	@ 0x28
 8005be6:	d117      	bne.n	8005c18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2228      	movs	r2, #40	@ 0x28
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c16:	e007      	b.n	8005c28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7fe fc4d 	bl	80044c8 <HAL_I2C_ErrorCallback>
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000014 	.word	0x20000014
 8005c3c:	14f8b589 	.word	0x14f8b589

08005c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c50:	e048      	b.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d044      	beq.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fd f863 	bl	8002d24 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d139      	bne.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	0c1b      	lsrs	r3, r3, #16
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10d      	bne.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	43da      	mvns	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4013      	ands	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	e00c      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d116      	bne.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e023      	b.n	8005d2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10d      	bne.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	43da      	mvns	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	e00c      	b.n	8005d24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	43da      	mvns	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d093      	beq.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d42:	e071      	b.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d52:	d123      	bne.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	f043 0204 	orr.w	r2, r3, #4
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e067      	b.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d041      	beq.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7fc ffbe 	bl	8002d24 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d136      	bne.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	0c1b      	lsrs	r3, r3, #16
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10c      	bne.n	8005dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	e00b      	b.n	8005df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	43da      	mvns	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d016      	beq.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e021      	b.n	8005e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d10c      	bne.n	8005e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	43da      	mvns	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e00b      	b.n	8005e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	43da      	mvns	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f47f af6d 	bne.w	8005d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e80:	e034      	b.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f915 	bl	80060b2 <I2C_IsAcknowledgeFailed>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e034      	b.n	8005efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d028      	beq.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fc ff43 	bl	8002d24 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11d      	bne.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eba:	2b80      	cmp	r3, #128	@ 0x80
 8005ebc:	d016      	beq.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e007      	b.n	8005efc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b80      	cmp	r3, #128	@ 0x80
 8005ef8:	d1c3      	bne.n	8005e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f10:	e034      	b.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f8cd 	bl	80060b2 <I2C_IsAcknowledgeFailed>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e034      	b.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d028      	beq.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fc fefb 	bl	8002d24 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11d      	bne.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d016      	beq.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e007      	b.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d1c3      	bne.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa0:	4b13      	ldr	r3, [pc, #76]	@ (8005ff0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	4a13      	ldr	r2, [pc, #76]	@ (8005ff4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	0a1a      	lsrs	r2, r3, #8
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d107      	bne.n	8005fd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e008      	b.n	8005fe4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe0:	d0e9      	beq.n	8005fb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000014 	.word	0x20000014
 8005ff4:	14f8b589 	.word	0x14f8b589

08005ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006004:	e049      	b.n	800609a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d119      	bne.n	8006048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0210 	mvn.w	r2, #16
 800601c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e030      	b.n	80060aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006048:	f7fc fe6c 	bl	8002d24 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d302      	bcc.n	800605e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d11d      	bne.n	800609a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b40      	cmp	r3, #64	@ 0x40
 800606a:	d016      	beq.n	800609a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e007      	b.n	80060aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b40      	cmp	r3, #64	@ 0x40
 80060a6:	d1ae      	bne.n	8006006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c8:	d11b      	bne.n	8006102 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006120:	d103      	bne.n	800612a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006128:	e007      	b.n	800613a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006132:	d102      	bne.n	800613a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2208      	movs	r2, #8
 8006138:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e267      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d075      	beq.n	8006252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006166:	4b88      	ldr	r3, [pc, #544]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	2b04      	cmp	r3, #4
 8006170:	d00c      	beq.n	800618c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006172:	4b85      	ldr	r3, [pc, #532]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800617a:	2b08      	cmp	r3, #8
 800617c:	d112      	bne.n	80061a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800617e:	4b82      	ldr	r3, [pc, #520]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800618a:	d10b      	bne.n	80061a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800618c:	4b7e      	ldr	r3, [pc, #504]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05b      	beq.n	8006250 <HAL_RCC_OscConfig+0x108>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d157      	bne.n	8006250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e242      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d106      	bne.n	80061bc <HAL_RCC_OscConfig+0x74>
 80061ae:	4b76      	ldr	r3, [pc, #472]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a75      	ldr	r2, [pc, #468]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e01d      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x98>
 80061c6:	4b70      	ldr	r3, [pc, #448]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6f      	ldr	r2, [pc, #444]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6c      	ldr	r2, [pc, #432]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e00b      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061e0:	4b69      	ldr	r3, [pc, #420]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a68      	ldr	r2, [pc, #416]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b66      	ldr	r3, [pc, #408]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a65      	ldr	r2, [pc, #404]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80061f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d013      	beq.n	8006228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006200:	f7fc fd90 	bl	8002d24 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006208:	f7fc fd8c 	bl	8002d24 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	@ 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e207      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621a:	4b5b      	ldr	r3, [pc, #364]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0xc0>
 8006226:	e014      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006228:	f7fc fd7c 	bl	8002d24 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006230:	f7fc fd78 	bl	8002d24 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1f3      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006242:	4b51      	ldr	r3, [pc, #324]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0xe8>
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d063      	beq.n	8006326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800625e:	4b4a      	ldr	r3, [pc, #296]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800626a:	4b47      	ldr	r3, [pc, #284]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006272:	2b08      	cmp	r3, #8
 8006274:	d11c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006276:	4b44      	ldr	r3, [pc, #272]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d116      	bne.n	80062b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006282:	4b41      	ldr	r3, [pc, #260]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_RCC_OscConfig+0x152>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d001      	beq.n	800629a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e1c7      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629a:	4b3b      	ldr	r3, [pc, #236]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4937      	ldr	r1, [pc, #220]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ae:	e03a      	b.n	8006326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d020      	beq.n	80062fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062b8:	4b34      	ldr	r3, [pc, #208]	@ (800638c <HAL_RCC_OscConfig+0x244>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062be:	f7fc fd31 	bl	8002d24 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c6:	f7fc fd2d 	bl	8002d24 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e1a8      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e4:	4b28      	ldr	r3, [pc, #160]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4925      	ldr	r1, [pc, #148]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
 80062f8:	e015      	b.n	8006326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062fa:	4b24      	ldr	r3, [pc, #144]	@ (800638c <HAL_RCC_OscConfig+0x244>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fc fd10 	bl	8002d24 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006308:	f7fc fd0c 	bl	8002d24 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e187      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800631a:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d036      	beq.n	80063a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d016      	beq.n	8006368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800633a:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <HAL_RCC_OscConfig+0x248>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fc fcf0 	bl	8002d24 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006348:	f7fc fcec 	bl	8002d24 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e167      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800635a:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <HAL_RCC_OscConfig+0x240>)
 800635c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCC_OscConfig+0x200>
 8006366:	e01b      	b.n	80063a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006368:	4b09      	ldr	r3, [pc, #36]	@ (8006390 <HAL_RCC_OscConfig+0x248>)
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636e:	f7fc fcd9 	bl	8002d24 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006374:	e00e      	b.n	8006394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006376:	f7fc fcd5 	bl	8002d24 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d907      	bls.n	8006394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e150      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
 8006388:	40023800 	.word	0x40023800
 800638c:	42470000 	.word	0x42470000
 8006390:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006394:	4b88      	ldr	r3, [pc, #544]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1ea      	bne.n	8006376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8097 	beq.w	80064dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063b2:	4b81      	ldr	r3, [pc, #516]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	4b7d      	ldr	r3, [pc, #500]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	4a7c      	ldr	r2, [pc, #496]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80063c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ce:	4b7a      	ldr	r3, [pc, #488]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063de:	4b77      	ldr	r3, [pc, #476]	@ (80065bc <HAL_RCC_OscConfig+0x474>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d118      	bne.n	800641c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063ea:	4b74      	ldr	r3, [pc, #464]	@ (80065bc <HAL_RCC_OscConfig+0x474>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a73      	ldr	r2, [pc, #460]	@ (80065bc <HAL_RCC_OscConfig+0x474>)
 80063f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063f6:	f7fc fc95 	bl	8002d24 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063fe:	f7fc fc91 	bl	8002d24 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e10c      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006410:	4b6a      	ldr	r3, [pc, #424]	@ (80065bc <HAL_RCC_OscConfig+0x474>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d106      	bne.n	8006432 <HAL_RCC_OscConfig+0x2ea>
 8006424:	4b64      	ldr	r3, [pc, #400]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006428:	4a63      	ldr	r2, [pc, #396]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006430:	e01c      	b.n	800646c <HAL_RCC_OscConfig+0x324>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b05      	cmp	r3, #5
 8006438:	d10c      	bne.n	8006454 <HAL_RCC_OscConfig+0x30c>
 800643a:	4b5f      	ldr	r3, [pc, #380]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	4a5e      	ldr	r2, [pc, #376]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006440:	f043 0304 	orr.w	r3, r3, #4
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70
 8006446:	4b5c      	ldr	r3, [pc, #368]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	4a5b      	ldr	r2, [pc, #364]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	@ 0x70
 8006452:	e00b      	b.n	800646c <HAL_RCC_OscConfig+0x324>
 8006454:	4b58      	ldr	r3, [pc, #352]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006458:	4a57      	ldr	r2, [pc, #348]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006460:	4b55      	ldr	r3, [pc, #340]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a54      	ldr	r2, [pc, #336]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006466:	f023 0304 	bic.w	r3, r3, #4
 800646a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d015      	beq.n	80064a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006474:	f7fc fc56 	bl	8002d24 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800647a:	e00a      	b.n	8006492 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647c:	f7fc fc52 	bl	8002d24 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800648a:	4293      	cmp	r3, r2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e0cb      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006492:	4b49      	ldr	r3, [pc, #292]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0ee      	beq.n	800647c <HAL_RCC_OscConfig+0x334>
 800649e:	e014      	b.n	80064ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a0:	f7fc fc40 	bl	8002d24 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a6:	e00a      	b.n	80064be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a8:	f7fc fc3c 	bl	8002d24 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e0b5      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064be:	4b3e      	ldr	r3, [pc, #248]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1ee      	bne.n	80064a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d105      	bne.n	80064dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064d0:	4b39      	ldr	r3, [pc, #228]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80064d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d4:	4a38      	ldr	r2, [pc, #224]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80064d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a1 	beq.w	8006628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064e6:	4b34      	ldr	r3, [pc, #208]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 030c 	and.w	r3, r3, #12
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d05c      	beq.n	80065ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d141      	bne.n	800657e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fa:	4b31      	ldr	r3, [pc, #196]	@ (80065c0 <HAL_RCC_OscConfig+0x478>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006500:	f7fc fc10 	bl	8002d24 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006508:	f7fc fc0c 	bl	8002d24 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e087      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	019b      	lsls	r3, r3, #6
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	491b      	ldr	r1, [pc, #108]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 800654c:	4313      	orrs	r3, r2
 800654e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006550:	4b1b      	ldr	r3, [pc, #108]	@ (80065c0 <HAL_RCC_OscConfig+0x478>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006556:	f7fc fbe5 	bl	8002d24 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655e:	f7fc fbe1 	bl	8002d24 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e05c      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006570:	4b11      	ldr	r3, [pc, #68]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCC_OscConfig+0x416>
 800657c:	e054      	b.n	8006628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657e:	4b10      	ldr	r3, [pc, #64]	@ (80065c0 <HAL_RCC_OscConfig+0x478>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fc fbce 	bl	8002d24 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fc fbca 	bl	8002d24 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e045      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659e:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <HAL_RCC_OscConfig+0x470>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x444>
 80065aa:	e03d      	b.n	8006628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e038      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
 80065b8:	40023800 	.word	0x40023800
 80065bc:	40007000 	.word	0x40007000
 80065c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <HAL_RCC_OscConfig+0x4ec>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d028      	beq.n	8006624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d121      	bne.n	8006624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d11a      	bne.n	8006624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d111      	bne.n	8006624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	3b01      	subs	r3, #1
 800660e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d107      	bne.n	8006624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800

08006638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0cc      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	4b68      	ldr	r3, [pc, #416]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d90c      	bls.n	8006674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b65      	ldr	r3, [pc, #404]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b63      	ldr	r3, [pc, #396]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0b8      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d020      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800668c:	4b59      	ldr	r3, [pc, #356]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a58      	ldr	r2, [pc, #352]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066a4:	4b53      	ldr	r3, [pc, #332]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4a52      	ldr	r2, [pc, #328]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b0:	4b50      	ldr	r3, [pc, #320]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	494d      	ldr	r1, [pc, #308]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d044      	beq.n	8006758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d6:	4b47      	ldr	r3, [pc, #284]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d119      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e07f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d003      	beq.n	80066f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f6:	4b3f      	ldr	r3, [pc, #252]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e06f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006706:	4b3b      	ldr	r3, [pc, #236]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e067      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006716:	4b37      	ldr	r3, [pc, #220]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f023 0203 	bic.w	r2, r3, #3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4934      	ldr	r1, [pc, #208]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	4313      	orrs	r3, r2
 8006726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006728:	f7fc fafc 	bl	8002d24 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672e:	e00a      	b.n	8006746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006730:	f7fc faf8 	bl	8002d24 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e04f      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006746:	4b2b      	ldr	r3, [pc, #172]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 020c 	and.w	r2, r3, #12
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	429a      	cmp	r2, r3
 8006756:	d1eb      	bne.n	8006730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006758:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d20c      	bcs.n	8006780 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006766:	4b22      	ldr	r3, [pc, #136]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b20      	ldr	r3, [pc, #128]	@ (80067f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e032      	b.n	80067e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800678c:	4b19      	ldr	r3, [pc, #100]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4916      	ldr	r1, [pc, #88]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067aa:	4b12      	ldr	r3, [pc, #72]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	490e      	ldr	r1, [pc, #56]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067be:	f000 f821 	bl	8006804 <HAL_RCC_GetSysClockFreq>
 80067c2:	4602      	mov	r2, r0
 80067c4:	4b0b      	ldr	r3, [pc, #44]	@ (80067f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	490a      	ldr	r1, [pc, #40]	@ (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	5ccb      	ldrb	r3, [r1, r3]
 80067d2:	fa22 f303 	lsr.w	r3, r2, r3
 80067d6:	4a09      	ldr	r2, [pc, #36]	@ (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80067da:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fc fa5c 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40023c00 	.word	0x40023c00
 80067f4:	40023800 	.word	0x40023800
 80067f8:	0800befc 	.word	0x0800befc
 80067fc:	20000014 	.word	0x20000014
 8006800:	20000018 	.word	0x20000018

08006804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006808:	b094      	sub	sp, #80	@ 0x50
 800680a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800681c:	4b79      	ldr	r3, [pc, #484]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 030c 	and.w	r3, r3, #12
 8006824:	2b08      	cmp	r3, #8
 8006826:	d00d      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x40>
 8006828:	2b08      	cmp	r3, #8
 800682a:	f200 80e1 	bhi.w	80069f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_RCC_GetSysClockFreq+0x34>
 8006832:	2b04      	cmp	r3, #4
 8006834:	d003      	beq.n	800683e <HAL_RCC_GetSysClockFreq+0x3a>
 8006836:	e0db      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006838:	4b73      	ldr	r3, [pc, #460]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800683a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800683c:	e0db      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800683e:	4b73      	ldr	r3, [pc, #460]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8006840:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006842:	e0d8      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006844:	4b6f      	ldr	r3, [pc, #444]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800684c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800684e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d063      	beq.n	8006922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800685a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	099b      	lsrs	r3, r3, #6
 8006860:	2200      	movs	r2, #0
 8006862:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006864:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	633b      	str	r3, [r7, #48]	@ 0x30
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
 8006872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	f04f 0000 	mov.w	r0, #0
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	0159      	lsls	r1, r3, #5
 8006884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006888:	0150      	lsls	r0, r2, #5
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4621      	mov	r1, r4
 8006890:	1a51      	subs	r1, r2, r1
 8006892:	6139      	str	r1, [r7, #16]
 8006894:	4629      	mov	r1, r5
 8006896:	eb63 0301 	sbc.w	r3, r3, r1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068a8:	4659      	mov	r1, fp
 80068aa:	018b      	lsls	r3, r1, #6
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068b2:	4651      	mov	r1, sl
 80068b4:	018a      	lsls	r2, r1, #6
 80068b6:	4651      	mov	r1, sl
 80068b8:	ebb2 0801 	subs.w	r8, r2, r1
 80068bc:	4659      	mov	r1, fp
 80068be:	eb63 0901 	sbc.w	r9, r3, r1
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068d6:	4690      	mov	r8, r2
 80068d8:	4699      	mov	r9, r3
 80068da:	4623      	mov	r3, r4
 80068dc:	eb18 0303 	adds.w	r3, r8, r3
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	462b      	mov	r3, r5
 80068e4:	eb49 0303 	adc.w	r3, r9, r3
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068f6:	4629      	mov	r1, r5
 80068f8:	024b      	lsls	r3, r1, #9
 80068fa:	4621      	mov	r1, r4
 80068fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006900:	4621      	mov	r1, r4
 8006902:	024a      	lsls	r2, r1, #9
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690a:	2200      	movs	r2, #0
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800690e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006914:	f7fa f948 	bl	8000ba8 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4613      	mov	r3, r2
 800691e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006920:	e058      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006922:	4b38      	ldr	r3, [pc, #224]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	2200      	movs	r2, #0
 800692a:	4618      	mov	r0, r3
 800692c:	4611      	mov	r1, r2
 800692e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	2300      	movs	r3, #0
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800693c:	4642      	mov	r2, r8
 800693e:	464b      	mov	r3, r9
 8006940:	f04f 0000 	mov.w	r0, #0
 8006944:	f04f 0100 	mov.w	r1, #0
 8006948:	0159      	lsls	r1, r3, #5
 800694a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800694e:	0150      	lsls	r0, r2, #5
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4641      	mov	r1, r8
 8006956:	ebb2 0a01 	subs.w	sl, r2, r1
 800695a:	4649      	mov	r1, r9
 800695c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800696c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006974:	ebb2 040a 	subs.w	r4, r2, sl
 8006978:	eb63 050b 	sbc.w	r5, r3, fp
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	00eb      	lsls	r3, r5, #3
 8006986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800698a:	00e2      	lsls	r2, r4, #3
 800698c:	4614      	mov	r4, r2
 800698e:	461d      	mov	r5, r3
 8006990:	4643      	mov	r3, r8
 8006992:	18e3      	adds	r3, r4, r3
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	464b      	mov	r3, r9
 8006998:	eb45 0303 	adc.w	r3, r5, r3
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069aa:	4629      	mov	r1, r5
 80069ac:	028b      	lsls	r3, r1, #10
 80069ae:	4621      	mov	r1, r4
 80069b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069b4:	4621      	mov	r1, r4
 80069b6:	028a      	lsls	r2, r1, #10
 80069b8:	4610      	mov	r0, r2
 80069ba:	4619      	mov	r1, r3
 80069bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069be:	2200      	movs	r2, #0
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	61fa      	str	r2, [r7, #28]
 80069c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c8:	f7fa f8ee 	bl	8000ba8 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4613      	mov	r3, r2
 80069d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	3301      	adds	r3, #1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80069e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069ee:	e002      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069f0:	4b05      	ldr	r3, [pc, #20]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80069f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3750      	adds	r7, #80	@ 0x50
 80069fc:	46bd      	mov	sp, r7
 80069fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a02:	bf00      	nop
 8006a04:	40023800 	.word	0x40023800
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	007a1200 	.word	0x007a1200

08006a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a14:	4b03      	ldr	r3, [pc, #12]	@ (8006a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a16:	681b      	ldr	r3, [r3, #0]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20000014 	.word	0x20000014

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a2c:	f7ff fff0 	bl	8006a10 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b05      	ldr	r3, [pc, #20]	@ (8006a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	0a9b      	lsrs	r3, r3, #10
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4903      	ldr	r1, [pc, #12]	@ (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	0800bf0c 	.word	0x0800bf0c

08006a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a54:	f7ff ffdc 	bl	8006a10 <HAL_RCC_GetHCLKFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b05      	ldr	r3, [pc, #20]	@ (8006a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0b5b      	lsrs	r3, r3, #13
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4903      	ldr	r1, [pc, #12]	@ (8006a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40023800 	.word	0x40023800
 8006a74:	0800bf0c 	.word	0x0800bf0c

08006a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e07b      	b.n	8006b82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d108      	bne.n	8006aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a9a:	d009      	beq.n	8006ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61da      	str	r2, [r3, #28]
 8006aa2:	e005      	b.n	8006ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fb fabc 	bl	8002048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b34:	ea42 0103 	orr.w	r1, r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	f003 0104 	and.w	r1, r3, #4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	f003 0210 	and.w	r2, r3, #16
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e042      	b.n	8006c22 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fb fd79 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	@ 0x24
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fd1a 	bl	8007608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d121      	bne.n	8006c88 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_UART_Transmit_IT+0x26>
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01a      	b.n	8006c8a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2221      	movs	r2, #33	@ 0x21
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d112      	bne.n	8006cd6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_UART_Receive_IT+0x26>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e00b      	b.n	8006cd8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fac7 	bl	8007260 <UART_Start_Receive_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	e000      	b.n	8006cd8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <HAL_UART_IRQHandler+0x66>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fba4 	bl	800748c <UART_Receive_IT>
      return;
 8006d44:	e273      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80de 	beq.w	8006f0c <HAL_UART_IRQHandler+0x22c>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80d1 	beq.w	8006f0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <HAL_UART_IRQHandler+0xae>
 8006d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d86:	f043 0201 	orr.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <HAL_UART_IRQHandler+0xd2>
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xf6>
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0204 	orr.w	r2, r3, #4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <HAL_UART_IRQHandler+0x126>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 820a 	beq.w	8007224 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_UART_IRQHandler+0x14e>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb2f 	bl	800748c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <HAL_UART_IRQHandler+0x17a>
 8006e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d04f      	beq.n	8006efa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa3a 	bl	80072d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b40      	cmp	r3, #64	@ 0x40
 8006e6c:	d141      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1d9      	bne.n	8006e6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d013      	beq.n	8006eea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec6:	4a8a      	ldr	r2, [pc, #552]	@ (80070f0 <HAL_UART_IRQHandler+0x410>)
 8006ec8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc f8d9 	bl	8003086 <HAL_DMA_Abort_IT>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	e00e      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9a2 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	e00a      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f99e 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e006      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f99a 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f06:	e18d      	b.n	8007224 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	bf00      	nop
    return;
 8006f0a:	e18b      	b.n	8007224 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f040 8167 	bne.w	80071e4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8160 	beq.w	80071e4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8159 	beq.w	80071e4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f52:	2b40      	cmp	r3, #64	@ 0x40
 8006f54:	f040 80ce 	bne.w	80070f4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a9 	beq.w	80070c0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f76:	429a      	cmp	r2, r3
 8006f78:	f080 80a2 	bcs.w	80070c0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8e:	f000 8088 	beq.w	80070a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d9      	bne.n	8006f92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007002:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007006:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800700a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e1      	bne.n	8006fde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800702a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800702c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800703e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007040:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800704c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e3      	bne.n	800701a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007084:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007086:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800708a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e3      	bne.n	8007060 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	4618      	mov	r0, r3
 800709e:	f7fb ff82 	bl	8002fa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8c5 	bl	8007248 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80070be:	e0b3      	b.n	8007228 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070c8:	429a      	cmp	r2, r3
 80070ca:	f040 80ad 	bne.w	8007228 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d8:	f040 80a6 	bne.w	8007228 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8ad 	bl	8007248 <HAL_UARTEx_RxEventCallback>
      return;
 80070ee:	e09b      	b.n	8007228 <HAL_UART_IRQHandler+0x548>
 80070f0:	0800739b 	.word	0x0800739b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 808e 	beq.w	800722c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8089 	beq.w	800722c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800713e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e3      	bne.n	800711a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3314      	adds	r3, #20
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	623b      	str	r3, [r7, #32]
   return(result);
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007176:	633a      	str	r2, [r7, #48]	@ 0x30
 8007178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800717c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e3      	bne.n	8007152 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0310 	bic.w	r3, r3, #16
 80071ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071bc:	61fa      	str	r2, [r7, #28]
 80071be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	69b9      	ldr	r1, [r7, #24]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e3      	bne.n	8007198 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f833 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071e2:	e023      	b.n	800722c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <HAL_UART_IRQHandler+0x524>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8dd 	bl	80073bc <UART_Transmit_IT>
    return;
 8007202:	e014      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00e      	beq.n	800722e <HAL_UART_IRQHandler+0x54e>
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f91d 	bl	800745c <UART_EndTransmit_IT>
    return;
 8007222:	e004      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
    return;
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
      return;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
      return;
 800722c:	bf00      	nop
  }
}
 800722e:	37e8      	adds	r7, #232	@ 0xe8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2222      	movs	r2, #34	@ 0x22
 800728a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0201 	orr.w	r2, r2, #1
 80072b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0220 	orr.w	r2, r2, #32
 80072c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b095      	sub	sp, #84	@ 0x54
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	330c      	adds	r3, #12
 80072fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3314      	adds	r3, #20
 800732e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e5      	bne.n	8007310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	d119      	bne.n	8007380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	60bb      	str	r3, [r7, #8]
   return(result);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f023 0310 	bic.w	r3, r3, #16
 8007362:	647b      	str	r3, [r7, #68]	@ 0x44
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800736c:	61ba      	str	r2, [r7, #24]
 800736e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6979      	ldr	r1, [r7, #20]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	613b      	str	r3, [r7, #16]
   return(result);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800738e:	bf00      	nop
 8007390:	3754      	adds	r7, #84	@ 0x54
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ff40 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b21      	cmp	r3, #33	@ 0x21
 80073ce:	d13e      	bne.n	800744e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d8:	d114      	bne.n	8007404 <UART_Transmit_IT+0x48>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d110      	bne.n	8007404 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	1c9a      	adds	r2, r3, #2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]
 8007402:	e008      	b.n	8007416 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	1c59      	adds	r1, r3, #1
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6211      	str	r1, [r2, #32]
 800740e:	781a      	ldrb	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29b      	uxth	r3, r3
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4619      	mov	r1, r3
 8007424:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10f      	bne.n	800744a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007438:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007448:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007472:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa ffb1 	bl	80023e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	@ 0x30
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007498:	2300      	movs	r3, #0
 800749a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b22      	cmp	r3, #34	@ 0x22
 80074a6:	f040 80aa 	bne.w	80075fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b2:	d115      	bne.n	80074e0 <UART_Receive_IT+0x54>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d111      	bne.n	80074e0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	1c9a      	adds	r2, r3, #2
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80074de:	e024      	b.n	800752a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ee:	d007      	beq.n	8007500 <UART_Receive_IT+0x74>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <UART_Receive_IT+0x82>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e008      	b.n	8007520 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751a:	b2da      	uxtb	r2, r3
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4619      	mov	r1, r3
 8007538:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800753a:	2b00      	cmp	r3, #0
 800753c:	d15d      	bne.n	80075fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0220 	bic.w	r2, r2, #32
 800754c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800755c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0201 	bic.w	r2, r2, #1
 800756c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007580:	2b01      	cmp	r3, #1
 8007582:	d135      	bne.n	80075f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	613b      	str	r3, [r7, #16]
   return(result);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f023 0310 	bic.w	r3, r3, #16
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075aa:	623a      	str	r2, [r7, #32]
 80075ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	69f9      	ldr	r1, [r7, #28]
 80075b0:	6a3a      	ldr	r2, [r7, #32]
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d10a      	bne.n	80075e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fe2d 	bl	8007248 <HAL_UARTEx_RxEventCallback>
 80075ee:	e002      	b.n	80075f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7fa ffe3 	bl	80025bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e002      	b.n	8007600 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e000      	b.n	8007600 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075fe:	2302      	movs	r3, #2
  }
}
 8007600:	4618      	mov	r0, r3
 8007602:	3730      	adds	r7, #48	@ 0x30
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800760c:	b0c0      	sub	sp, #256	@ 0x100
 800760e:	af00      	add	r7, sp, #0
 8007610:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007624:	68d9      	ldr	r1, [r3, #12]
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	ea40 0301 	orr.w	r3, r0, r1
 8007630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	431a      	orrs	r2, r3
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	431a      	orrs	r2, r3
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007660:	f021 010c 	bic.w	r1, r1, #12
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800766e:	430b      	orrs	r3, r1
 8007670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800767e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007682:	6999      	ldr	r1, [r3, #24]
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	ea40 0301 	orr.w	r3, r0, r1
 800768e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b8f      	ldr	r3, [pc, #572]	@ (80078d4 <UART_SetConfig+0x2cc>)
 8007698:	429a      	cmp	r2, r3
 800769a:	d005      	beq.n	80076a8 <UART_SetConfig+0xa0>
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b8d      	ldr	r3, [pc, #564]	@ (80078d8 <UART_SetConfig+0x2d0>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d104      	bne.n	80076b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076a8:	f7ff f9d2 	bl	8006a50 <HAL_RCC_GetPCLK2Freq>
 80076ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80076b0:	e003      	b.n	80076ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076b2:	f7ff f9b9 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 80076b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076c4:	f040 810c 	bne.w	80078e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076da:	4622      	mov	r2, r4
 80076dc:	462b      	mov	r3, r5
 80076de:	1891      	adds	r1, r2, r2
 80076e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076e2:	415b      	adcs	r3, r3
 80076e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076ea:	4621      	mov	r1, r4
 80076ec:	eb12 0801 	adds.w	r8, r2, r1
 80076f0:	4629      	mov	r1, r5
 80076f2:	eb43 0901 	adc.w	r9, r3, r1
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800770a:	4690      	mov	r8, r2
 800770c:	4699      	mov	r9, r3
 800770e:	4623      	mov	r3, r4
 8007710:	eb18 0303 	adds.w	r3, r8, r3
 8007714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007718:	462b      	mov	r3, r5
 800771a:	eb49 0303 	adc.w	r3, r9, r3
 800771e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800772e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007736:	460b      	mov	r3, r1
 8007738:	18db      	adds	r3, r3, r3
 800773a:	653b      	str	r3, [r7, #80]	@ 0x50
 800773c:	4613      	mov	r3, r2
 800773e:	eb42 0303 	adc.w	r3, r2, r3
 8007742:	657b      	str	r3, [r7, #84]	@ 0x54
 8007744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800774c:	f7f9 fa2c 	bl	8000ba8 <__aeabi_uldivmod>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4b61      	ldr	r3, [pc, #388]	@ (80078dc <UART_SetConfig+0x2d4>)
 8007756:	fba3 2302 	umull	r2, r3, r3, r2
 800775a:	095b      	lsrs	r3, r3, #5
 800775c:	011c      	lsls	r4, r3, #4
 800775e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007762:	2200      	movs	r2, #0
 8007764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007768:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800776c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007770:	4642      	mov	r2, r8
 8007772:	464b      	mov	r3, r9
 8007774:	1891      	adds	r1, r2, r2
 8007776:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007778:	415b      	adcs	r3, r3
 800777a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007780:	4641      	mov	r1, r8
 8007782:	eb12 0a01 	adds.w	sl, r2, r1
 8007786:	4649      	mov	r1, r9
 8007788:	eb43 0b01 	adc.w	fp, r3, r1
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800779c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077a0:	4692      	mov	sl, r2
 80077a2:	469b      	mov	fp, r3
 80077a4:	4643      	mov	r3, r8
 80077a6:	eb1a 0303 	adds.w	r3, sl, r3
 80077aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077ae:	464b      	mov	r3, r9
 80077b0:	eb4b 0303 	adc.w	r3, fp, r3
 80077b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077cc:	460b      	mov	r3, r1
 80077ce:	18db      	adds	r3, r3, r3
 80077d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077d2:	4613      	mov	r3, r2
 80077d4:	eb42 0303 	adc.w	r3, r2, r3
 80077d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077e2:	f7f9 f9e1 	bl	8000ba8 <__aeabi_uldivmod>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	4b3b      	ldr	r3, [pc, #236]	@ (80078dc <UART_SetConfig+0x2d4>)
 80077ee:	fba3 2301 	umull	r2, r3, r3, r1
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	2264      	movs	r2, #100	@ 0x64
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	1acb      	subs	r3, r1, r3
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007802:	4b36      	ldr	r3, [pc, #216]	@ (80078dc <UART_SetConfig+0x2d4>)
 8007804:	fba3 2302 	umull	r2, r3, r3, r2
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007810:	441c      	add	r4, r3
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007816:	2200      	movs	r2, #0
 8007818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800781c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007824:	4642      	mov	r2, r8
 8007826:	464b      	mov	r3, r9
 8007828:	1891      	adds	r1, r2, r2
 800782a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800782c:	415b      	adcs	r3, r3
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007834:	4641      	mov	r1, r8
 8007836:	1851      	adds	r1, r2, r1
 8007838:	6339      	str	r1, [r7, #48]	@ 0x30
 800783a:	4649      	mov	r1, r9
 800783c:	414b      	adcs	r3, r1
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800784c:	4659      	mov	r1, fp
 800784e:	00cb      	lsls	r3, r1, #3
 8007850:	4651      	mov	r1, sl
 8007852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007856:	4651      	mov	r1, sl
 8007858:	00ca      	lsls	r2, r1, #3
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	4603      	mov	r3, r0
 8007860:	4642      	mov	r2, r8
 8007862:	189b      	adds	r3, r3, r2
 8007864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007868:	464b      	mov	r3, r9
 800786a:	460a      	mov	r2, r1
 800786c:	eb42 0303 	adc.w	r3, r2, r3
 8007870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007880:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007888:	460b      	mov	r3, r1
 800788a:	18db      	adds	r3, r3, r3
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800788e:	4613      	mov	r3, r2
 8007890:	eb42 0303 	adc.w	r3, r2, r3
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800789a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800789e:	f7f9 f983 	bl	8000ba8 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <UART_SetConfig+0x2d4>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	@ 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	3332      	adds	r3, #50	@ 0x32
 80078ba:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <UART_SetConfig+0x2d4>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f003 0207 	and.w	r2, r3, #7
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4422      	add	r2, r4
 80078ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078d0:	e106      	b.n	8007ae0 <UART_SetConfig+0x4d8>
 80078d2:	bf00      	nop
 80078d4:	40011000 	.word	0x40011000
 80078d8:	40011400 	.word	0x40011400
 80078dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078f2:	4642      	mov	r2, r8
 80078f4:	464b      	mov	r3, r9
 80078f6:	1891      	adds	r1, r2, r2
 80078f8:	6239      	str	r1, [r7, #32]
 80078fa:	415b      	adcs	r3, r3
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007902:	4641      	mov	r1, r8
 8007904:	1854      	adds	r4, r2, r1
 8007906:	4649      	mov	r1, r9
 8007908:	eb43 0501 	adc.w	r5, r3, r1
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	00eb      	lsls	r3, r5, #3
 8007916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800791a:	00e2      	lsls	r2, r4, #3
 800791c:	4614      	mov	r4, r2
 800791e:	461d      	mov	r5, r3
 8007920:	4643      	mov	r3, r8
 8007922:	18e3      	adds	r3, r4, r3
 8007924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007928:	464b      	mov	r3, r9
 800792a:	eb45 0303 	adc.w	r3, r5, r3
 800792e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800793e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800794e:	4629      	mov	r1, r5
 8007950:	008b      	lsls	r3, r1, #2
 8007952:	4621      	mov	r1, r4
 8007954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007958:	4621      	mov	r1, r4
 800795a:	008a      	lsls	r2, r1, #2
 800795c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007960:	f7f9 f922 	bl	8000ba8 <__aeabi_uldivmod>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4b60      	ldr	r3, [pc, #384]	@ (8007aec <UART_SetConfig+0x4e4>)
 800796a:	fba3 2302 	umull	r2, r3, r3, r2
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	011c      	lsls	r4, r3, #4
 8007972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007976:	2200      	movs	r2, #0
 8007978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800797c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007984:	4642      	mov	r2, r8
 8007986:	464b      	mov	r3, r9
 8007988:	1891      	adds	r1, r2, r2
 800798a:	61b9      	str	r1, [r7, #24]
 800798c:	415b      	adcs	r3, r3
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007994:	4641      	mov	r1, r8
 8007996:	1851      	adds	r1, r2, r1
 8007998:	6139      	str	r1, [r7, #16]
 800799a:	4649      	mov	r1, r9
 800799c:	414b      	adcs	r3, r1
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079ac:	4659      	mov	r1, fp
 80079ae:	00cb      	lsls	r3, r1, #3
 80079b0:	4651      	mov	r1, sl
 80079b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079b6:	4651      	mov	r1, sl
 80079b8:	00ca      	lsls	r2, r1, #3
 80079ba:	4610      	mov	r0, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	4603      	mov	r3, r0
 80079c0:	4642      	mov	r2, r8
 80079c2:	189b      	adds	r3, r3, r2
 80079c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079c8:	464b      	mov	r3, r9
 80079ca:	460a      	mov	r2, r1
 80079cc:	eb42 0303 	adc.w	r3, r2, r3
 80079d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079ec:	4649      	mov	r1, r9
 80079ee:	008b      	lsls	r3, r1, #2
 80079f0:	4641      	mov	r1, r8
 80079f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079f6:	4641      	mov	r1, r8
 80079f8:	008a      	lsls	r2, r1, #2
 80079fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079fe:	f7f9 f8d3 	bl	8000ba8 <__aeabi_uldivmod>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	4b38      	ldr	r3, [pc, #224]	@ (8007aec <UART_SetConfig+0x4e4>)
 8007a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	2264      	movs	r2, #100	@ 0x64
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	1acb      	subs	r3, r1, r3
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	3332      	adds	r3, #50	@ 0x32
 8007a1c:	4a33      	ldr	r2, [pc, #204]	@ (8007aec <UART_SetConfig+0x4e4>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a28:	441c      	add	r4, r3
 8007a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a2e:	2200      	movs	r2, #0
 8007a30:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a32:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	1891      	adds	r1, r2, r2
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	415b      	adcs	r3, r3
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a48:	4641      	mov	r1, r8
 8007a4a:	1851      	adds	r1, r2, r1
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	4649      	mov	r1, r9
 8007a50:	414b      	adcs	r3, r1
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a60:	4659      	mov	r1, fp
 8007a62:	00cb      	lsls	r3, r1, #3
 8007a64:	4651      	mov	r1, sl
 8007a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a6a:	4651      	mov	r1, sl
 8007a6c:	00ca      	lsls	r2, r1, #3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	4642      	mov	r2, r8
 8007a76:	189b      	adds	r3, r3, r2
 8007a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	eb42 0303 	adc.w	r3, r2, r3
 8007a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	008b      	lsls	r3, r1, #2
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	008a      	lsls	r2, r1, #2
 8007aaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007aae:	f7f9 f87b 	bl	8000ba8 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <UART_SetConfig+0x4e4>)
 8007ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	2164      	movs	r1, #100	@ 0x64
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	3332      	adds	r3, #50	@ 0x32
 8007aca:	4a08      	ldr	r2, [pc, #32]	@ (8007aec <UART_SetConfig+0x4e4>)
 8007acc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	f003 020f 	and.w	r2, r3, #15
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4422      	add	r2, r4
 8007ade:	609a      	str	r2, [r3, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aec:	51eb851f 	.word	0x51eb851f

08007af0 <atoi>:
 8007af0:	220a      	movs	r2, #10
 8007af2:	2100      	movs	r1, #0
 8007af4:	f000 b93a 	b.w	8007d6c <strtol>

08007af8 <malloc>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	@ (8007b04 <malloc+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f000 b82d 	b.w	8007b5c <_malloc_r>
 8007b02:	bf00      	nop
 8007b04:	2000002c 	.word	0x2000002c

08007b08 <free>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	@ (8007b14 <free+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f001 bf37 	b.w	8009980 <_free_r>
 8007b12:	bf00      	nop
 8007b14:	2000002c 	.word	0x2000002c

08007b18 <sbrk_aligned>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007b58 <sbrk_aligned+0x40>)
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	6831      	ldr	r1, [r6, #0]
 8007b20:	4605      	mov	r5, r0
 8007b22:	b911      	cbnz	r1, 8007b2a <sbrk_aligned+0x12>
 8007b24:	f001 f856 	bl	8008bd4 <_sbrk_r>
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f001 f851 	bl	8008bd4 <_sbrk_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d103      	bne.n	8007b3e <sbrk_aligned+0x26>
 8007b36:	f04f 34ff 	mov.w	r4, #4294967295
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
 8007b3e:	1cc4      	adds	r4, r0, #3
 8007b40:	f024 0403 	bic.w	r4, r4, #3
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d0f8      	beq.n	8007b3a <sbrk_aligned+0x22>
 8007b48:	1a21      	subs	r1, r4, r0
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f001 f842 	bl	8008bd4 <_sbrk_r>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d1f2      	bne.n	8007b3a <sbrk_aligned+0x22>
 8007b54:	e7ef      	b.n	8007b36 <sbrk_aligned+0x1e>
 8007b56:	bf00      	nop
 8007b58:	20000a00 	.word	0x20000a00

08007b5c <_malloc_r>:
 8007b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b60:	1ccd      	adds	r5, r1, #3
 8007b62:	f025 0503 	bic.w	r5, r5, #3
 8007b66:	3508      	adds	r5, #8
 8007b68:	2d0c      	cmp	r5, #12
 8007b6a:	bf38      	it	cc
 8007b6c:	250c      	movcc	r5, #12
 8007b6e:	2d00      	cmp	r5, #0
 8007b70:	4606      	mov	r6, r0
 8007b72:	db01      	blt.n	8007b78 <_malloc_r+0x1c>
 8007b74:	42a9      	cmp	r1, r5
 8007b76:	d904      	bls.n	8007b82 <_malloc_r+0x26>
 8007b78:	230c      	movs	r3, #12
 8007b7a:	6033      	str	r3, [r6, #0]
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c58 <_malloc_r+0xfc>
 8007b86:	f000 f869 	bl	8007c5c <__malloc_lock>
 8007b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8e:	461c      	mov	r4, r3
 8007b90:	bb44      	cbnz	r4, 8007be4 <_malloc_r+0x88>
 8007b92:	4629      	mov	r1, r5
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff ffbf 	bl	8007b18 <sbrk_aligned>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	d158      	bne.n	8007c52 <_malloc_r+0xf6>
 8007ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ba4:	4627      	mov	r7, r4
 8007ba6:	2f00      	cmp	r7, #0
 8007ba8:	d143      	bne.n	8007c32 <_malloc_r+0xd6>
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	d04b      	beq.n	8007c46 <_malloc_r+0xea>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	eb04 0903 	add.w	r9, r4, r3
 8007bb8:	f001 f80c 	bl	8008bd4 <_sbrk_r>
 8007bbc:	4581      	cmp	r9, r0
 8007bbe:	d142      	bne.n	8007c46 <_malloc_r+0xea>
 8007bc0:	6821      	ldr	r1, [r4, #0]
 8007bc2:	1a6d      	subs	r5, r5, r1
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ffa6 	bl	8007b18 <sbrk_aligned>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d03a      	beq.n	8007c46 <_malloc_r+0xea>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	442b      	add	r3, r5
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	bb62      	cbnz	r2, 8007c38 <_malloc_r+0xdc>
 8007bde:	f8c8 7000 	str.w	r7, [r8]
 8007be2:	e00f      	b.n	8007c04 <_malloc_r+0xa8>
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	1b52      	subs	r2, r2, r5
 8007be8:	d420      	bmi.n	8007c2c <_malloc_r+0xd0>
 8007bea:	2a0b      	cmp	r2, #11
 8007bec:	d917      	bls.n	8007c1e <_malloc_r+0xc2>
 8007bee:	1961      	adds	r1, r4, r5
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	6025      	str	r5, [r4, #0]
 8007bf4:	bf18      	it	ne
 8007bf6:	6059      	strne	r1, [r3, #4]
 8007bf8:	6863      	ldr	r3, [r4, #4]
 8007bfa:	bf08      	it	eq
 8007bfc:	f8c8 1000 	streq.w	r1, [r8]
 8007c00:	5162      	str	r2, [r4, r5]
 8007c02:	604b      	str	r3, [r1, #4]
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f82f 	bl	8007c68 <__malloc_unlock>
 8007c0a:	f104 000b 	add.w	r0, r4, #11
 8007c0e:	1d23      	adds	r3, r4, #4
 8007c10:	f020 0007 	bic.w	r0, r0, #7
 8007c14:	1ac2      	subs	r2, r0, r3
 8007c16:	bf1c      	itt	ne
 8007c18:	1a1b      	subne	r3, r3, r0
 8007c1a:	50a3      	strne	r3, [r4, r2]
 8007c1c:	e7af      	b.n	8007b7e <_malloc_r+0x22>
 8007c1e:	6862      	ldr	r2, [r4, #4]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	bf0c      	ite	eq
 8007c24:	f8c8 2000 	streq.w	r2, [r8]
 8007c28:	605a      	strne	r2, [r3, #4]
 8007c2a:	e7eb      	b.n	8007c04 <_malloc_r+0xa8>
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	6864      	ldr	r4, [r4, #4]
 8007c30:	e7ae      	b.n	8007b90 <_malloc_r+0x34>
 8007c32:	463c      	mov	r4, r7
 8007c34:	687f      	ldr	r7, [r7, #4]
 8007c36:	e7b6      	b.n	8007ba6 <_malloc_r+0x4a>
 8007c38:	461a      	mov	r2, r3
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d1fb      	bne.n	8007c38 <_malloc_r+0xdc>
 8007c40:	2300      	movs	r3, #0
 8007c42:	6053      	str	r3, [r2, #4]
 8007c44:	e7de      	b.n	8007c04 <_malloc_r+0xa8>
 8007c46:	230c      	movs	r3, #12
 8007c48:	6033      	str	r3, [r6, #0]
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f80c 	bl	8007c68 <__malloc_unlock>
 8007c50:	e794      	b.n	8007b7c <_malloc_r+0x20>
 8007c52:	6005      	str	r5, [r0, #0]
 8007c54:	e7d6      	b.n	8007c04 <_malloc_r+0xa8>
 8007c56:	bf00      	nop
 8007c58:	20000a04 	.word	0x20000a04

08007c5c <__malloc_lock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	@ (8007c64 <__malloc_lock+0x8>)
 8007c5e:	f001 b806 	b.w	8008c6e <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	20000b48 	.word	0x20000b48

08007c68 <__malloc_unlock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	@ (8007c70 <__malloc_unlock+0x8>)
 8007c6a:	f001 b801 	b.w	8008c70 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20000b48 	.word	0x20000b48

08007c74 <_strtol_l.isra.0>:
 8007c74:	2b24      	cmp	r3, #36	@ 0x24
 8007c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7a:	4686      	mov	lr, r0
 8007c7c:	4690      	mov	r8, r2
 8007c7e:	d801      	bhi.n	8007c84 <_strtol_l.isra.0+0x10>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <_strtol_l.isra.0+0x1e>
 8007c84:	f000 ffc8 	bl	8008c18 <__errno>
 8007c88:	2316      	movs	r3, #22
 8007c8a:	6003      	str	r3, [r0, #0]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	4834      	ldr	r0, [pc, #208]	@ (8007d64 <_strtol_l.isra.0+0xf0>)
 8007c94:	460d      	mov	r5, r1
 8007c96:	462a      	mov	r2, r5
 8007c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c9c:	5d06      	ldrb	r6, [r0, r4]
 8007c9e:	f016 0608 	ands.w	r6, r6, #8
 8007ca2:	d1f8      	bne.n	8007c96 <_strtol_l.isra.0+0x22>
 8007ca4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ca6:	d110      	bne.n	8007cca <_strtol_l.isra.0+0x56>
 8007ca8:	782c      	ldrb	r4, [r5, #0]
 8007caa:	2601      	movs	r6, #1
 8007cac:	1c95      	adds	r5, r2, #2
 8007cae:	f033 0210 	bics.w	r2, r3, #16
 8007cb2:	d115      	bne.n	8007ce0 <_strtol_l.isra.0+0x6c>
 8007cb4:	2c30      	cmp	r4, #48	@ 0x30
 8007cb6:	d10d      	bne.n	8007cd4 <_strtol_l.isra.0+0x60>
 8007cb8:	782a      	ldrb	r2, [r5, #0]
 8007cba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007cbe:	2a58      	cmp	r2, #88	@ 0x58
 8007cc0:	d108      	bne.n	8007cd4 <_strtol_l.isra.0+0x60>
 8007cc2:	786c      	ldrb	r4, [r5, #1]
 8007cc4:	3502      	adds	r5, #2
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	e00a      	b.n	8007ce0 <_strtol_l.isra.0+0x6c>
 8007cca:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ccc:	bf04      	itt	eq
 8007cce:	782c      	ldrbeq	r4, [r5, #0]
 8007cd0:	1c95      	addeq	r5, r2, #2
 8007cd2:	e7ec      	b.n	8007cae <_strtol_l.isra.0+0x3a>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f6      	bne.n	8007cc6 <_strtol_l.isra.0+0x52>
 8007cd8:	2c30      	cmp	r4, #48	@ 0x30
 8007cda:	bf14      	ite	ne
 8007cdc:	230a      	movne	r3, #10
 8007cde:	2308      	moveq	r3, #8
 8007ce0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ce4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ce8:	2200      	movs	r2, #0
 8007cea:	fbbc f9f3 	udiv	r9, ip, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007cf8:	2f09      	cmp	r7, #9
 8007cfa:	d80f      	bhi.n	8007d1c <_strtol_l.isra.0+0xa8>
 8007cfc:	463c      	mov	r4, r7
 8007cfe:	42a3      	cmp	r3, r4
 8007d00:	dd1b      	ble.n	8007d3a <_strtol_l.isra.0+0xc6>
 8007d02:	1c57      	adds	r7, r2, #1
 8007d04:	d007      	beq.n	8007d16 <_strtol_l.isra.0+0xa2>
 8007d06:	4581      	cmp	r9, r0
 8007d08:	d314      	bcc.n	8007d34 <_strtol_l.isra.0+0xc0>
 8007d0a:	d101      	bne.n	8007d10 <_strtol_l.isra.0+0x9c>
 8007d0c:	45a2      	cmp	sl, r4
 8007d0e:	db11      	blt.n	8007d34 <_strtol_l.isra.0+0xc0>
 8007d10:	fb00 4003 	mla	r0, r0, r3, r4
 8007d14:	2201      	movs	r2, #1
 8007d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1a:	e7eb      	b.n	8007cf4 <_strtol_l.isra.0+0x80>
 8007d1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d20:	2f19      	cmp	r7, #25
 8007d22:	d801      	bhi.n	8007d28 <_strtol_l.isra.0+0xb4>
 8007d24:	3c37      	subs	r4, #55	@ 0x37
 8007d26:	e7ea      	b.n	8007cfe <_strtol_l.isra.0+0x8a>
 8007d28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d2c:	2f19      	cmp	r7, #25
 8007d2e:	d804      	bhi.n	8007d3a <_strtol_l.isra.0+0xc6>
 8007d30:	3c57      	subs	r4, #87	@ 0x57
 8007d32:	e7e4      	b.n	8007cfe <_strtol_l.isra.0+0x8a>
 8007d34:	f04f 32ff 	mov.w	r2, #4294967295
 8007d38:	e7ed      	b.n	8007d16 <_strtol_l.isra.0+0xa2>
 8007d3a:	1c53      	adds	r3, r2, #1
 8007d3c:	d108      	bne.n	8007d50 <_strtol_l.isra.0+0xdc>
 8007d3e:	2322      	movs	r3, #34	@ 0x22
 8007d40:	f8ce 3000 	str.w	r3, [lr]
 8007d44:	4660      	mov	r0, ip
 8007d46:	f1b8 0f00 	cmp.w	r8, #0
 8007d4a:	d0a0      	beq.n	8007c8e <_strtol_l.isra.0+0x1a>
 8007d4c:	1e69      	subs	r1, r5, #1
 8007d4e:	e006      	b.n	8007d5e <_strtol_l.isra.0+0xea>
 8007d50:	b106      	cbz	r6, 8007d54 <_strtol_l.isra.0+0xe0>
 8007d52:	4240      	negs	r0, r0
 8007d54:	f1b8 0f00 	cmp.w	r8, #0
 8007d58:	d099      	beq.n	8007c8e <_strtol_l.isra.0+0x1a>
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d1f6      	bne.n	8007d4c <_strtol_l.isra.0+0xd8>
 8007d5e:	f8c8 1000 	str.w	r1, [r8]
 8007d62:	e794      	b.n	8007c8e <_strtol_l.isra.0+0x1a>
 8007d64:	0800e715 	.word	0x0800e715

08007d68 <_strtol_r>:
 8007d68:	f7ff bf84 	b.w	8007c74 <_strtol_l.isra.0>

08007d6c <strtol>:
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	460a      	mov	r2, r1
 8007d70:	4601      	mov	r1, r0
 8007d72:	4802      	ldr	r0, [pc, #8]	@ (8007d7c <strtol+0x10>)
 8007d74:	6800      	ldr	r0, [r0, #0]
 8007d76:	f7ff bf7d 	b.w	8007c74 <_strtol_l.isra.0>
 8007d7a:	bf00      	nop
 8007d7c:	2000002c 	.word	0x2000002c

08007d80 <__cvt>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	ec57 6b10 	vmov	r6, r7, d0
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	463b      	mov	r3, r7
 8007d90:	bfbb      	ittet	lt
 8007d92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d96:	461f      	movlt	r7, r3
 8007d98:	2300      	movge	r3, #0
 8007d9a:	232d      	movlt	r3, #45	@ 0x2d
 8007d9c:	700b      	strb	r3, [r1, #0]
 8007d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007da0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007da4:	4691      	mov	r9, r2
 8007da6:	f023 0820 	bic.w	r8, r3, #32
 8007daa:	bfbc      	itt	lt
 8007dac:	4632      	movlt	r2, r6
 8007dae:	4616      	movlt	r6, r2
 8007db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007db4:	d005      	beq.n	8007dc2 <__cvt+0x42>
 8007db6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007dba:	d100      	bne.n	8007dbe <__cvt+0x3e>
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	e000      	b.n	8007dc4 <__cvt+0x44>
 8007dc2:	2103      	movs	r1, #3
 8007dc4:	ab03      	add	r3, sp, #12
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	ab02      	add	r3, sp, #8
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	ec47 6b10 	vmov	d0, r6, r7
 8007dd0:	4653      	mov	r3, sl
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	f001 f804 	bl	8008de0 <_dtoa_r>
 8007dd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ddc:	4605      	mov	r5, r0
 8007dde:	d119      	bne.n	8007e14 <__cvt+0x94>
 8007de0:	f019 0f01 	tst.w	r9, #1
 8007de4:	d00e      	beq.n	8007e04 <__cvt+0x84>
 8007de6:	eb00 0904 	add.w	r9, r0, r4
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df6:	b108      	cbz	r0, 8007dfc <__cvt+0x7c>
 8007df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dfc:	2230      	movs	r2, #48	@ 0x30
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	454b      	cmp	r3, r9
 8007e02:	d31e      	bcc.n	8007e42 <__cvt+0xc2>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e08:	1b5b      	subs	r3, r3, r5
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	b004      	add	sp, #16
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e18:	eb00 0904 	add.w	r9, r0, r4
 8007e1c:	d1e5      	bne.n	8007dea <__cvt+0x6a>
 8007e1e:	7803      	ldrb	r3, [r0, #0]
 8007e20:	2b30      	cmp	r3, #48	@ 0x30
 8007e22:	d10a      	bne.n	8007e3a <__cvt+0xba>
 8007e24:	2200      	movs	r2, #0
 8007e26:	2300      	movs	r3, #0
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e30:	b918      	cbnz	r0, 8007e3a <__cvt+0xba>
 8007e32:	f1c4 0401 	rsb	r4, r4, #1
 8007e36:	f8ca 4000 	str.w	r4, [sl]
 8007e3a:	f8da 3000 	ldr.w	r3, [sl]
 8007e3e:	4499      	add	r9, r3
 8007e40:	e7d3      	b.n	8007dea <__cvt+0x6a>
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e7d9      	b.n	8007dfe <__cvt+0x7e>

08007e4a <__exponent>:
 8007e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	bfba      	itte	lt
 8007e50:	4249      	neglt	r1, r1
 8007e52:	232d      	movlt	r3, #45	@ 0x2d
 8007e54:	232b      	movge	r3, #43	@ 0x2b
 8007e56:	2909      	cmp	r1, #9
 8007e58:	7002      	strb	r2, [r0, #0]
 8007e5a:	7043      	strb	r3, [r0, #1]
 8007e5c:	dd29      	ble.n	8007eb2 <__exponent+0x68>
 8007e5e:	f10d 0307 	add.w	r3, sp, #7
 8007e62:	461d      	mov	r5, r3
 8007e64:	270a      	movs	r7, #10
 8007e66:	461a      	mov	r2, r3
 8007e68:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e6c:	fb07 1416 	mls	r4, r7, r6, r1
 8007e70:	3430      	adds	r4, #48	@ 0x30
 8007e72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e76:	460c      	mov	r4, r1
 8007e78:	2c63      	cmp	r4, #99	@ 0x63
 8007e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e7e:	4631      	mov	r1, r6
 8007e80:	dcf1      	bgt.n	8007e66 <__exponent+0x1c>
 8007e82:	3130      	adds	r1, #48	@ 0x30
 8007e84:	1e94      	subs	r4, r2, #2
 8007e86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e8a:	1c41      	adds	r1, r0, #1
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	d30a      	bcc.n	8007ea8 <__exponent+0x5e>
 8007e92:	f10d 0309 	add.w	r3, sp, #9
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	42ac      	cmp	r4, r5
 8007e9a:	bf88      	it	hi
 8007e9c:	2300      	movhi	r3, #0
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	4403      	add	r3, r0
 8007ea2:	1a18      	subs	r0, r3, r0
 8007ea4:	b003      	add	sp, #12
 8007ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007eac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007eb0:	e7ed      	b.n	8007e8e <__exponent+0x44>
 8007eb2:	2330      	movs	r3, #48	@ 0x30
 8007eb4:	3130      	adds	r1, #48	@ 0x30
 8007eb6:	7083      	strb	r3, [r0, #2]
 8007eb8:	70c1      	strb	r1, [r0, #3]
 8007eba:	1d03      	adds	r3, r0, #4
 8007ebc:	e7f1      	b.n	8007ea2 <__exponent+0x58>
	...

08007ec0 <_printf_float>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	b08d      	sub	sp, #52	@ 0x34
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ecc:	4616      	mov	r6, r2
 8007ece:	461f      	mov	r7, r3
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	f000 fe47 	bl	8008b64 <_localeconv_r>
 8007ed6:	6803      	ldr	r3, [r0, #0]
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 f9c8 	bl	8000270 <strlen>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee8:	9005      	str	r0, [sp, #20]
 8007eea:	3307      	adds	r3, #7
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	f103 0208 	add.w	r2, r3, #8
 8007ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8007efc:	f8c8 2000 	str.w	r2, [r8]
 8007f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f08:	9307      	str	r3, [sp, #28]
 8007f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f16:	4b9c      	ldr	r3, [pc, #624]	@ (8008188 <_printf_float+0x2c8>)
 8007f18:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1c:	f7f8 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8007f20:	bb70      	cbnz	r0, 8007f80 <_printf_float+0xc0>
 8007f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f26:	4b98      	ldr	r3, [pc, #608]	@ (8008188 <_printf_float+0x2c8>)
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	f7f8 fde0 	bl	8000af0 <__aeabi_dcmple>
 8007f30:	bb30      	cbnz	r0, 8007f80 <_printf_float+0xc0>
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8007f3e:	b110      	cbz	r0, 8007f46 <_printf_float+0x86>
 8007f40:	232d      	movs	r3, #45	@ 0x2d
 8007f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f46:	4a91      	ldr	r2, [pc, #580]	@ (800818c <_printf_float+0x2cc>)
 8007f48:	4b91      	ldr	r3, [pc, #580]	@ (8008190 <_printf_float+0x2d0>)
 8007f4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f4e:	bf8c      	ite	hi
 8007f50:	4690      	movhi	r8, r2
 8007f52:	4698      	movls	r8, r3
 8007f54:	2303      	movs	r3, #3
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	f02b 0304 	bic.w	r3, fp, #4
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	f04f 0900 	mov.w	r9, #0
 8007f62:	9700      	str	r7, [sp, #0]
 8007f64:	4633      	mov	r3, r6
 8007f66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f9d2 	bl	8008314 <_printf_common>
 8007f70:	3001      	adds	r0, #1
 8007f72:	f040 808d 	bne.w	8008090 <_printf_float+0x1d0>
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	b00d      	add	sp, #52	@ 0x34
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	4640      	mov	r0, r8
 8007f86:	4649      	mov	r1, r9
 8007f88:	f7f8 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 8007f8c:	b140      	cbz	r0, 8007fa0 <_printf_float+0xe0>
 8007f8e:	464b      	mov	r3, r9
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bfbc      	itt	lt
 8007f94:	232d      	movlt	r3, #45	@ 0x2d
 8007f96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8008194 <_printf_float+0x2d4>)
 8007f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8008198 <_printf_float+0x2d8>)
 8007f9e:	e7d4      	b.n	8007f4a <_printf_float+0x8a>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fa6:	9206      	str	r2, [sp, #24]
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	d13b      	bne.n	8008024 <_printf_float+0x164>
 8007fac:	2306      	movs	r3, #6
 8007fae:	6063      	str	r3, [r4, #4]
 8007fb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	9303      	str	r3, [sp, #12]
 8007fba:	ab0a      	add	r3, sp, #40	@ 0x28
 8007fbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007fc0:	ab09      	add	r3, sp, #36	@ 0x24
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	ec49 8b10 	vmov	d0, r8, r9
 8007fca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7ff fed6 	bl	8007d80 <__cvt>
 8007fd4:	9b06      	ldr	r3, [sp, #24]
 8007fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fd8:	2b47      	cmp	r3, #71	@ 0x47
 8007fda:	4680      	mov	r8, r0
 8007fdc:	d129      	bne.n	8008032 <_printf_float+0x172>
 8007fde:	1cc8      	adds	r0, r1, #3
 8007fe0:	db02      	blt.n	8007fe8 <_printf_float+0x128>
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	dd41      	ble.n	800806c <_printf_float+0x1ac>
 8007fe8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fec:	fa5f fa8a 	uxtb.w	sl, sl
 8007ff0:	3901      	subs	r1, #1
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ff8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ffa:	f7ff ff26 	bl	8007e4a <__exponent>
 8007ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008000:	1813      	adds	r3, r2, r0
 8008002:	2a01      	cmp	r2, #1
 8008004:	4681      	mov	r9, r0
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	dc02      	bgt.n	8008010 <_printf_float+0x150>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	07d2      	lsls	r2, r2, #31
 800800e:	d501      	bpl.n	8008014 <_printf_float+0x154>
 8008010:	3301      	adds	r3, #1
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0a2      	beq.n	8007f62 <_printf_float+0xa2>
 800801c:	232d      	movs	r3, #45	@ 0x2d
 800801e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008022:	e79e      	b.n	8007f62 <_printf_float+0xa2>
 8008024:	9a06      	ldr	r2, [sp, #24]
 8008026:	2a47      	cmp	r2, #71	@ 0x47
 8008028:	d1c2      	bne.n	8007fb0 <_printf_float+0xf0>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1c0      	bne.n	8007fb0 <_printf_float+0xf0>
 800802e:	2301      	movs	r3, #1
 8008030:	e7bd      	b.n	8007fae <_printf_float+0xee>
 8008032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008036:	d9db      	bls.n	8007ff0 <_printf_float+0x130>
 8008038:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800803c:	d118      	bne.n	8008070 <_printf_float+0x1b0>
 800803e:	2900      	cmp	r1, #0
 8008040:	6863      	ldr	r3, [r4, #4]
 8008042:	dd0b      	ble.n	800805c <_printf_float+0x19c>
 8008044:	6121      	str	r1, [r4, #16]
 8008046:	b913      	cbnz	r3, 800804e <_printf_float+0x18e>
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	07d0      	lsls	r0, r2, #31
 800804c:	d502      	bpl.n	8008054 <_printf_float+0x194>
 800804e:	3301      	adds	r3, #1
 8008050:	440b      	add	r3, r1
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008056:	f04f 0900 	mov.w	r9, #0
 800805a:	e7db      	b.n	8008014 <_printf_float+0x154>
 800805c:	b913      	cbnz	r3, 8008064 <_printf_float+0x1a4>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d2      	lsls	r2, r2, #31
 8008062:	d501      	bpl.n	8008068 <_printf_float+0x1a8>
 8008064:	3302      	adds	r3, #2
 8008066:	e7f4      	b.n	8008052 <_printf_float+0x192>
 8008068:	2301      	movs	r3, #1
 800806a:	e7f2      	b.n	8008052 <_printf_float+0x192>
 800806c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008072:	4299      	cmp	r1, r3
 8008074:	db05      	blt.n	8008082 <_printf_float+0x1c2>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	6121      	str	r1, [r4, #16]
 800807a:	07d8      	lsls	r0, r3, #31
 800807c:	d5ea      	bpl.n	8008054 <_printf_float+0x194>
 800807e:	1c4b      	adds	r3, r1, #1
 8008080:	e7e7      	b.n	8008052 <_printf_float+0x192>
 8008082:	2900      	cmp	r1, #0
 8008084:	bfd4      	ite	le
 8008086:	f1c1 0202 	rsble	r2, r1, #2
 800808a:	2201      	movgt	r2, #1
 800808c:	4413      	add	r3, r2
 800808e:	e7e0      	b.n	8008052 <_printf_float+0x192>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	055a      	lsls	r2, r3, #21
 8008094:	d407      	bmi.n	80080a6 <_printf_float+0x1e6>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	4642      	mov	r2, r8
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	d12b      	bne.n	80080fc <_printf_float+0x23c>
 80080a4:	e767      	b.n	8007f76 <_printf_float+0xb6>
 80080a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080aa:	f240 80dd 	bls.w	8008268 <_printf_float+0x3a8>
 80080ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	f7f8 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d033      	beq.n	8008126 <_printf_float+0x266>
 80080be:	4a37      	ldr	r2, [pc, #220]	@ (800819c <_printf_float+0x2dc>)
 80080c0:	2301      	movs	r3, #1
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f af54 	beq.w	8007f76 <_printf_float+0xb6>
 80080ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080d2:	4543      	cmp	r3, r8
 80080d4:	db02      	blt.n	80080dc <_printf_float+0x21c>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	07d8      	lsls	r0, r3, #31
 80080da:	d50f      	bpl.n	80080fc <_printf_float+0x23c>
 80080dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af45 	beq.w	8007f76 <_printf_float+0xb6>
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80080f4:	f104 0a1a 	add.w	sl, r4, #26
 80080f8:	45c8      	cmp	r8, r9
 80080fa:	dc09      	bgt.n	8008110 <_printf_float+0x250>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	f100 8103 	bmi.w	800830a <_printf_float+0x44a>
 8008104:	68e0      	ldr	r0, [r4, #12]
 8008106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008108:	4298      	cmp	r0, r3
 800810a:	bfb8      	it	lt
 800810c:	4618      	movlt	r0, r3
 800810e:	e734      	b.n	8007f7a <_printf_float+0xba>
 8008110:	2301      	movs	r3, #1
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af2b 	beq.w	8007f76 <_printf_float+0xb6>
 8008120:	f109 0901 	add.w	r9, r9, #1
 8008124:	e7e8      	b.n	80080f8 <_printf_float+0x238>
 8008126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	dc39      	bgt.n	80081a0 <_printf_float+0x2e0>
 800812c:	4a1b      	ldr	r2, [pc, #108]	@ (800819c <_printf_float+0x2dc>)
 800812e:	2301      	movs	r3, #1
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	f43f af1d 	beq.w	8007f76 <_printf_float+0xb6>
 800813c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008140:	ea59 0303 	orrs.w	r3, r9, r3
 8008144:	d102      	bne.n	800814c <_printf_float+0x28c>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	07d9      	lsls	r1, r3, #31
 800814a:	d5d7      	bpl.n	80080fc <_printf_float+0x23c>
 800814c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af0d 	beq.w	8007f76 <_printf_float+0xb6>
 800815c:	f04f 0a00 	mov.w	sl, #0
 8008160:	f104 0b1a 	add.w	fp, r4, #26
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	425b      	negs	r3, r3
 8008168:	4553      	cmp	r3, sl
 800816a:	dc01      	bgt.n	8008170 <_printf_float+0x2b0>
 800816c:	464b      	mov	r3, r9
 800816e:	e793      	b.n	8008098 <_printf_float+0x1d8>
 8008170:	2301      	movs	r3, #1
 8008172:	465a      	mov	r2, fp
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f aefb 	beq.w	8007f76 <_printf_float+0xb6>
 8008180:	f10a 0a01 	add.w	sl, sl, #1
 8008184:	e7ee      	b.n	8008164 <_printf_float+0x2a4>
 8008186:	bf00      	nop
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	0800e819 	.word	0x0800e819
 8008190:	0800e815 	.word	0x0800e815
 8008194:	0800e821 	.word	0x0800e821
 8008198:	0800e81d 	.word	0x0800e81d
 800819c:	0800e9ea 	.word	0x0800e9ea
 80081a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081a6:	4553      	cmp	r3, sl
 80081a8:	bfa8      	it	ge
 80081aa:	4653      	movge	r3, sl
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	4699      	mov	r9, r3
 80081b0:	dc36      	bgt.n	8008220 <_printf_float+0x360>
 80081b2:	f04f 0b00 	mov.w	fp, #0
 80081b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ba:	f104 021a 	add.w	r2, r4, #26
 80081be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081c0:	9306      	str	r3, [sp, #24]
 80081c2:	eba3 0309 	sub.w	r3, r3, r9
 80081c6:	455b      	cmp	r3, fp
 80081c8:	dc31      	bgt.n	800822e <_printf_float+0x36e>
 80081ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081cc:	459a      	cmp	sl, r3
 80081ce:	dc3a      	bgt.n	8008246 <_printf_float+0x386>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	07da      	lsls	r2, r3, #31
 80081d4:	d437      	bmi.n	8008246 <_printf_float+0x386>
 80081d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d8:	ebaa 0903 	sub.w	r9, sl, r3
 80081dc:	9b06      	ldr	r3, [sp, #24]
 80081de:	ebaa 0303 	sub.w	r3, sl, r3
 80081e2:	4599      	cmp	r9, r3
 80081e4:	bfa8      	it	ge
 80081e6:	4699      	movge	r9, r3
 80081e8:	f1b9 0f00 	cmp.w	r9, #0
 80081ec:	dc33      	bgt.n	8008256 <_printf_float+0x396>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081f6:	f104 0b1a 	add.w	fp, r4, #26
 80081fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008200:	eba3 0309 	sub.w	r3, r3, r9
 8008204:	4543      	cmp	r3, r8
 8008206:	f77f af79 	ble.w	80080fc <_printf_float+0x23c>
 800820a:	2301      	movs	r3, #1
 800820c:	465a      	mov	r2, fp
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	f43f aeae 	beq.w	8007f76 <_printf_float+0xb6>
 800821a:	f108 0801 	add.w	r8, r8, #1
 800821e:	e7ec      	b.n	80081fa <_printf_float+0x33a>
 8008220:	4642      	mov	r2, r8
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	d1c2      	bne.n	80081b2 <_printf_float+0x2f2>
 800822c:	e6a3      	b.n	8007f76 <_printf_float+0xb6>
 800822e:	2301      	movs	r3, #1
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	9206      	str	r2, [sp, #24]
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae9c 	beq.w	8007f76 <_printf_float+0xb6>
 800823e:	9a06      	ldr	r2, [sp, #24]
 8008240:	f10b 0b01 	add.w	fp, fp, #1
 8008244:	e7bb      	b.n	80081be <_printf_float+0x2fe>
 8008246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	d1c0      	bne.n	80081d6 <_printf_float+0x316>
 8008254:	e68f      	b.n	8007f76 <_printf_float+0xb6>
 8008256:	9a06      	ldr	r2, [sp, #24]
 8008258:	464b      	mov	r3, r9
 800825a:	4442      	add	r2, r8
 800825c:	4631      	mov	r1, r6
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	d1c3      	bne.n	80081ee <_printf_float+0x32e>
 8008266:	e686      	b.n	8007f76 <_printf_float+0xb6>
 8008268:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800826c:	f1ba 0f01 	cmp.w	sl, #1
 8008270:	dc01      	bgt.n	8008276 <_printf_float+0x3b6>
 8008272:	07db      	lsls	r3, r3, #31
 8008274:	d536      	bpl.n	80082e4 <_printf_float+0x424>
 8008276:	2301      	movs	r3, #1
 8008278:	4642      	mov	r2, r8
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f ae78 	beq.w	8007f76 <_printf_float+0xb6>
 8008286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800828a:	4631      	mov	r1, r6
 800828c:	4628      	mov	r0, r5
 800828e:	47b8      	blx	r7
 8008290:	3001      	adds	r0, #1
 8008292:	f43f ae70 	beq.w	8007f76 <_printf_float+0xb6>
 8008296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082a2:	f7f8 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a6:	b9c0      	cbnz	r0, 80082da <_printf_float+0x41a>
 80082a8:	4653      	mov	r3, sl
 80082aa:	f108 0201 	add.w	r2, r8, #1
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	d10c      	bne.n	80082d2 <_printf_float+0x412>
 80082b8:	e65d      	b.n	8007f76 <_printf_float+0xb6>
 80082ba:	2301      	movs	r3, #1
 80082bc:	465a      	mov	r2, fp
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	f43f ae56 	beq.w	8007f76 <_printf_float+0xb6>
 80082ca:	f108 0801 	add.w	r8, r8, #1
 80082ce:	45d0      	cmp	r8, sl
 80082d0:	dbf3      	blt.n	80082ba <_printf_float+0x3fa>
 80082d2:	464b      	mov	r3, r9
 80082d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80082d8:	e6df      	b.n	800809a <_printf_float+0x1da>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	f104 0b1a 	add.w	fp, r4, #26
 80082e2:	e7f4      	b.n	80082ce <_printf_float+0x40e>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4642      	mov	r2, r8
 80082e8:	e7e1      	b.n	80082ae <_printf_float+0x3ee>
 80082ea:	2301      	movs	r3, #1
 80082ec:	464a      	mov	r2, r9
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f ae3e 	beq.w	8007f76 <_printf_float+0xb6>
 80082fa:	f108 0801 	add.w	r8, r8, #1
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008302:	1a5b      	subs	r3, r3, r1
 8008304:	4543      	cmp	r3, r8
 8008306:	dcf0      	bgt.n	80082ea <_printf_float+0x42a>
 8008308:	e6fc      	b.n	8008104 <_printf_float+0x244>
 800830a:	f04f 0800 	mov.w	r8, #0
 800830e:	f104 0919 	add.w	r9, r4, #25
 8008312:	e7f4      	b.n	80082fe <_printf_float+0x43e>

08008314 <_printf_common>:
 8008314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	4616      	mov	r6, r2
 800831a:	4698      	mov	r8, r3
 800831c:	688a      	ldr	r2, [r1, #8]
 800831e:	690b      	ldr	r3, [r1, #16]
 8008320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008324:	4293      	cmp	r3, r2
 8008326:	bfb8      	it	lt
 8008328:	4613      	movlt	r3, r2
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008330:	4607      	mov	r7, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b10a      	cbz	r2, 800833a <_printf_common+0x26>
 8008336:	3301      	adds	r3, #1
 8008338:	6033      	str	r3, [r6, #0]
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	0699      	lsls	r1, r3, #26
 800833e:	bf42      	ittt	mi
 8008340:	6833      	ldrmi	r3, [r6, #0]
 8008342:	3302      	addmi	r3, #2
 8008344:	6033      	strmi	r3, [r6, #0]
 8008346:	6825      	ldr	r5, [r4, #0]
 8008348:	f015 0506 	ands.w	r5, r5, #6
 800834c:	d106      	bne.n	800835c <_printf_common+0x48>
 800834e:	f104 0a19 	add.w	sl, r4, #25
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	6832      	ldr	r2, [r6, #0]
 8008356:	1a9b      	subs	r3, r3, r2
 8008358:	42ab      	cmp	r3, r5
 800835a:	dc26      	bgt.n	80083aa <_printf_common+0x96>
 800835c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008360:	6822      	ldr	r2, [r4, #0]
 8008362:	3b00      	subs	r3, #0
 8008364:	bf18      	it	ne
 8008366:	2301      	movne	r3, #1
 8008368:	0692      	lsls	r2, r2, #26
 800836a:	d42b      	bmi.n	80083c4 <_printf_common+0xb0>
 800836c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008370:	4641      	mov	r1, r8
 8008372:	4638      	mov	r0, r7
 8008374:	47c8      	blx	r9
 8008376:	3001      	adds	r0, #1
 8008378:	d01e      	beq.n	80083b8 <_printf_common+0xa4>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	6922      	ldr	r2, [r4, #16]
 800837e:	f003 0306 	and.w	r3, r3, #6
 8008382:	2b04      	cmp	r3, #4
 8008384:	bf02      	ittt	eq
 8008386:	68e5      	ldreq	r5, [r4, #12]
 8008388:	6833      	ldreq	r3, [r6, #0]
 800838a:	1aed      	subeq	r5, r5, r3
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	bf0c      	ite	eq
 8008390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008394:	2500      	movne	r5, #0
 8008396:	4293      	cmp	r3, r2
 8008398:	bfc4      	itt	gt
 800839a:	1a9b      	subgt	r3, r3, r2
 800839c:	18ed      	addgt	r5, r5, r3
 800839e:	2600      	movs	r6, #0
 80083a0:	341a      	adds	r4, #26
 80083a2:	42b5      	cmp	r5, r6
 80083a4:	d11a      	bne.n	80083dc <_printf_common+0xc8>
 80083a6:	2000      	movs	r0, #0
 80083a8:	e008      	b.n	80083bc <_printf_common+0xa8>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4652      	mov	r2, sl
 80083ae:	4641      	mov	r1, r8
 80083b0:	4638      	mov	r0, r7
 80083b2:	47c8      	blx	r9
 80083b4:	3001      	adds	r0, #1
 80083b6:	d103      	bne.n	80083c0 <_printf_common+0xac>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c0:	3501      	adds	r5, #1
 80083c2:	e7c6      	b.n	8008352 <_printf_common+0x3e>
 80083c4:	18e1      	adds	r1, r4, r3
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	2030      	movs	r0, #48	@ 0x30
 80083ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ce:	4422      	add	r2, r4
 80083d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083d8:	3302      	adds	r3, #2
 80083da:	e7c7      	b.n	800836c <_printf_common+0x58>
 80083dc:	2301      	movs	r3, #1
 80083de:	4622      	mov	r2, r4
 80083e0:	4641      	mov	r1, r8
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c8      	blx	r9
 80083e6:	3001      	adds	r0, #1
 80083e8:	d0e6      	beq.n	80083b8 <_printf_common+0xa4>
 80083ea:	3601      	adds	r6, #1
 80083ec:	e7d9      	b.n	80083a2 <_printf_common+0x8e>
	...

080083f0 <_printf_i>:
 80083f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	7e0f      	ldrb	r7, [r1, #24]
 80083f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083f8:	2f78      	cmp	r7, #120	@ 0x78
 80083fa:	4691      	mov	r9, r2
 80083fc:	4680      	mov	r8, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	469a      	mov	sl, r3
 8008402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008406:	d807      	bhi.n	8008418 <_printf_i+0x28>
 8008408:	2f62      	cmp	r7, #98	@ 0x62
 800840a:	d80a      	bhi.n	8008422 <_printf_i+0x32>
 800840c:	2f00      	cmp	r7, #0
 800840e:	f000 80d1 	beq.w	80085b4 <_printf_i+0x1c4>
 8008412:	2f58      	cmp	r7, #88	@ 0x58
 8008414:	f000 80b8 	beq.w	8008588 <_printf_i+0x198>
 8008418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800841c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008420:	e03a      	b.n	8008498 <_printf_i+0xa8>
 8008422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008426:	2b15      	cmp	r3, #21
 8008428:	d8f6      	bhi.n	8008418 <_printf_i+0x28>
 800842a:	a101      	add	r1, pc, #4	@ (adr r1, 8008430 <_printf_i+0x40>)
 800842c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008430:	08008489 	.word	0x08008489
 8008434:	0800849d 	.word	0x0800849d
 8008438:	08008419 	.word	0x08008419
 800843c:	08008419 	.word	0x08008419
 8008440:	08008419 	.word	0x08008419
 8008444:	08008419 	.word	0x08008419
 8008448:	0800849d 	.word	0x0800849d
 800844c:	08008419 	.word	0x08008419
 8008450:	08008419 	.word	0x08008419
 8008454:	08008419 	.word	0x08008419
 8008458:	08008419 	.word	0x08008419
 800845c:	0800859b 	.word	0x0800859b
 8008460:	080084c7 	.word	0x080084c7
 8008464:	08008555 	.word	0x08008555
 8008468:	08008419 	.word	0x08008419
 800846c:	08008419 	.word	0x08008419
 8008470:	080085bd 	.word	0x080085bd
 8008474:	08008419 	.word	0x08008419
 8008478:	080084c7 	.word	0x080084c7
 800847c:	08008419 	.word	0x08008419
 8008480:	08008419 	.word	0x08008419
 8008484:	0800855d 	.word	0x0800855d
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6032      	str	r2, [r6, #0]
 8008490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008498:	2301      	movs	r3, #1
 800849a:	e09c      	b.n	80085d6 <_printf_i+0x1e6>
 800849c:	6833      	ldr	r3, [r6, #0]
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	1d19      	adds	r1, r3, #4
 80084a2:	6031      	str	r1, [r6, #0]
 80084a4:	0606      	lsls	r6, r0, #24
 80084a6:	d501      	bpl.n	80084ac <_printf_i+0xbc>
 80084a8:	681d      	ldr	r5, [r3, #0]
 80084aa:	e003      	b.n	80084b4 <_printf_i+0xc4>
 80084ac:	0645      	lsls	r5, r0, #25
 80084ae:	d5fb      	bpl.n	80084a8 <_printf_i+0xb8>
 80084b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	da03      	bge.n	80084c0 <_printf_i+0xd0>
 80084b8:	232d      	movs	r3, #45	@ 0x2d
 80084ba:	426d      	negs	r5, r5
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084c0:	4858      	ldr	r0, [pc, #352]	@ (8008624 <_printf_i+0x234>)
 80084c2:	230a      	movs	r3, #10
 80084c4:	e011      	b.n	80084ea <_printf_i+0xfa>
 80084c6:	6821      	ldr	r1, [r4, #0]
 80084c8:	6833      	ldr	r3, [r6, #0]
 80084ca:	0608      	lsls	r0, r1, #24
 80084cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80084d0:	d402      	bmi.n	80084d8 <_printf_i+0xe8>
 80084d2:	0649      	lsls	r1, r1, #25
 80084d4:	bf48      	it	mi
 80084d6:	b2ad      	uxthmi	r5, r5
 80084d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80084da:	4852      	ldr	r0, [pc, #328]	@ (8008624 <_printf_i+0x234>)
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	bf14      	ite	ne
 80084e0:	230a      	movne	r3, #10
 80084e2:	2308      	moveq	r3, #8
 80084e4:	2100      	movs	r1, #0
 80084e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ea:	6866      	ldr	r6, [r4, #4]
 80084ec:	60a6      	str	r6, [r4, #8]
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	db05      	blt.n	80084fe <_printf_i+0x10e>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	432e      	orrs	r6, r5
 80084f6:	f021 0104 	bic.w	r1, r1, #4
 80084fa:	6021      	str	r1, [r4, #0]
 80084fc:	d04b      	beq.n	8008596 <_printf_i+0x1a6>
 80084fe:	4616      	mov	r6, r2
 8008500:	fbb5 f1f3 	udiv	r1, r5, r3
 8008504:	fb03 5711 	mls	r7, r3, r1, r5
 8008508:	5dc7      	ldrb	r7, [r0, r7]
 800850a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800850e:	462f      	mov	r7, r5
 8008510:	42bb      	cmp	r3, r7
 8008512:	460d      	mov	r5, r1
 8008514:	d9f4      	bls.n	8008500 <_printf_i+0x110>
 8008516:	2b08      	cmp	r3, #8
 8008518:	d10b      	bne.n	8008532 <_printf_i+0x142>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	07df      	lsls	r7, r3, #31
 800851e:	d508      	bpl.n	8008532 <_printf_i+0x142>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	6861      	ldr	r1, [r4, #4]
 8008524:	4299      	cmp	r1, r3
 8008526:	bfde      	ittt	le
 8008528:	2330      	movle	r3, #48	@ 0x30
 800852a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800852e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008532:	1b92      	subs	r2, r2, r6
 8008534:	6122      	str	r2, [r4, #16]
 8008536:	f8cd a000 	str.w	sl, [sp]
 800853a:	464b      	mov	r3, r9
 800853c:	aa03      	add	r2, sp, #12
 800853e:	4621      	mov	r1, r4
 8008540:	4640      	mov	r0, r8
 8008542:	f7ff fee7 	bl	8008314 <_printf_common>
 8008546:	3001      	adds	r0, #1
 8008548:	d14a      	bne.n	80085e0 <_printf_i+0x1f0>
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	b004      	add	sp, #16
 8008550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	f043 0320 	orr.w	r3, r3, #32
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	4832      	ldr	r0, [pc, #200]	@ (8008628 <_printf_i+0x238>)
 800855e:	2778      	movs	r7, #120	@ 0x78
 8008560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	6831      	ldr	r1, [r6, #0]
 8008568:	061f      	lsls	r7, r3, #24
 800856a:	f851 5b04 	ldr.w	r5, [r1], #4
 800856e:	d402      	bmi.n	8008576 <_printf_i+0x186>
 8008570:	065f      	lsls	r7, r3, #25
 8008572:	bf48      	it	mi
 8008574:	b2ad      	uxthmi	r5, r5
 8008576:	6031      	str	r1, [r6, #0]
 8008578:	07d9      	lsls	r1, r3, #31
 800857a:	bf44      	itt	mi
 800857c:	f043 0320 	orrmi.w	r3, r3, #32
 8008580:	6023      	strmi	r3, [r4, #0]
 8008582:	b11d      	cbz	r5, 800858c <_printf_i+0x19c>
 8008584:	2310      	movs	r3, #16
 8008586:	e7ad      	b.n	80084e4 <_printf_i+0xf4>
 8008588:	4826      	ldr	r0, [pc, #152]	@ (8008624 <_printf_i+0x234>)
 800858a:	e7e9      	b.n	8008560 <_printf_i+0x170>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	f023 0320 	bic.w	r3, r3, #32
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	e7f6      	b.n	8008584 <_printf_i+0x194>
 8008596:	4616      	mov	r6, r2
 8008598:	e7bd      	b.n	8008516 <_printf_i+0x126>
 800859a:	6833      	ldr	r3, [r6, #0]
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	6961      	ldr	r1, [r4, #20]
 80085a0:	1d18      	adds	r0, r3, #4
 80085a2:	6030      	str	r0, [r6, #0]
 80085a4:	062e      	lsls	r6, r5, #24
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	d501      	bpl.n	80085ae <_printf_i+0x1be>
 80085aa:	6019      	str	r1, [r3, #0]
 80085ac:	e002      	b.n	80085b4 <_printf_i+0x1c4>
 80085ae:	0668      	lsls	r0, r5, #25
 80085b0:	d5fb      	bpl.n	80085aa <_printf_i+0x1ba>
 80085b2:	8019      	strh	r1, [r3, #0]
 80085b4:	2300      	movs	r3, #0
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	4616      	mov	r6, r2
 80085ba:	e7bc      	b.n	8008536 <_printf_i+0x146>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	1d1a      	adds	r2, r3, #4
 80085c0:	6032      	str	r2, [r6, #0]
 80085c2:	681e      	ldr	r6, [r3, #0]
 80085c4:	6862      	ldr	r2, [r4, #4]
 80085c6:	2100      	movs	r1, #0
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7f7 fe01 	bl	80001d0 <memchr>
 80085ce:	b108      	cbz	r0, 80085d4 <_printf_i+0x1e4>
 80085d0:	1b80      	subs	r0, r0, r6
 80085d2:	6060      	str	r0, [r4, #4]
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	2300      	movs	r3, #0
 80085da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085de:	e7aa      	b.n	8008536 <_printf_i+0x146>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	4632      	mov	r2, r6
 80085e4:	4649      	mov	r1, r9
 80085e6:	4640      	mov	r0, r8
 80085e8:	47d0      	blx	sl
 80085ea:	3001      	adds	r0, #1
 80085ec:	d0ad      	beq.n	800854a <_printf_i+0x15a>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	079b      	lsls	r3, r3, #30
 80085f2:	d413      	bmi.n	800861c <_printf_i+0x22c>
 80085f4:	68e0      	ldr	r0, [r4, #12]
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	4298      	cmp	r0, r3
 80085fa:	bfb8      	it	lt
 80085fc:	4618      	movlt	r0, r3
 80085fe:	e7a6      	b.n	800854e <_printf_i+0x15e>
 8008600:	2301      	movs	r3, #1
 8008602:	4632      	mov	r2, r6
 8008604:	4649      	mov	r1, r9
 8008606:	4640      	mov	r0, r8
 8008608:	47d0      	blx	sl
 800860a:	3001      	adds	r0, #1
 800860c:	d09d      	beq.n	800854a <_printf_i+0x15a>
 800860e:	3501      	adds	r5, #1
 8008610:	68e3      	ldr	r3, [r4, #12]
 8008612:	9903      	ldr	r1, [sp, #12]
 8008614:	1a5b      	subs	r3, r3, r1
 8008616:	42ab      	cmp	r3, r5
 8008618:	dcf2      	bgt.n	8008600 <_printf_i+0x210>
 800861a:	e7eb      	b.n	80085f4 <_printf_i+0x204>
 800861c:	2500      	movs	r5, #0
 800861e:	f104 0619 	add.w	r6, r4, #25
 8008622:	e7f5      	b.n	8008610 <_printf_i+0x220>
 8008624:	0800e825 	.word	0x0800e825
 8008628:	0800e836 	.word	0x0800e836

0800862c <std>:
 800862c:	2300      	movs	r3, #0
 800862e:	b510      	push	{r4, lr}
 8008630:	4604      	mov	r4, r0
 8008632:	e9c0 3300 	strd	r3, r3, [r0]
 8008636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800863a:	6083      	str	r3, [r0, #8]
 800863c:	8181      	strh	r1, [r0, #12]
 800863e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008640:	81c2      	strh	r2, [r0, #14]
 8008642:	6183      	str	r3, [r0, #24]
 8008644:	4619      	mov	r1, r3
 8008646:	2208      	movs	r2, #8
 8008648:	305c      	adds	r0, #92	@ 0x5c
 800864a:	f000 fa0b 	bl	8008a64 <memset>
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <std+0x58>)
 8008650:	6263      	str	r3, [r4, #36]	@ 0x24
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <std+0x5c>)
 8008654:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008656:	4b0d      	ldr	r3, [pc, #52]	@ (800868c <std+0x60>)
 8008658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <std+0x64>)
 800865c:	6323      	str	r3, [r4, #48]	@ 0x30
 800865e:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <std+0x68>)
 8008660:	6224      	str	r4, [r4, #32]
 8008662:	429c      	cmp	r4, r3
 8008664:	d006      	beq.n	8008674 <std+0x48>
 8008666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800866a:	4294      	cmp	r4, r2
 800866c:	d002      	beq.n	8008674 <std+0x48>
 800866e:	33d0      	adds	r3, #208	@ 0xd0
 8008670:	429c      	cmp	r4, r3
 8008672:	d105      	bne.n	8008680 <std+0x54>
 8008674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800867c:	f000 baf6 	b.w	8008c6c <__retarget_lock_init_recursive>
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	080088b5 	.word	0x080088b5
 8008688:	080088d7 	.word	0x080088d7
 800868c:	0800890f 	.word	0x0800890f
 8008690:	08008933 	.word	0x08008933
 8008694:	20000a08 	.word	0x20000a08

08008698 <stdio_exit_handler>:
 8008698:	4a02      	ldr	r2, [pc, #8]	@ (80086a4 <stdio_exit_handler+0xc>)
 800869a:	4903      	ldr	r1, [pc, #12]	@ (80086a8 <stdio_exit_handler+0x10>)
 800869c:	4803      	ldr	r0, [pc, #12]	@ (80086ac <stdio_exit_handler+0x14>)
 800869e:	f000 b869 	b.w	8008774 <_fwalk_sglue>
 80086a2:	bf00      	nop
 80086a4:	20000020 	.word	0x20000020
 80086a8:	0800aa95 	.word	0x0800aa95
 80086ac:	20000030 	.word	0x20000030

080086b0 <cleanup_stdio>:
 80086b0:	6841      	ldr	r1, [r0, #4]
 80086b2:	4b0c      	ldr	r3, [pc, #48]	@ (80086e4 <cleanup_stdio+0x34>)
 80086b4:	4299      	cmp	r1, r3
 80086b6:	b510      	push	{r4, lr}
 80086b8:	4604      	mov	r4, r0
 80086ba:	d001      	beq.n	80086c0 <cleanup_stdio+0x10>
 80086bc:	f002 f9ea 	bl	800aa94 <_fflush_r>
 80086c0:	68a1      	ldr	r1, [r4, #8]
 80086c2:	4b09      	ldr	r3, [pc, #36]	@ (80086e8 <cleanup_stdio+0x38>)
 80086c4:	4299      	cmp	r1, r3
 80086c6:	d002      	beq.n	80086ce <cleanup_stdio+0x1e>
 80086c8:	4620      	mov	r0, r4
 80086ca:	f002 f9e3 	bl	800aa94 <_fflush_r>
 80086ce:	68e1      	ldr	r1, [r4, #12]
 80086d0:	4b06      	ldr	r3, [pc, #24]	@ (80086ec <cleanup_stdio+0x3c>)
 80086d2:	4299      	cmp	r1, r3
 80086d4:	d004      	beq.n	80086e0 <cleanup_stdio+0x30>
 80086d6:	4620      	mov	r0, r4
 80086d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086dc:	f002 b9da 	b.w	800aa94 <_fflush_r>
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	20000a08 	.word	0x20000a08
 80086e8:	20000a70 	.word	0x20000a70
 80086ec:	20000ad8 	.word	0x20000ad8

080086f0 <global_stdio_init.part.0>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <global_stdio_init.part.0+0x30>)
 80086f4:	4c0b      	ldr	r4, [pc, #44]	@ (8008724 <global_stdio_init.part.0+0x34>)
 80086f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008728 <global_stdio_init.part.0+0x38>)
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	4620      	mov	r0, r4
 80086fc:	2200      	movs	r2, #0
 80086fe:	2104      	movs	r1, #4
 8008700:	f7ff ff94 	bl	800862c <std>
 8008704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008708:	2201      	movs	r2, #1
 800870a:	2109      	movs	r1, #9
 800870c:	f7ff ff8e 	bl	800862c <std>
 8008710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008714:	2202      	movs	r2, #2
 8008716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871a:	2112      	movs	r1, #18
 800871c:	f7ff bf86 	b.w	800862c <std>
 8008720:	20000b40 	.word	0x20000b40
 8008724:	20000a08 	.word	0x20000a08
 8008728:	08008699 	.word	0x08008699

0800872c <__sfp_lock_acquire>:
 800872c:	4801      	ldr	r0, [pc, #4]	@ (8008734 <__sfp_lock_acquire+0x8>)
 800872e:	f000 ba9e 	b.w	8008c6e <__retarget_lock_acquire_recursive>
 8008732:	bf00      	nop
 8008734:	20000b49 	.word	0x20000b49

08008738 <__sfp_lock_release>:
 8008738:	4801      	ldr	r0, [pc, #4]	@ (8008740 <__sfp_lock_release+0x8>)
 800873a:	f000 ba99 	b.w	8008c70 <__retarget_lock_release_recursive>
 800873e:	bf00      	nop
 8008740:	20000b49 	.word	0x20000b49

08008744 <__sinit>:
 8008744:	b510      	push	{r4, lr}
 8008746:	4604      	mov	r4, r0
 8008748:	f7ff fff0 	bl	800872c <__sfp_lock_acquire>
 800874c:	6a23      	ldr	r3, [r4, #32]
 800874e:	b11b      	cbz	r3, 8008758 <__sinit+0x14>
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008754:	f7ff bff0 	b.w	8008738 <__sfp_lock_release>
 8008758:	4b04      	ldr	r3, [pc, #16]	@ (800876c <__sinit+0x28>)
 800875a:	6223      	str	r3, [r4, #32]
 800875c:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <__sinit+0x2c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f5      	bne.n	8008750 <__sinit+0xc>
 8008764:	f7ff ffc4 	bl	80086f0 <global_stdio_init.part.0>
 8008768:	e7f2      	b.n	8008750 <__sinit+0xc>
 800876a:	bf00      	nop
 800876c:	080086b1 	.word	0x080086b1
 8008770:	20000b40 	.word	0x20000b40

08008774 <_fwalk_sglue>:
 8008774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008778:	4607      	mov	r7, r0
 800877a:	4688      	mov	r8, r1
 800877c:	4614      	mov	r4, r2
 800877e:	2600      	movs	r6, #0
 8008780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008784:	f1b9 0901 	subs.w	r9, r9, #1
 8008788:	d505      	bpl.n	8008796 <_fwalk_sglue+0x22>
 800878a:	6824      	ldr	r4, [r4, #0]
 800878c:	2c00      	cmp	r4, #0
 800878e:	d1f7      	bne.n	8008780 <_fwalk_sglue+0xc>
 8008790:	4630      	mov	r0, r6
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d907      	bls.n	80087ac <_fwalk_sglue+0x38>
 800879c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087a0:	3301      	adds	r3, #1
 80087a2:	d003      	beq.n	80087ac <_fwalk_sglue+0x38>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	47c0      	blx	r8
 80087aa:	4306      	orrs	r6, r0
 80087ac:	3568      	adds	r5, #104	@ 0x68
 80087ae:	e7e9      	b.n	8008784 <_fwalk_sglue+0x10>

080087b0 <iprintf>:
 80087b0:	b40f      	push	{r0, r1, r2, r3}
 80087b2:	b507      	push	{r0, r1, r2, lr}
 80087b4:	4906      	ldr	r1, [pc, #24]	@ (80087d0 <iprintf+0x20>)
 80087b6:	ab04      	add	r3, sp, #16
 80087b8:	6808      	ldr	r0, [r1, #0]
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	6881      	ldr	r1, [r0, #8]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	f001 fccb 	bl	800a15c <_vfiprintf_r>
 80087c6:	b003      	add	sp, #12
 80087c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087cc:	b004      	add	sp, #16
 80087ce:	4770      	bx	lr
 80087d0:	2000002c 	.word	0x2000002c

080087d4 <_puts_r>:
 80087d4:	6a03      	ldr	r3, [r0, #32]
 80087d6:	b570      	push	{r4, r5, r6, lr}
 80087d8:	6884      	ldr	r4, [r0, #8]
 80087da:	4605      	mov	r5, r0
 80087dc:	460e      	mov	r6, r1
 80087de:	b90b      	cbnz	r3, 80087e4 <_puts_r+0x10>
 80087e0:	f7ff ffb0 	bl	8008744 <__sinit>
 80087e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e6:	07db      	lsls	r3, r3, #31
 80087e8:	d405      	bmi.n	80087f6 <_puts_r+0x22>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	0598      	lsls	r0, r3, #22
 80087ee:	d402      	bmi.n	80087f6 <_puts_r+0x22>
 80087f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f2:	f000 fa3c 	bl	8008c6e <__retarget_lock_acquire_recursive>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	0719      	lsls	r1, r3, #28
 80087fa:	d502      	bpl.n	8008802 <_puts_r+0x2e>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d135      	bne.n	800886e <_puts_r+0x9a>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 f8d7 	bl	80089b8 <__swsetup_r>
 800880a:	b380      	cbz	r0, 800886e <_puts_r+0x9a>
 800880c:	f04f 35ff 	mov.w	r5, #4294967295
 8008810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008812:	07da      	lsls	r2, r3, #31
 8008814:	d405      	bmi.n	8008822 <_puts_r+0x4e>
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	059b      	lsls	r3, r3, #22
 800881a:	d402      	bmi.n	8008822 <_puts_r+0x4e>
 800881c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881e:	f000 fa27 	bl	8008c70 <__retarget_lock_release_recursive>
 8008822:	4628      	mov	r0, r5
 8008824:	bd70      	pop	{r4, r5, r6, pc}
 8008826:	2b00      	cmp	r3, #0
 8008828:	da04      	bge.n	8008834 <_puts_r+0x60>
 800882a:	69a2      	ldr	r2, [r4, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	dc17      	bgt.n	8008860 <_puts_r+0x8c>
 8008830:	290a      	cmp	r1, #10
 8008832:	d015      	beq.n	8008860 <_puts_r+0x8c>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	7019      	strb	r1, [r3, #0]
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008842:	3b01      	subs	r3, #1
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	2900      	cmp	r1, #0
 8008848:	d1ed      	bne.n	8008826 <_puts_r+0x52>
 800884a:	2b00      	cmp	r3, #0
 800884c:	da11      	bge.n	8008872 <_puts_r+0x9e>
 800884e:	4622      	mov	r2, r4
 8008850:	210a      	movs	r1, #10
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f871 	bl	800893a <__swbuf_r>
 8008858:	3001      	adds	r0, #1
 800885a:	d0d7      	beq.n	800880c <_puts_r+0x38>
 800885c:	250a      	movs	r5, #10
 800885e:	e7d7      	b.n	8008810 <_puts_r+0x3c>
 8008860:	4622      	mov	r2, r4
 8008862:	4628      	mov	r0, r5
 8008864:	f000 f869 	bl	800893a <__swbuf_r>
 8008868:	3001      	adds	r0, #1
 800886a:	d1e7      	bne.n	800883c <_puts_r+0x68>
 800886c:	e7ce      	b.n	800880c <_puts_r+0x38>
 800886e:	3e01      	subs	r6, #1
 8008870:	e7e4      	b.n	800883c <_puts_r+0x68>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	220a      	movs	r2, #10
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e7ee      	b.n	800885c <_puts_r+0x88>
	...

08008880 <puts>:
 8008880:	4b02      	ldr	r3, [pc, #8]	@ (800888c <puts+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f7ff bfa5 	b.w	80087d4 <_puts_r>
 800888a:	bf00      	nop
 800888c:	2000002c 	.word	0x2000002c

08008890 <iscanf>:
 8008890:	b40f      	push	{r0, r1, r2, r3}
 8008892:	b507      	push	{r0, r1, r2, lr}
 8008894:	4906      	ldr	r1, [pc, #24]	@ (80088b0 <iscanf+0x20>)
 8008896:	ab04      	add	r3, sp, #16
 8008898:	6808      	ldr	r0, [r1, #0]
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	6841      	ldr	r1, [r0, #4]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f001 ff11 	bl	800a6c8 <_vfiscanf_r>
 80088a6:	b003      	add	sp, #12
 80088a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ac:	b004      	add	sp, #16
 80088ae:	4770      	bx	lr
 80088b0:	2000002c 	.word	0x2000002c

080088b4 <__sread>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	f000 f978 	bl	8008bb0 <_read_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	bfab      	itete	ge
 80088c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088c6:	89a3      	ldrhlt	r3, [r4, #12]
 80088c8:	181b      	addge	r3, r3, r0
 80088ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088ce:	bfac      	ite	ge
 80088d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088d2:	81a3      	strhlt	r3, [r4, #12]
 80088d4:	bd10      	pop	{r4, pc}

080088d6 <__swrite>:
 80088d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	461f      	mov	r7, r3
 80088dc:	898b      	ldrh	r3, [r1, #12]
 80088de:	05db      	lsls	r3, r3, #23
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4616      	mov	r6, r2
 80088e6:	d505      	bpl.n	80088f4 <__swrite+0x1e>
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	2302      	movs	r3, #2
 80088ee:	2200      	movs	r2, #0
 80088f0:	f000 f94c 	bl	8008b8c <_lseek_r>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	4628      	mov	r0, r5
 8008906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	f000 b973 	b.w	8008bf4 <_write_r>

0800890e <__sseek>:
 800890e:	b510      	push	{r4, lr}
 8008910:	460c      	mov	r4, r1
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 f939 	bl	8008b8c <_lseek_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	bf15      	itete	ne
 8008920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800892a:	81a3      	strheq	r3, [r4, #12]
 800892c:	bf18      	it	ne
 800892e:	81a3      	strhne	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__sclose>:
 8008932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008936:	f000 b919 	b.w	8008b6c <_close_r>

0800893a <__swbuf_r>:
 800893a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893c:	460e      	mov	r6, r1
 800893e:	4614      	mov	r4, r2
 8008940:	4605      	mov	r5, r0
 8008942:	b118      	cbz	r0, 800894c <__swbuf_r+0x12>
 8008944:	6a03      	ldr	r3, [r0, #32]
 8008946:	b90b      	cbnz	r3, 800894c <__swbuf_r+0x12>
 8008948:	f7ff fefc 	bl	8008744 <__sinit>
 800894c:	69a3      	ldr	r3, [r4, #24]
 800894e:	60a3      	str	r3, [r4, #8]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	071a      	lsls	r2, r3, #28
 8008954:	d501      	bpl.n	800895a <__swbuf_r+0x20>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	b943      	cbnz	r3, 800896c <__swbuf_r+0x32>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f000 f82b 	bl	80089b8 <__swsetup_r>
 8008962:	b118      	cbz	r0, 800896c <__swbuf_r+0x32>
 8008964:	f04f 37ff 	mov.w	r7, #4294967295
 8008968:	4638      	mov	r0, r7
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	1a98      	subs	r0, r3, r2
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	b2f6      	uxtb	r6, r6
 8008976:	4283      	cmp	r3, r0
 8008978:	4637      	mov	r7, r6
 800897a:	dc05      	bgt.n	8008988 <__swbuf_r+0x4e>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f002 f888 	bl	800aa94 <_fflush_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	d1ed      	bne.n	8008964 <__swbuf_r+0x2a>
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	701e      	strb	r6, [r3, #0]
 8008996:	6962      	ldr	r2, [r4, #20]
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	429a      	cmp	r2, r3
 800899c:	d004      	beq.n	80089a8 <__swbuf_r+0x6e>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	07db      	lsls	r3, r3, #31
 80089a2:	d5e1      	bpl.n	8008968 <__swbuf_r+0x2e>
 80089a4:	2e0a      	cmp	r6, #10
 80089a6:	d1df      	bne.n	8008968 <__swbuf_r+0x2e>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f002 f872 	bl	800aa94 <_fflush_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0d9      	beq.n	8008968 <__swbuf_r+0x2e>
 80089b4:	e7d6      	b.n	8008964 <__swbuf_r+0x2a>
	...

080089b8 <__swsetup_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4b29      	ldr	r3, [pc, #164]	@ (8008a60 <__swsetup_r+0xa8>)
 80089bc:	4605      	mov	r5, r0
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	460c      	mov	r4, r1
 80089c2:	b118      	cbz	r0, 80089cc <__swsetup_r+0x14>
 80089c4:	6a03      	ldr	r3, [r0, #32]
 80089c6:	b90b      	cbnz	r3, 80089cc <__swsetup_r+0x14>
 80089c8:	f7ff febc 	bl	8008744 <__sinit>
 80089cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d0:	0719      	lsls	r1, r3, #28
 80089d2:	d422      	bmi.n	8008a1a <__swsetup_r+0x62>
 80089d4:	06da      	lsls	r2, r3, #27
 80089d6:	d407      	bmi.n	80089e8 <__swsetup_r+0x30>
 80089d8:	2209      	movs	r2, #9
 80089da:	602a      	str	r2, [r5, #0]
 80089dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	e033      	b.n	8008a50 <__swsetup_r+0x98>
 80089e8:	0758      	lsls	r0, r3, #29
 80089ea:	d512      	bpl.n	8008a12 <__swsetup_r+0x5a>
 80089ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ee:	b141      	cbz	r1, 8008a02 <__swsetup_r+0x4a>
 80089f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f4:	4299      	cmp	r1, r3
 80089f6:	d002      	beq.n	80089fe <__swsetup_r+0x46>
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 ffc1 	bl	8009980 <_free_r>
 80089fe:	2300      	movs	r3, #0
 8008a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6063      	str	r3, [r4, #4]
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f043 0308 	orr.w	r3, r3, #8
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	b94b      	cbnz	r3, 8008a32 <__swsetup_r+0x7a>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a28:	d003      	beq.n	8008a32 <__swsetup_r+0x7a>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f002 f891 	bl	800ab54 <__smakebuf_r>
 8008a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a36:	f013 0201 	ands.w	r2, r3, #1
 8008a3a:	d00a      	beq.n	8008a52 <__swsetup_r+0x9a>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	60a2      	str	r2, [r4, #8]
 8008a40:	6962      	ldr	r2, [r4, #20]
 8008a42:	4252      	negs	r2, r2
 8008a44:	61a2      	str	r2, [r4, #24]
 8008a46:	6922      	ldr	r2, [r4, #16]
 8008a48:	b942      	cbnz	r2, 8008a5c <__swsetup_r+0xa4>
 8008a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a4e:	d1c5      	bne.n	80089dc <__swsetup_r+0x24>
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	0799      	lsls	r1, r3, #30
 8008a54:	bf58      	it	pl
 8008a56:	6962      	ldrpl	r2, [r4, #20]
 8008a58:	60a2      	str	r2, [r4, #8]
 8008a5a:	e7f4      	b.n	8008a46 <__swsetup_r+0x8e>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e7f7      	b.n	8008a50 <__swsetup_r+0x98>
 8008a60:	2000002c 	.word	0x2000002c

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <strdup>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	@ (8008a80 <strdup+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f000 b803 	b.w	8008a84 <_strdup_r>
 8008a7e:	bf00      	nop
 8008a80:	2000002c 	.word	0x2000002c

08008a84 <_strdup_r>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	f7f7 fbf0 	bl	8000270 <strlen>
 8008a90:	1c46      	adds	r6, r0, #1
 8008a92:	4631      	mov	r1, r6
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7ff f861 	bl	8007b5c <_malloc_r>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	b118      	cbz	r0, 8008aa6 <_strdup_r+0x22>
 8008a9e:	4632      	mov	r2, r6
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f000 f8e6 	bl	8008c72 <memcpy>
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008aac <strtok>:
 8008aac:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <strtok+0x5c>)
 8008aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab2:	681f      	ldr	r7, [r3, #0]
 8008ab4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	460e      	mov	r6, r1
 8008aba:	b9ec      	cbnz	r4, 8008af8 <strtok+0x4c>
 8008abc:	2050      	movs	r0, #80	@ 0x50
 8008abe:	f7ff f81b 	bl	8007af8 <malloc>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ac6:	b920      	cbnz	r0, 8008ad2 <strtok+0x26>
 8008ac8:	4b10      	ldr	r3, [pc, #64]	@ (8008b0c <strtok+0x60>)
 8008aca:	4811      	ldr	r0, [pc, #68]	@ (8008b10 <strtok+0x64>)
 8008acc:	215b      	movs	r1, #91	@ 0x5b
 8008ace:	f000 f8df 	bl	8008c90 <__assert_func>
 8008ad2:	e9c0 4400 	strd	r4, r4, [r0]
 8008ad6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ada:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ade:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008ae2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ae6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008aea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008aee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008af2:	6184      	str	r4, [r0, #24]
 8008af4:	7704      	strb	r4, [r0, #28]
 8008af6:	6244      	str	r4, [r0, #36]	@ 0x24
 8008af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	2301      	movs	r3, #1
 8008b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	f000 b806 	b.w	8008b14 <__strtok_r>
 8008b08:	2000002c 	.word	0x2000002c
 8008b0c:	0800e847 	.word	0x0800e847
 8008b10:	0800e85e 	.word	0x0800e85e

08008b14 <__strtok_r>:
 8008b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b16:	4604      	mov	r4, r0
 8008b18:	b908      	cbnz	r0, 8008b1e <__strtok_r+0xa>
 8008b1a:	6814      	ldr	r4, [r2, #0]
 8008b1c:	b144      	cbz	r4, 8008b30 <__strtok_r+0x1c>
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b24:	460f      	mov	r7, r1
 8008b26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b2a:	b91e      	cbnz	r6, 8008b34 <__strtok_r+0x20>
 8008b2c:	b965      	cbnz	r5, 8008b48 <__strtok_r+0x34>
 8008b2e:	6015      	str	r5, [r2, #0]
 8008b30:	2000      	movs	r0, #0
 8008b32:	e005      	b.n	8008b40 <__strtok_r+0x2c>
 8008b34:	42b5      	cmp	r5, r6
 8008b36:	d1f6      	bne.n	8008b26 <__strtok_r+0x12>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f0      	bne.n	8008b1e <__strtok_r+0xa>
 8008b3c:	6014      	str	r4, [r2, #0]
 8008b3e:	7003      	strb	r3, [r0, #0]
 8008b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b42:	461c      	mov	r4, r3
 8008b44:	e00c      	b.n	8008b60 <__strtok_r+0x4c>
 8008b46:	b91d      	cbnz	r5, 8008b50 <__strtok_r+0x3c>
 8008b48:	4627      	mov	r7, r4
 8008b4a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b4e:	460e      	mov	r6, r1
 8008b50:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	d1f6      	bne.n	8008b46 <__strtok_r+0x32>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0f2      	beq.n	8008b42 <__strtok_r+0x2e>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	703b      	strb	r3, [r7, #0]
 8008b60:	6014      	str	r4, [r2, #0]
 8008b62:	e7ed      	b.n	8008b40 <__strtok_r+0x2c>

08008b64 <_localeconv_r>:
 8008b64:	4800      	ldr	r0, [pc, #0]	@ (8008b68 <_localeconv_r+0x4>)
 8008b66:	4770      	bx	lr
 8008b68:	2000016c 	.word	0x2000016c

08008b6c <_close_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d06      	ldr	r5, [pc, #24]	@ (8008b88 <_close_r+0x1c>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	f7f9 fba7 	bl	80022ca <_close>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_close_r+0x1a>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_close_r+0x1a>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20000b44 	.word	0x20000b44

08008b8c <_lseek_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	@ (8008bac <_lseek_r+0x20>)
 8008b90:	4604      	mov	r4, r0
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f7f9 fbbc 	bl	8002318 <_lseek>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_lseek_r+0x1e>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_lseek_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000b44 	.word	0x20000b44

08008bb0 <_read_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	@ (8008bd0 <_read_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f9 fcb8 	bl	8002534 <_read>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_read_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_read_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000b44 	.word	0x20000b44

08008bd4 <_sbrk_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d06      	ldr	r5, [pc, #24]	@ (8008bf0 <_sbrk_r+0x1c>)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	4608      	mov	r0, r1
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f7f9 fba8 	bl	8002334 <_sbrk>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_sbrk_r+0x1a>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_sbrk_r+0x1a>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	20000b44 	.word	0x20000b44

08008bf4 <_write_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	@ (8008c14 <_write_r+0x20>)
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	602a      	str	r2, [r5, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f7f9 fc04 	bl	8002410 <_write>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_write_r+0x1e>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_write_r+0x1e>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000b44 	.word	0x20000b44

08008c18 <__errno>:
 8008c18:	4b01      	ldr	r3, [pc, #4]	@ (8008c20 <__errno+0x8>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	2000002c 	.word	0x2000002c

08008c24 <__libc_init_array>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4d0d      	ldr	r5, [pc, #52]	@ (8008c5c <__libc_init_array+0x38>)
 8008c28:	4c0d      	ldr	r4, [pc, #52]	@ (8008c60 <__libc_init_array+0x3c>)
 8008c2a:	1b64      	subs	r4, r4, r5
 8008c2c:	10a4      	asrs	r4, r4, #2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	42a6      	cmp	r6, r4
 8008c32:	d109      	bne.n	8008c48 <__libc_init_array+0x24>
 8008c34:	4d0b      	ldr	r5, [pc, #44]	@ (8008c64 <__libc_init_array+0x40>)
 8008c36:	4c0c      	ldr	r4, [pc, #48]	@ (8008c68 <__libc_init_array+0x44>)
 8008c38:	f002 fa84 	bl	800b144 <_init>
 8008c3c:	1b64      	subs	r4, r4, r5
 8008c3e:	10a4      	asrs	r4, r4, #2
 8008c40:	2600      	movs	r6, #0
 8008c42:	42a6      	cmp	r6, r4
 8008c44:	d105      	bne.n	8008c52 <__libc_init_array+0x2e>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4c:	4798      	blx	r3
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7ee      	b.n	8008c30 <__libc_init_array+0xc>
 8008c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c56:	4798      	blx	r3
 8008c58:	3601      	adds	r6, #1
 8008c5a:	e7f2      	b.n	8008c42 <__libc_init_array+0x1e>
 8008c5c:	0800eb00 	.word	0x0800eb00
 8008c60:	0800eb00 	.word	0x0800eb00
 8008c64:	0800eb00 	.word	0x0800eb00
 8008c68:	0800eb04 	.word	0x0800eb04

08008c6c <__retarget_lock_init_recursive>:
 8008c6c:	4770      	bx	lr

08008c6e <__retarget_lock_acquire_recursive>:
 8008c6e:	4770      	bx	lr

08008c70 <__retarget_lock_release_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <memcpy>:
 8008c72:	440a      	add	r2, r1
 8008c74:	4291      	cmp	r1, r2
 8008c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7a:	d100      	bne.n	8008c7e <memcpy+0xc>
 8008c7c:	4770      	bx	lr
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c88:	4291      	cmp	r1, r2
 8008c8a:	d1f9      	bne.n	8008c80 <memcpy+0xe>
 8008c8c:	bd10      	pop	{r4, pc}
	...

08008c90 <__assert_func>:
 8008c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c92:	4614      	mov	r4, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <__assert_func+0x2c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	68d8      	ldr	r0, [r3, #12]
 8008c9e:	b14c      	cbz	r4, 8008cb4 <__assert_func+0x24>
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <__assert_func+0x30>)
 8008ca2:	9100      	str	r1, [sp, #0]
 8008ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ca8:	4906      	ldr	r1, [pc, #24]	@ (8008cc4 <__assert_func+0x34>)
 8008caa:	462b      	mov	r3, r5
 8008cac:	f001 ff1a 	bl	800aae4 <fiprintf>
 8008cb0:	f002 f922 	bl	800aef8 <abort>
 8008cb4:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <__assert_func+0x38>)
 8008cb6:	461c      	mov	r4, r3
 8008cb8:	e7f3      	b.n	8008ca2 <__assert_func+0x12>
 8008cba:	bf00      	nop
 8008cbc:	2000002c 	.word	0x2000002c
 8008cc0:	0800e8b8 	.word	0x0800e8b8
 8008cc4:	0800e8c5 	.word	0x0800e8c5
 8008cc8:	0800e8f3 	.word	0x0800e8f3

08008ccc <quorem>:
 8008ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	6903      	ldr	r3, [r0, #16]
 8008cd2:	690c      	ldr	r4, [r1, #16]
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	db7e      	blt.n	8008dd8 <quorem+0x10c>
 8008cda:	3c01      	subs	r4, #1
 8008cdc:	f101 0814 	add.w	r8, r1, #20
 8008ce0:	00a3      	lsls	r3, r4, #2
 8008ce2:	f100 0514 	add.w	r5, r0, #20
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cfe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d02:	d32e      	bcc.n	8008d62 <quorem+0x96>
 8008d04:	f04f 0a00 	mov.w	sl, #0
 8008d08:	46c4      	mov	ip, r8
 8008d0a:	46ae      	mov	lr, r5
 8008d0c:	46d3      	mov	fp, sl
 8008d0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d12:	b298      	uxth	r0, r3
 8008d14:	fb06 a000 	mla	r0, r6, r0, sl
 8008d18:	0c02      	lsrs	r2, r0, #16
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	fb06 2303 	mla	r3, r6, r3, r2
 8008d20:	f8de 2000 	ldr.w	r2, [lr]
 8008d24:	b280      	uxth	r0, r0
 8008d26:	b292      	uxth	r2, r2
 8008d28:	1a12      	subs	r2, r2, r0
 8008d2a:	445a      	add	r2, fp
 8008d2c:	f8de 0000 	ldr.w	r0, [lr]
 8008d30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d3e:	b292      	uxth	r2, r2
 8008d40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d44:	45e1      	cmp	r9, ip
 8008d46:	f84e 2b04 	str.w	r2, [lr], #4
 8008d4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d4e:	d2de      	bcs.n	8008d0e <quorem+0x42>
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	58eb      	ldr	r3, [r5, r3]
 8008d54:	b92b      	cbnz	r3, 8008d62 <quorem+0x96>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	429d      	cmp	r5, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	d32f      	bcc.n	8008dc0 <quorem+0xf4>
 8008d60:	613c      	str	r4, [r7, #16]
 8008d62:	4638      	mov	r0, r7
 8008d64:	f001 f8c8 	bl	8009ef8 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	db25      	blt.n	8008db8 <quorem+0xec>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d74:	f8d1 c000 	ldr.w	ip, [r1]
 8008d78:	fa1f fe82 	uxth.w	lr, r2
 8008d7c:	fa1f f38c 	uxth.w	r3, ip
 8008d80:	eba3 030e 	sub.w	r3, r3, lr
 8008d84:	4403      	add	r3, r0
 8008d86:	0c12      	lsrs	r2, r2, #16
 8008d88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d96:	45c1      	cmp	r9, r8
 8008d98:	f841 3b04 	str.w	r3, [r1], #4
 8008d9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008da0:	d2e6      	bcs.n	8008d70 <quorem+0xa4>
 8008da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008daa:	b922      	cbnz	r2, 8008db6 <quorem+0xea>
 8008dac:	3b04      	subs	r3, #4
 8008dae:	429d      	cmp	r5, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	d30b      	bcc.n	8008dcc <quorem+0x100>
 8008db4:	613c      	str	r4, [r7, #16]
 8008db6:	3601      	adds	r6, #1
 8008db8:	4630      	mov	r0, r6
 8008dba:	b003      	add	sp, #12
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	6812      	ldr	r2, [r2, #0]
 8008dc2:	3b04      	subs	r3, #4
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	d1cb      	bne.n	8008d60 <quorem+0x94>
 8008dc8:	3c01      	subs	r4, #1
 8008dca:	e7c6      	b.n	8008d5a <quorem+0x8e>
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	3b04      	subs	r3, #4
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	d1ef      	bne.n	8008db4 <quorem+0xe8>
 8008dd4:	3c01      	subs	r4, #1
 8008dd6:	e7ea      	b.n	8008dae <quorem+0xe2>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7ee      	b.n	8008dba <quorem+0xee>
 8008ddc:	0000      	movs	r0, r0
	...

08008de0 <_dtoa_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	69c7      	ldr	r7, [r0, #28]
 8008de6:	b097      	sub	sp, #92	@ 0x5c
 8008de8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008dec:	ec55 4b10 	vmov	r4, r5, d0
 8008df0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008df2:	9107      	str	r1, [sp, #28]
 8008df4:	4681      	mov	r9, r0
 8008df6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008dfa:	b97f      	cbnz	r7, 8008e1c <_dtoa_r+0x3c>
 8008dfc:	2010      	movs	r0, #16
 8008dfe:	f7fe fe7b 	bl	8007af8 <malloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	f8c9 001c 	str.w	r0, [r9, #28]
 8008e08:	b920      	cbnz	r0, 8008e14 <_dtoa_r+0x34>
 8008e0a:	4ba9      	ldr	r3, [pc, #676]	@ (80090b0 <_dtoa_r+0x2d0>)
 8008e0c:	21ef      	movs	r1, #239	@ 0xef
 8008e0e:	48a9      	ldr	r0, [pc, #676]	@ (80090b4 <_dtoa_r+0x2d4>)
 8008e10:	f7ff ff3e 	bl	8008c90 <__assert_func>
 8008e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e18:	6007      	str	r7, [r0, #0]
 8008e1a:	60c7      	str	r7, [r0, #12]
 8008e1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e20:	6819      	ldr	r1, [r3, #0]
 8008e22:	b159      	cbz	r1, 8008e3c <_dtoa_r+0x5c>
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	604a      	str	r2, [r1, #4]
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4093      	lsls	r3, r2
 8008e2c:	608b      	str	r3, [r1, #8]
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f000 fe30 	bl	8009a94 <_Bfree>
 8008e34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	1e2b      	subs	r3, r5, #0
 8008e3e:	bfb9      	ittee	lt
 8008e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e44:	9305      	strlt	r3, [sp, #20]
 8008e46:	2300      	movge	r3, #0
 8008e48:	6033      	strge	r3, [r6, #0]
 8008e4a:	9f05      	ldr	r7, [sp, #20]
 8008e4c:	4b9a      	ldr	r3, [pc, #616]	@ (80090b8 <_dtoa_r+0x2d8>)
 8008e4e:	bfbc      	itt	lt
 8008e50:	2201      	movlt	r2, #1
 8008e52:	6032      	strlt	r2, [r6, #0]
 8008e54:	43bb      	bics	r3, r7
 8008e56:	d112      	bne.n	8008e7e <_dtoa_r+0x9e>
 8008e58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e64:	4323      	orrs	r3, r4
 8008e66:	f000 855a 	beq.w	800991e <_dtoa_r+0xb3e>
 8008e6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80090cc <_dtoa_r+0x2ec>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 855c 	beq.w	800992e <_dtoa_r+0xb4e>
 8008e76:	f10a 0303 	add.w	r3, sl, #3
 8008e7a:	f000 bd56 	b.w	800992a <_dtoa_r+0xb4a>
 8008e7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e82:	2200      	movs	r2, #0
 8008e84:	ec51 0b17 	vmov	r0, r1, d7
 8008e88:	2300      	movs	r3, #0
 8008e8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008e8e:	f7f7 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e92:	4680      	mov	r8, r0
 8008e94:	b158      	cbz	r0, 8008eae <_dtoa_r+0xce>
 8008e96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e98:	2301      	movs	r3, #1
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e9e:	b113      	cbz	r3, 8008ea6 <_dtoa_r+0xc6>
 8008ea0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ea2:	4b86      	ldr	r3, [pc, #536]	@ (80090bc <_dtoa_r+0x2dc>)
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80090d0 <_dtoa_r+0x2f0>
 8008eaa:	f000 bd40 	b.w	800992e <_dtoa_r+0xb4e>
 8008eae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008eb2:	aa14      	add	r2, sp, #80	@ 0x50
 8008eb4:	a915      	add	r1, sp, #84	@ 0x54
 8008eb6:	4648      	mov	r0, r9
 8008eb8:	f001 f8ce 	bl	800a058 <__d2b>
 8008ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ec0:	9002      	str	r0, [sp, #8]
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	d078      	beq.n	8008fb8 <_dtoa_r+0x1d8>
 8008ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ec8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	4b76      	ldr	r3, [pc, #472]	@ (80090c0 <_dtoa_r+0x2e0>)
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	a36b      	add	r3, pc, #428	@ (adr r3, 8009098 <_dtoa_r+0x2b8>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	a36a      	add	r3, pc, #424	@ (adr r3, 80090a0 <_dtoa_r+0x2c0>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f7f7 f9c7 	bl	800028c <__adddf3>
 8008efe:	4604      	mov	r4, r0
 8008f00:	4630      	mov	r0, r6
 8008f02:	460d      	mov	r5, r1
 8008f04:	f7f7 fb0e 	bl	8000524 <__aeabi_i2d>
 8008f08:	a367      	add	r3, pc, #412	@ (adr r3, 80090a8 <_dtoa_r+0x2c8>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fb73 	bl	80005f8 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 f9b7 	bl	800028c <__adddf3>
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	f7f7 fe19 	bl	8000b58 <__aeabi_d2iz>
 8008f26:	2200      	movs	r2, #0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8008f34:	b140      	cbz	r0, 8008f48 <_dtoa_r+0x168>
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7f7 faf4 	bl	8000524 <__aeabi_i2d>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	f7f7 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f44:	b900      	cbnz	r0, 8008f48 <_dtoa_r+0x168>
 8008f46:	3f01      	subs	r7, #1
 8008f48:	2f16      	cmp	r7, #22
 8008f4a:	d852      	bhi.n	8008ff2 <_dtoa_r+0x212>
 8008f4c:	4b5d      	ldr	r3, [pc, #372]	@ (80090c4 <_dtoa_r+0x2e4>)
 8008f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f5a:	f7f7 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d049      	beq.n	8008ff6 <_dtoa_r+0x216>
 8008f62:	3f01      	subs	r7, #1
 8008f64:	2300      	movs	r3, #0
 8008f66:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f6a:	1b9b      	subs	r3, r3, r6
 8008f6c:	1e5a      	subs	r2, r3, #1
 8008f6e:	bf45      	ittet	mi
 8008f70:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f74:	9300      	strmi	r3, [sp, #0]
 8008f76:	2300      	movpl	r3, #0
 8008f78:	2300      	movmi	r3, #0
 8008f7a:	9206      	str	r2, [sp, #24]
 8008f7c:	bf54      	ite	pl
 8008f7e:	9300      	strpl	r3, [sp, #0]
 8008f80:	9306      	strmi	r3, [sp, #24]
 8008f82:	2f00      	cmp	r7, #0
 8008f84:	db39      	blt.n	8008ffa <_dtoa_r+0x21a>
 8008f86:	9b06      	ldr	r3, [sp, #24]
 8008f88:	970d      	str	r7, [sp, #52]	@ 0x34
 8008f8a:	443b      	add	r3, r7
 8008f8c:	9306      	str	r3, [sp, #24]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	9b07      	ldr	r3, [sp, #28]
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d863      	bhi.n	8009060 <_dtoa_r+0x280>
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	bfc4      	itt	gt
 8008f9c:	3b04      	subgt	r3, #4
 8008f9e:	9307      	strgt	r3, [sp, #28]
 8008fa0:	9b07      	ldr	r3, [sp, #28]
 8008fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa6:	bfcc      	ite	gt
 8008fa8:	2400      	movgt	r4, #0
 8008faa:	2401      	movle	r4, #1
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d863      	bhi.n	8009078 <_dtoa_r+0x298>
 8008fb0:	e8df f003 	tbb	[pc, r3]
 8008fb4:	2b375452 	.word	0x2b375452
 8008fb8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008fbc:	441e      	add	r6, r3
 8008fbe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	bfc1      	itttt	gt
 8008fc6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fca:	409f      	lslgt	r7, r3
 8008fcc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fd4:	bfd6      	itet	le
 8008fd6:	f1c3 0320 	rsble	r3, r3, #32
 8008fda:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fde:	fa04 f003 	lslle.w	r0, r4, r3
 8008fe2:	f7f7 fa8f 	bl	8000504 <__aeabi_ui2d>
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fec:	3e01      	subs	r6, #1
 8008fee:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ff0:	e776      	b.n	8008ee0 <_dtoa_r+0x100>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e7b7      	b.n	8008f66 <_dtoa_r+0x186>
 8008ff6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ff8:	e7b6      	b.n	8008f68 <_dtoa_r+0x188>
 8008ffa:	9b00      	ldr	r3, [sp, #0]
 8008ffc:	1bdb      	subs	r3, r3, r7
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	427b      	negs	r3, r7
 8009002:	9308      	str	r3, [sp, #32]
 8009004:	2300      	movs	r3, #0
 8009006:	930d      	str	r3, [sp, #52]	@ 0x34
 8009008:	e7c3      	b.n	8008f92 <_dtoa_r+0x1b2>
 800900a:	2301      	movs	r3, #1
 800900c:	9309      	str	r3, [sp, #36]	@ 0x24
 800900e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009010:	eb07 0b03 	add.w	fp, r7, r3
 8009014:	f10b 0301 	add.w	r3, fp, #1
 8009018:	2b01      	cmp	r3, #1
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	bfb8      	it	lt
 800901e:	2301      	movlt	r3, #1
 8009020:	e006      	b.n	8009030 <_dtoa_r+0x250>
 8009022:	2301      	movs	r3, #1
 8009024:	9309      	str	r3, [sp, #36]	@ 0x24
 8009026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd28      	ble.n	800907e <_dtoa_r+0x29e>
 800902c:	469b      	mov	fp, r3
 800902e:	9303      	str	r3, [sp, #12]
 8009030:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009034:	2100      	movs	r1, #0
 8009036:	2204      	movs	r2, #4
 8009038:	f102 0514 	add.w	r5, r2, #20
 800903c:	429d      	cmp	r5, r3
 800903e:	d926      	bls.n	800908e <_dtoa_r+0x2ae>
 8009040:	6041      	str	r1, [r0, #4]
 8009042:	4648      	mov	r0, r9
 8009044:	f000 fce6 	bl	8009a14 <_Balloc>
 8009048:	4682      	mov	sl, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	d142      	bne.n	80090d4 <_dtoa_r+0x2f4>
 800904e:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <_dtoa_r+0x2e8>)
 8009050:	4602      	mov	r2, r0
 8009052:	f240 11af 	movw	r1, #431	@ 0x1af
 8009056:	e6da      	b.n	8008e0e <_dtoa_r+0x2e>
 8009058:	2300      	movs	r3, #0
 800905a:	e7e3      	b.n	8009024 <_dtoa_r+0x244>
 800905c:	2300      	movs	r3, #0
 800905e:	e7d5      	b.n	800900c <_dtoa_r+0x22c>
 8009060:	2401      	movs	r4, #1
 8009062:	2300      	movs	r3, #0
 8009064:	9307      	str	r3, [sp, #28]
 8009066:	9409      	str	r4, [sp, #36]	@ 0x24
 8009068:	f04f 3bff 	mov.w	fp, #4294967295
 800906c:	2200      	movs	r2, #0
 800906e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009072:	2312      	movs	r3, #18
 8009074:	920c      	str	r2, [sp, #48]	@ 0x30
 8009076:	e7db      	b.n	8009030 <_dtoa_r+0x250>
 8009078:	2301      	movs	r3, #1
 800907a:	9309      	str	r3, [sp, #36]	@ 0x24
 800907c:	e7f4      	b.n	8009068 <_dtoa_r+0x288>
 800907e:	f04f 0b01 	mov.w	fp, #1
 8009082:	f8cd b00c 	str.w	fp, [sp, #12]
 8009086:	465b      	mov	r3, fp
 8009088:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800908c:	e7d0      	b.n	8009030 <_dtoa_r+0x250>
 800908e:	3101      	adds	r1, #1
 8009090:	0052      	lsls	r2, r2, #1
 8009092:	e7d1      	b.n	8009038 <_dtoa_r+0x258>
 8009094:	f3af 8000 	nop.w
 8009098:	636f4361 	.word	0x636f4361
 800909c:	3fd287a7 	.word	0x3fd287a7
 80090a0:	8b60c8b3 	.word	0x8b60c8b3
 80090a4:	3fc68a28 	.word	0x3fc68a28
 80090a8:	509f79fb 	.word	0x509f79fb
 80090ac:	3fd34413 	.word	0x3fd34413
 80090b0:	0800e847 	.word	0x0800e847
 80090b4:	0800e901 	.word	0x0800e901
 80090b8:	7ff00000 	.word	0x7ff00000
 80090bc:	0800e9eb 	.word	0x0800e9eb
 80090c0:	3ff80000 	.word	0x3ff80000
 80090c4:	0800ea30 	.word	0x0800ea30
 80090c8:	0800e959 	.word	0x0800e959
 80090cc:	0800e8fd 	.word	0x0800e8fd
 80090d0:	0800e9ea 	.word	0x0800e9ea
 80090d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090d8:	6018      	str	r0, [r3, #0]
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	2b0e      	cmp	r3, #14
 80090de:	f200 80a1 	bhi.w	8009224 <_dtoa_r+0x444>
 80090e2:	2c00      	cmp	r4, #0
 80090e4:	f000 809e 	beq.w	8009224 <_dtoa_r+0x444>
 80090e8:	2f00      	cmp	r7, #0
 80090ea:	dd33      	ble.n	8009154 <_dtoa_r+0x374>
 80090ec:	4b9c      	ldr	r3, [pc, #624]	@ (8009360 <_dtoa_r+0x580>)
 80090ee:	f007 020f 	and.w	r2, r7, #15
 80090f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f6:	ed93 7b00 	vldr	d7, [r3]
 80090fa:	05f8      	lsls	r0, r7, #23
 80090fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009100:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009104:	d516      	bpl.n	8009134 <_dtoa_r+0x354>
 8009106:	4b97      	ldr	r3, [pc, #604]	@ (8009364 <_dtoa_r+0x584>)
 8009108:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800910c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009110:	f7f7 fb9c 	bl	800084c <__aeabi_ddiv>
 8009114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009118:	f004 040f 	and.w	r4, r4, #15
 800911c:	2603      	movs	r6, #3
 800911e:	4d91      	ldr	r5, [pc, #580]	@ (8009364 <_dtoa_r+0x584>)
 8009120:	b954      	cbnz	r4, 8009138 <_dtoa_r+0x358>
 8009122:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800912a:	f7f7 fb8f 	bl	800084c <__aeabi_ddiv>
 800912e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009132:	e028      	b.n	8009186 <_dtoa_r+0x3a6>
 8009134:	2602      	movs	r6, #2
 8009136:	e7f2      	b.n	800911e <_dtoa_r+0x33e>
 8009138:	07e1      	lsls	r1, r4, #31
 800913a:	d508      	bpl.n	800914e <_dtoa_r+0x36e>
 800913c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009140:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800914c:	3601      	adds	r6, #1
 800914e:	1064      	asrs	r4, r4, #1
 8009150:	3508      	adds	r5, #8
 8009152:	e7e5      	b.n	8009120 <_dtoa_r+0x340>
 8009154:	f000 80af 	beq.w	80092b6 <_dtoa_r+0x4d6>
 8009158:	427c      	negs	r4, r7
 800915a:	4b81      	ldr	r3, [pc, #516]	@ (8009360 <_dtoa_r+0x580>)
 800915c:	4d81      	ldr	r5, [pc, #516]	@ (8009364 <_dtoa_r+0x584>)
 800915e:	f004 020f 	and.w	r2, r4, #15
 8009162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800916e:	f7f7 fa43 	bl	80005f8 <__aeabi_dmul>
 8009172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009176:	1124      	asrs	r4, r4, #4
 8009178:	2300      	movs	r3, #0
 800917a:	2602      	movs	r6, #2
 800917c:	2c00      	cmp	r4, #0
 800917e:	f040 808f 	bne.w	80092a0 <_dtoa_r+0x4c0>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1d3      	bne.n	800912e <_dtoa_r+0x34e>
 8009186:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009188:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8094 	beq.w	80092ba <_dtoa_r+0x4da>
 8009192:	4b75      	ldr	r3, [pc, #468]	@ (8009368 <_dtoa_r+0x588>)
 8009194:	2200      	movs	r2, #0
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f000 808b 	beq.w	80092ba <_dtoa_r+0x4da>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8087 	beq.w	80092ba <_dtoa_r+0x4da>
 80091ac:	f1bb 0f00 	cmp.w	fp, #0
 80091b0:	dd34      	ble.n	800921c <_dtoa_r+0x43c>
 80091b2:	4620      	mov	r0, r4
 80091b4:	4b6d      	ldr	r3, [pc, #436]	@ (800936c <_dtoa_r+0x58c>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fa1d 	bl	80005f8 <__aeabi_dmul>
 80091be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80091c6:	3601      	adds	r6, #1
 80091c8:	465c      	mov	r4, fp
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7f7 f9aa 	bl	8000524 <__aeabi_i2d>
 80091d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	4b65      	ldr	r3, [pc, #404]	@ (8009370 <_dtoa_r+0x590>)
 80091da:	2200      	movs	r2, #0
 80091dc:	f7f7 f856 	bl	800028c <__adddf3>
 80091e0:	4605      	mov	r5, r0
 80091e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d16a      	bne.n	80092c0 <_dtoa_r+0x4e0>
 80091ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ee:	4b61      	ldr	r3, [pc, #388]	@ (8009374 <_dtoa_r+0x594>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 f849 	bl	8000288 <__aeabi_dsub>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091fe:	462a      	mov	r2, r5
 8009200:	4633      	mov	r3, r6
 8009202:	f7f7 fc89 	bl	8000b18 <__aeabi_dcmpgt>
 8009206:	2800      	cmp	r0, #0
 8009208:	f040 8298 	bne.w	800973c <_dtoa_r+0x95c>
 800920c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009210:	462a      	mov	r2, r5
 8009212:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009216:	f7f7 fc61 	bl	8000adc <__aeabi_dcmplt>
 800921a:	bb38      	cbnz	r0, 800926c <_dtoa_r+0x48c>
 800921c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009220:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009224:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009226:	2b00      	cmp	r3, #0
 8009228:	f2c0 8157 	blt.w	80094da <_dtoa_r+0x6fa>
 800922c:	2f0e      	cmp	r7, #14
 800922e:	f300 8154 	bgt.w	80094da <_dtoa_r+0x6fa>
 8009232:	4b4b      	ldr	r3, [pc, #300]	@ (8009360 <_dtoa_r+0x580>)
 8009234:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009238:	ed93 7b00 	vldr	d7, [r3]
 800923c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800923e:	2b00      	cmp	r3, #0
 8009240:	ed8d 7b00 	vstr	d7, [sp]
 8009244:	f280 80e5 	bge.w	8009412 <_dtoa_r+0x632>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f300 80e1 	bgt.w	8009412 <_dtoa_r+0x632>
 8009250:	d10c      	bne.n	800926c <_dtoa_r+0x48c>
 8009252:	4b48      	ldr	r3, [pc, #288]	@ (8009374 <_dtoa_r+0x594>)
 8009254:	2200      	movs	r2, #0
 8009256:	ec51 0b17 	vmov	r0, r1, d7
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009262:	f7f7 fc4f 	bl	8000b04 <__aeabi_dcmpge>
 8009266:	2800      	cmp	r0, #0
 8009268:	f000 8266 	beq.w	8009738 <_dtoa_r+0x958>
 800926c:	2400      	movs	r4, #0
 800926e:	4625      	mov	r5, r4
 8009270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009272:	4656      	mov	r6, sl
 8009274:	ea6f 0803 	mvn.w	r8, r3
 8009278:	2700      	movs	r7, #0
 800927a:	4621      	mov	r1, r4
 800927c:	4648      	mov	r0, r9
 800927e:	f000 fc09 	bl	8009a94 <_Bfree>
 8009282:	2d00      	cmp	r5, #0
 8009284:	f000 80bd 	beq.w	8009402 <_dtoa_r+0x622>
 8009288:	b12f      	cbz	r7, 8009296 <_dtoa_r+0x4b6>
 800928a:	42af      	cmp	r7, r5
 800928c:	d003      	beq.n	8009296 <_dtoa_r+0x4b6>
 800928e:	4639      	mov	r1, r7
 8009290:	4648      	mov	r0, r9
 8009292:	f000 fbff 	bl	8009a94 <_Bfree>
 8009296:	4629      	mov	r1, r5
 8009298:	4648      	mov	r0, r9
 800929a:	f000 fbfb 	bl	8009a94 <_Bfree>
 800929e:	e0b0      	b.n	8009402 <_dtoa_r+0x622>
 80092a0:	07e2      	lsls	r2, r4, #31
 80092a2:	d505      	bpl.n	80092b0 <_dtoa_r+0x4d0>
 80092a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092a8:	f7f7 f9a6 	bl	80005f8 <__aeabi_dmul>
 80092ac:	3601      	adds	r6, #1
 80092ae:	2301      	movs	r3, #1
 80092b0:	1064      	asrs	r4, r4, #1
 80092b2:	3508      	adds	r5, #8
 80092b4:	e762      	b.n	800917c <_dtoa_r+0x39c>
 80092b6:	2602      	movs	r6, #2
 80092b8:	e765      	b.n	8009186 <_dtoa_r+0x3a6>
 80092ba:	9c03      	ldr	r4, [sp, #12]
 80092bc:	46b8      	mov	r8, r7
 80092be:	e784      	b.n	80091ca <_dtoa_r+0x3ea>
 80092c0:	4b27      	ldr	r3, [pc, #156]	@ (8009360 <_dtoa_r+0x580>)
 80092c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092cc:	4454      	add	r4, sl
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d054      	beq.n	800937c <_dtoa_r+0x59c>
 80092d2:	4929      	ldr	r1, [pc, #164]	@ (8009378 <_dtoa_r+0x598>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f7f7 fab9 	bl	800084c <__aeabi_ddiv>
 80092da:	4633      	mov	r3, r6
 80092dc:	462a      	mov	r2, r5
 80092de:	f7f6 ffd3 	bl	8000288 <__aeabi_dsub>
 80092e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092e6:	4656      	mov	r6, sl
 80092e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ec:	f7f7 fc34 	bl	8000b58 <__aeabi_d2iz>
 80092f0:	4605      	mov	r5, r0
 80092f2:	f7f7 f917 	bl	8000524 <__aeabi_i2d>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092fe:	f7f6 ffc3 	bl	8000288 <__aeabi_dsub>
 8009302:	3530      	adds	r5, #48	@ 0x30
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800930c:	f806 5b01 	strb.w	r5, [r6], #1
 8009310:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009314:	f7f7 fbe2 	bl	8000adc <__aeabi_dcmplt>
 8009318:	2800      	cmp	r0, #0
 800931a:	d172      	bne.n	8009402 <_dtoa_r+0x622>
 800931c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009320:	4911      	ldr	r1, [pc, #68]	@ (8009368 <_dtoa_r+0x588>)
 8009322:	2000      	movs	r0, #0
 8009324:	f7f6 ffb0 	bl	8000288 <__aeabi_dsub>
 8009328:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800932c:	f7f7 fbd6 	bl	8000adc <__aeabi_dcmplt>
 8009330:	2800      	cmp	r0, #0
 8009332:	f040 80b4 	bne.w	800949e <_dtoa_r+0x6be>
 8009336:	42a6      	cmp	r6, r4
 8009338:	f43f af70 	beq.w	800921c <_dtoa_r+0x43c>
 800933c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009340:	4b0a      	ldr	r3, [pc, #40]	@ (800936c <_dtoa_r+0x58c>)
 8009342:	2200      	movs	r2, #0
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	4b08      	ldr	r3, [pc, #32]	@ (800936c <_dtoa_r+0x58c>)
 800934a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800934e:	2200      	movs	r2, #0
 8009350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009354:	f7f7 f950 	bl	80005f8 <__aeabi_dmul>
 8009358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800935c:	e7c4      	b.n	80092e8 <_dtoa_r+0x508>
 800935e:	bf00      	nop
 8009360:	0800ea30 	.word	0x0800ea30
 8009364:	0800ea08 	.word	0x0800ea08
 8009368:	3ff00000 	.word	0x3ff00000
 800936c:	40240000 	.word	0x40240000
 8009370:	401c0000 	.word	0x401c0000
 8009374:	40140000 	.word	0x40140000
 8009378:	3fe00000 	.word	0x3fe00000
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009388:	9413      	str	r4, [sp, #76]	@ 0x4c
 800938a:	4656      	mov	r6, sl
 800938c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009390:	f7f7 fbe2 	bl	8000b58 <__aeabi_d2iz>
 8009394:	4605      	mov	r5, r0
 8009396:	f7f7 f8c5 	bl	8000524 <__aeabi_i2d>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a2:	f7f6 ff71 	bl	8000288 <__aeabi_dsub>
 80093a6:	3530      	adds	r5, #48	@ 0x30
 80093a8:	f806 5b01 	strb.w	r5, [r6], #1
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	d124      	bne.n	8009406 <_dtoa_r+0x626>
 80093bc:	4baf      	ldr	r3, [pc, #700]	@ (800967c <_dtoa_r+0x89c>)
 80093be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80093c2:	f7f6 ff63 	bl	800028c <__adddf3>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093ce:	f7f7 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d163      	bne.n	800949e <_dtoa_r+0x6be>
 80093d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80093da:	49a8      	ldr	r1, [pc, #672]	@ (800967c <_dtoa_r+0x89c>)
 80093dc:	2000      	movs	r0, #0
 80093de:	f7f6 ff53 	bl	8000288 <__aeabi_dsub>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093ea:	f7f7 fb77 	bl	8000adc <__aeabi_dcmplt>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f af14 	beq.w	800921c <_dtoa_r+0x43c>
 80093f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80093f6:	1e73      	subs	r3, r6, #1
 80093f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093fe:	2b30      	cmp	r3, #48	@ 0x30
 8009400:	d0f8      	beq.n	80093f4 <_dtoa_r+0x614>
 8009402:	4647      	mov	r7, r8
 8009404:	e03b      	b.n	800947e <_dtoa_r+0x69e>
 8009406:	4b9e      	ldr	r3, [pc, #632]	@ (8009680 <_dtoa_r+0x8a0>)
 8009408:	f7f7 f8f6 	bl	80005f8 <__aeabi_dmul>
 800940c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009410:	e7bc      	b.n	800938c <_dtoa_r+0x5ac>
 8009412:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009416:	4656      	mov	r6, sl
 8009418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 fa14 	bl	800084c <__aeabi_ddiv>
 8009424:	f7f7 fb98 	bl	8000b58 <__aeabi_d2iz>
 8009428:	4680      	mov	r8, r0
 800942a:	f7f7 f87b 	bl	8000524 <__aeabi_i2d>
 800942e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009432:	f7f7 f8e1 	bl	80005f8 <__aeabi_dmul>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4620      	mov	r0, r4
 800943c:	4629      	mov	r1, r5
 800943e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009442:	f7f6 ff21 	bl	8000288 <__aeabi_dsub>
 8009446:	f806 4b01 	strb.w	r4, [r6], #1
 800944a:	9d03      	ldr	r5, [sp, #12]
 800944c:	eba6 040a 	sub.w	r4, r6, sl
 8009450:	42a5      	cmp	r5, r4
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	d133      	bne.n	80094c0 <_dtoa_r+0x6e0>
 8009458:	f7f6 ff18 	bl	800028c <__adddf3>
 800945c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	f7f7 fb58 	bl	8000b18 <__aeabi_dcmpgt>
 8009468:	b9c0      	cbnz	r0, 800949c <_dtoa_r+0x6bc>
 800946a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8009476:	b110      	cbz	r0, 800947e <_dtoa_r+0x69e>
 8009478:	f018 0f01 	tst.w	r8, #1
 800947c:	d10e      	bne.n	800949c <_dtoa_r+0x6bc>
 800947e:	9902      	ldr	r1, [sp, #8]
 8009480:	4648      	mov	r0, r9
 8009482:	f000 fb07 	bl	8009a94 <_Bfree>
 8009486:	2300      	movs	r3, #0
 8009488:	7033      	strb	r3, [r6, #0]
 800948a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800948c:	3701      	adds	r7, #1
 800948e:	601f      	str	r7, [r3, #0]
 8009490:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 824b 	beq.w	800992e <_dtoa_r+0xb4e>
 8009498:	601e      	str	r6, [r3, #0]
 800949a:	e248      	b.n	800992e <_dtoa_r+0xb4e>
 800949c:	46b8      	mov	r8, r7
 800949e:	4633      	mov	r3, r6
 80094a0:	461e      	mov	r6, r3
 80094a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094a6:	2a39      	cmp	r2, #57	@ 0x39
 80094a8:	d106      	bne.n	80094b8 <_dtoa_r+0x6d8>
 80094aa:	459a      	cmp	sl, r3
 80094ac:	d1f8      	bne.n	80094a0 <_dtoa_r+0x6c0>
 80094ae:	2230      	movs	r2, #48	@ 0x30
 80094b0:	f108 0801 	add.w	r8, r8, #1
 80094b4:	f88a 2000 	strb.w	r2, [sl]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	3201      	adds	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e7a0      	b.n	8009402 <_dtoa_r+0x622>
 80094c0:	4b6f      	ldr	r3, [pc, #444]	@ (8009680 <_dtoa_r+0x8a0>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f7 f898 	bl	80005f8 <__aeabi_dmul>
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	4604      	mov	r4, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	f7f7 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d09f      	beq.n	8009418 <_dtoa_r+0x638>
 80094d8:	e7d1      	b.n	800947e <_dtoa_r+0x69e>
 80094da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094dc:	2a00      	cmp	r2, #0
 80094de:	f000 80ea 	beq.w	80096b6 <_dtoa_r+0x8d6>
 80094e2:	9a07      	ldr	r2, [sp, #28]
 80094e4:	2a01      	cmp	r2, #1
 80094e6:	f300 80cd 	bgt.w	8009684 <_dtoa_r+0x8a4>
 80094ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	f000 80c1 	beq.w	8009674 <_dtoa_r+0x894>
 80094f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094f6:	9c08      	ldr	r4, [sp, #32]
 80094f8:	9e00      	ldr	r6, [sp, #0]
 80094fa:	9a00      	ldr	r2, [sp, #0]
 80094fc:	441a      	add	r2, r3
 80094fe:	9200      	str	r2, [sp, #0]
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	2101      	movs	r1, #1
 8009504:	441a      	add	r2, r3
 8009506:	4648      	mov	r0, r9
 8009508:	9206      	str	r2, [sp, #24]
 800950a:	f000 fb77 	bl	8009bfc <__i2b>
 800950e:	4605      	mov	r5, r0
 8009510:	b166      	cbz	r6, 800952c <_dtoa_r+0x74c>
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd09      	ble.n	800952c <_dtoa_r+0x74c>
 8009518:	42b3      	cmp	r3, r6
 800951a:	9a00      	ldr	r2, [sp, #0]
 800951c:	bfa8      	it	ge
 800951e:	4633      	movge	r3, r6
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	9200      	str	r2, [sp, #0]
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	1af6      	subs	r6, r6, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	9306      	str	r3, [sp, #24]
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	b30b      	cbz	r3, 8009574 <_dtoa_r+0x794>
 8009530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80c6 	beq.w	80096c4 <_dtoa_r+0x8e4>
 8009538:	2c00      	cmp	r4, #0
 800953a:	f000 80c0 	beq.w	80096be <_dtoa_r+0x8de>
 800953e:	4629      	mov	r1, r5
 8009540:	4622      	mov	r2, r4
 8009542:	4648      	mov	r0, r9
 8009544:	f000 fc12 	bl	8009d6c <__pow5mult>
 8009548:	9a02      	ldr	r2, [sp, #8]
 800954a:	4601      	mov	r1, r0
 800954c:	4605      	mov	r5, r0
 800954e:	4648      	mov	r0, r9
 8009550:	f000 fb6a 	bl	8009c28 <__multiply>
 8009554:	9902      	ldr	r1, [sp, #8]
 8009556:	4680      	mov	r8, r0
 8009558:	4648      	mov	r0, r9
 800955a:	f000 fa9b 	bl	8009a94 <_Bfree>
 800955e:	9b08      	ldr	r3, [sp, #32]
 8009560:	1b1b      	subs	r3, r3, r4
 8009562:	9308      	str	r3, [sp, #32]
 8009564:	f000 80b1 	beq.w	80096ca <_dtoa_r+0x8ea>
 8009568:	9a08      	ldr	r2, [sp, #32]
 800956a:	4641      	mov	r1, r8
 800956c:	4648      	mov	r0, r9
 800956e:	f000 fbfd 	bl	8009d6c <__pow5mult>
 8009572:	9002      	str	r0, [sp, #8]
 8009574:	2101      	movs	r1, #1
 8009576:	4648      	mov	r0, r9
 8009578:	f000 fb40 	bl	8009bfc <__i2b>
 800957c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800957e:	4604      	mov	r4, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 81d8 	beq.w	8009936 <_dtoa_r+0xb56>
 8009586:	461a      	mov	r2, r3
 8009588:	4601      	mov	r1, r0
 800958a:	4648      	mov	r0, r9
 800958c:	f000 fbee 	bl	8009d6c <__pow5mult>
 8009590:	9b07      	ldr	r3, [sp, #28]
 8009592:	2b01      	cmp	r3, #1
 8009594:	4604      	mov	r4, r0
 8009596:	f300 809f 	bgt.w	80096d8 <_dtoa_r+0x8f8>
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8097 	bne.w	80096d0 <_dtoa_r+0x8f0>
 80095a2:	9b05      	ldr	r3, [sp, #20]
 80095a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 8093 	bne.w	80096d4 <_dtoa_r+0x8f4>
 80095ae:	9b05      	ldr	r3, [sp, #20]
 80095b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095b4:	0d1b      	lsrs	r3, r3, #20
 80095b6:	051b      	lsls	r3, r3, #20
 80095b8:	b133      	cbz	r3, 80095c8 <_dtoa_r+0x7e8>
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	9b06      	ldr	r3, [sp, #24]
 80095c2:	3301      	adds	r3, #1
 80095c4:	9306      	str	r3, [sp, #24]
 80095c6:	2301      	movs	r3, #1
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 81b8 	beq.w	8009942 <_dtoa_r+0xb62>
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095d8:	6918      	ldr	r0, [r3, #16]
 80095da:	f000 fac3 	bl	8009b64 <__hi0bits>
 80095de:	f1c0 0020 	rsb	r0, r0, #32
 80095e2:	9b06      	ldr	r3, [sp, #24]
 80095e4:	4418      	add	r0, r3
 80095e6:	f010 001f 	ands.w	r0, r0, #31
 80095ea:	f000 8082 	beq.w	80096f2 <_dtoa_r+0x912>
 80095ee:	f1c0 0320 	rsb	r3, r0, #32
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	dd73      	ble.n	80096de <_dtoa_r+0x8fe>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	f1c0 001c 	rsb	r0, r0, #28
 80095fc:	4403      	add	r3, r0
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	4403      	add	r3, r0
 8009604:	4406      	add	r6, r0
 8009606:	9306      	str	r3, [sp, #24]
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd05      	ble.n	800961a <_dtoa_r+0x83a>
 800960e:	9902      	ldr	r1, [sp, #8]
 8009610:	461a      	mov	r2, r3
 8009612:	4648      	mov	r0, r9
 8009614:	f000 fc04 	bl	8009e20 <__lshift>
 8009618:	9002      	str	r0, [sp, #8]
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dd05      	ble.n	800962c <_dtoa_r+0x84c>
 8009620:	4621      	mov	r1, r4
 8009622:	461a      	mov	r2, r3
 8009624:	4648      	mov	r0, r9
 8009626:	f000 fbfb 	bl	8009e20 <__lshift>
 800962a:	4604      	mov	r4, r0
 800962c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d061      	beq.n	80096f6 <_dtoa_r+0x916>
 8009632:	9802      	ldr	r0, [sp, #8]
 8009634:	4621      	mov	r1, r4
 8009636:	f000 fc5f 	bl	8009ef8 <__mcmp>
 800963a:	2800      	cmp	r0, #0
 800963c:	da5b      	bge.n	80096f6 <_dtoa_r+0x916>
 800963e:	2300      	movs	r3, #0
 8009640:	9902      	ldr	r1, [sp, #8]
 8009642:	220a      	movs	r2, #10
 8009644:	4648      	mov	r0, r9
 8009646:	f000 fa47 	bl	8009ad8 <__multadd>
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	9002      	str	r0, [sp, #8]
 800964e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8177 	beq.w	8009946 <_dtoa_r+0xb66>
 8009658:	4629      	mov	r1, r5
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4648      	mov	r0, r9
 8009660:	f000 fa3a 	bl	8009ad8 <__multadd>
 8009664:	f1bb 0f00 	cmp.w	fp, #0
 8009668:	4605      	mov	r5, r0
 800966a:	dc6f      	bgt.n	800974c <_dtoa_r+0x96c>
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	2b02      	cmp	r3, #2
 8009670:	dc49      	bgt.n	8009706 <_dtoa_r+0x926>
 8009672:	e06b      	b.n	800974c <_dtoa_r+0x96c>
 8009674:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800967a:	e73c      	b.n	80094f6 <_dtoa_r+0x716>
 800967c:	3fe00000 	.word	0x3fe00000
 8009680:	40240000 	.word	0x40240000
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	1e5c      	subs	r4, r3, #1
 8009688:	9b08      	ldr	r3, [sp, #32]
 800968a:	42a3      	cmp	r3, r4
 800968c:	db09      	blt.n	80096a2 <_dtoa_r+0x8c2>
 800968e:	1b1c      	subs	r4, r3, r4
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f6bf af30 	bge.w	80094f8 <_dtoa_r+0x718>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	9a03      	ldr	r2, [sp, #12]
 800969c:	1a9e      	subs	r6, r3, r2
 800969e:	2300      	movs	r3, #0
 80096a0:	e72b      	b.n	80094fa <_dtoa_r+0x71a>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096a6:	9408      	str	r4, [sp, #32]
 80096a8:	1ae3      	subs	r3, r4, r3
 80096aa:	441a      	add	r2, r3
 80096ac:	9e00      	ldr	r6, [sp, #0]
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80096b2:	2400      	movs	r4, #0
 80096b4:	e721      	b.n	80094fa <_dtoa_r+0x71a>
 80096b6:	9c08      	ldr	r4, [sp, #32]
 80096b8:	9e00      	ldr	r6, [sp, #0]
 80096ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80096bc:	e728      	b.n	8009510 <_dtoa_r+0x730>
 80096be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80096c2:	e751      	b.n	8009568 <_dtoa_r+0x788>
 80096c4:	9a08      	ldr	r2, [sp, #32]
 80096c6:	9902      	ldr	r1, [sp, #8]
 80096c8:	e750      	b.n	800956c <_dtoa_r+0x78c>
 80096ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80096ce:	e751      	b.n	8009574 <_dtoa_r+0x794>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e779      	b.n	80095c8 <_dtoa_r+0x7e8>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	e777      	b.n	80095c8 <_dtoa_r+0x7e8>
 80096d8:	2300      	movs	r3, #0
 80096da:	9308      	str	r3, [sp, #32]
 80096dc:	e779      	b.n	80095d2 <_dtoa_r+0x7f2>
 80096de:	d093      	beq.n	8009608 <_dtoa_r+0x828>
 80096e0:	9a00      	ldr	r2, [sp, #0]
 80096e2:	331c      	adds	r3, #28
 80096e4:	441a      	add	r2, r3
 80096e6:	9200      	str	r2, [sp, #0]
 80096e8:	9a06      	ldr	r2, [sp, #24]
 80096ea:	441a      	add	r2, r3
 80096ec:	441e      	add	r6, r3
 80096ee:	9206      	str	r2, [sp, #24]
 80096f0:	e78a      	b.n	8009608 <_dtoa_r+0x828>
 80096f2:	4603      	mov	r3, r0
 80096f4:	e7f4      	b.n	80096e0 <_dtoa_r+0x900>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	46b8      	mov	r8, r7
 80096fc:	dc20      	bgt.n	8009740 <_dtoa_r+0x960>
 80096fe:	469b      	mov	fp, r3
 8009700:	9b07      	ldr	r3, [sp, #28]
 8009702:	2b02      	cmp	r3, #2
 8009704:	dd1e      	ble.n	8009744 <_dtoa_r+0x964>
 8009706:	f1bb 0f00 	cmp.w	fp, #0
 800970a:	f47f adb1 	bne.w	8009270 <_dtoa_r+0x490>
 800970e:	4621      	mov	r1, r4
 8009710:	465b      	mov	r3, fp
 8009712:	2205      	movs	r2, #5
 8009714:	4648      	mov	r0, r9
 8009716:	f000 f9df 	bl	8009ad8 <__multadd>
 800971a:	4601      	mov	r1, r0
 800971c:	4604      	mov	r4, r0
 800971e:	9802      	ldr	r0, [sp, #8]
 8009720:	f000 fbea 	bl	8009ef8 <__mcmp>
 8009724:	2800      	cmp	r0, #0
 8009726:	f77f ada3 	ble.w	8009270 <_dtoa_r+0x490>
 800972a:	4656      	mov	r6, sl
 800972c:	2331      	movs	r3, #49	@ 0x31
 800972e:	f806 3b01 	strb.w	r3, [r6], #1
 8009732:	f108 0801 	add.w	r8, r8, #1
 8009736:	e59f      	b.n	8009278 <_dtoa_r+0x498>
 8009738:	9c03      	ldr	r4, [sp, #12]
 800973a:	46b8      	mov	r8, r7
 800973c:	4625      	mov	r5, r4
 800973e:	e7f4      	b.n	800972a <_dtoa_r+0x94a>
 8009740:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 8101 	beq.w	800994e <_dtoa_r+0xb6e>
 800974c:	2e00      	cmp	r6, #0
 800974e:	dd05      	ble.n	800975c <_dtoa_r+0x97c>
 8009750:	4629      	mov	r1, r5
 8009752:	4632      	mov	r2, r6
 8009754:	4648      	mov	r0, r9
 8009756:	f000 fb63 	bl	8009e20 <__lshift>
 800975a:	4605      	mov	r5, r0
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d05c      	beq.n	800981c <_dtoa_r+0xa3c>
 8009762:	6869      	ldr	r1, [r5, #4]
 8009764:	4648      	mov	r0, r9
 8009766:	f000 f955 	bl	8009a14 <_Balloc>
 800976a:	4606      	mov	r6, r0
 800976c:	b928      	cbnz	r0, 800977a <_dtoa_r+0x99a>
 800976e:	4b82      	ldr	r3, [pc, #520]	@ (8009978 <_dtoa_r+0xb98>)
 8009770:	4602      	mov	r2, r0
 8009772:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009776:	f7ff bb4a 	b.w	8008e0e <_dtoa_r+0x2e>
 800977a:	692a      	ldr	r2, [r5, #16]
 800977c:	3202      	adds	r2, #2
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	f105 010c 	add.w	r1, r5, #12
 8009784:	300c      	adds	r0, #12
 8009786:	f7ff fa74 	bl	8008c72 <memcpy>
 800978a:	2201      	movs	r2, #1
 800978c:	4631      	mov	r1, r6
 800978e:	4648      	mov	r0, r9
 8009790:	f000 fb46 	bl	8009e20 <__lshift>
 8009794:	f10a 0301 	add.w	r3, sl, #1
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	eb0a 030b 	add.w	r3, sl, fp
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	462f      	mov	r7, r5
 80097a8:	9306      	str	r3, [sp, #24]
 80097aa:	4605      	mov	r5, r0
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	9802      	ldr	r0, [sp, #8]
 80097b0:	4621      	mov	r1, r4
 80097b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80097b6:	f7ff fa89 	bl	8008ccc <quorem>
 80097ba:	4603      	mov	r3, r0
 80097bc:	3330      	adds	r3, #48	@ 0x30
 80097be:	9003      	str	r0, [sp, #12]
 80097c0:	4639      	mov	r1, r7
 80097c2:	9802      	ldr	r0, [sp, #8]
 80097c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c6:	f000 fb97 	bl	8009ef8 <__mcmp>
 80097ca:	462a      	mov	r2, r5
 80097cc:	9004      	str	r0, [sp, #16]
 80097ce:	4621      	mov	r1, r4
 80097d0:	4648      	mov	r0, r9
 80097d2:	f000 fbad 	bl	8009f30 <__mdiff>
 80097d6:	68c2      	ldr	r2, [r0, #12]
 80097d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097da:	4606      	mov	r6, r0
 80097dc:	bb02      	cbnz	r2, 8009820 <_dtoa_r+0xa40>
 80097de:	4601      	mov	r1, r0
 80097e0:	9802      	ldr	r0, [sp, #8]
 80097e2:	f000 fb89 	bl	8009ef8 <__mcmp>
 80097e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e8:	4602      	mov	r2, r0
 80097ea:	4631      	mov	r1, r6
 80097ec:	4648      	mov	r0, r9
 80097ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80097f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f2:	f000 f94f 	bl	8009a94 <_Bfree>
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097fa:	9e00      	ldr	r6, [sp, #0]
 80097fc:	ea42 0103 	orr.w	r1, r2, r3
 8009800:	9b06      	ldr	r3, [sp, #24]
 8009802:	4319      	orrs	r1, r3
 8009804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009806:	d10d      	bne.n	8009824 <_dtoa_r+0xa44>
 8009808:	2b39      	cmp	r3, #57	@ 0x39
 800980a:	d027      	beq.n	800985c <_dtoa_r+0xa7c>
 800980c:	9a04      	ldr	r2, [sp, #16]
 800980e:	2a00      	cmp	r2, #0
 8009810:	dd01      	ble.n	8009816 <_dtoa_r+0xa36>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	3331      	adds	r3, #49	@ 0x31
 8009816:	f88b 3000 	strb.w	r3, [fp]
 800981a:	e52e      	b.n	800927a <_dtoa_r+0x49a>
 800981c:	4628      	mov	r0, r5
 800981e:	e7b9      	b.n	8009794 <_dtoa_r+0x9b4>
 8009820:	2201      	movs	r2, #1
 8009822:	e7e2      	b.n	80097ea <_dtoa_r+0xa0a>
 8009824:	9904      	ldr	r1, [sp, #16]
 8009826:	2900      	cmp	r1, #0
 8009828:	db04      	blt.n	8009834 <_dtoa_r+0xa54>
 800982a:	9807      	ldr	r0, [sp, #28]
 800982c:	4301      	orrs	r1, r0
 800982e:	9806      	ldr	r0, [sp, #24]
 8009830:	4301      	orrs	r1, r0
 8009832:	d120      	bne.n	8009876 <_dtoa_r+0xa96>
 8009834:	2a00      	cmp	r2, #0
 8009836:	ddee      	ble.n	8009816 <_dtoa_r+0xa36>
 8009838:	9902      	ldr	r1, [sp, #8]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	2201      	movs	r2, #1
 800983e:	4648      	mov	r0, r9
 8009840:	f000 faee 	bl	8009e20 <__lshift>
 8009844:	4621      	mov	r1, r4
 8009846:	9002      	str	r0, [sp, #8]
 8009848:	f000 fb56 	bl	8009ef8 <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	dc02      	bgt.n	8009858 <_dtoa_r+0xa78>
 8009852:	d1e0      	bne.n	8009816 <_dtoa_r+0xa36>
 8009854:	07da      	lsls	r2, r3, #31
 8009856:	d5de      	bpl.n	8009816 <_dtoa_r+0xa36>
 8009858:	2b39      	cmp	r3, #57	@ 0x39
 800985a:	d1da      	bne.n	8009812 <_dtoa_r+0xa32>
 800985c:	2339      	movs	r3, #57	@ 0x39
 800985e:	f88b 3000 	strb.w	r3, [fp]
 8009862:	4633      	mov	r3, r6
 8009864:	461e      	mov	r6, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800986c:	2a39      	cmp	r2, #57	@ 0x39
 800986e:	d04e      	beq.n	800990e <_dtoa_r+0xb2e>
 8009870:	3201      	adds	r2, #1
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	e501      	b.n	800927a <_dtoa_r+0x49a>
 8009876:	2a00      	cmp	r2, #0
 8009878:	dd03      	ble.n	8009882 <_dtoa_r+0xaa2>
 800987a:	2b39      	cmp	r3, #57	@ 0x39
 800987c:	d0ee      	beq.n	800985c <_dtoa_r+0xa7c>
 800987e:	3301      	adds	r3, #1
 8009880:	e7c9      	b.n	8009816 <_dtoa_r+0xa36>
 8009882:	9a00      	ldr	r2, [sp, #0]
 8009884:	9908      	ldr	r1, [sp, #32]
 8009886:	f802 3c01 	strb.w	r3, [r2, #-1]
 800988a:	428a      	cmp	r2, r1
 800988c:	d028      	beq.n	80098e0 <_dtoa_r+0xb00>
 800988e:	9902      	ldr	r1, [sp, #8]
 8009890:	2300      	movs	r3, #0
 8009892:	220a      	movs	r2, #10
 8009894:	4648      	mov	r0, r9
 8009896:	f000 f91f 	bl	8009ad8 <__multadd>
 800989a:	42af      	cmp	r7, r5
 800989c:	9002      	str	r0, [sp, #8]
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	f04f 020a 	mov.w	r2, #10
 80098a6:	4639      	mov	r1, r7
 80098a8:	4648      	mov	r0, r9
 80098aa:	d107      	bne.n	80098bc <_dtoa_r+0xadc>
 80098ac:	f000 f914 	bl	8009ad8 <__multadd>
 80098b0:	4607      	mov	r7, r0
 80098b2:	4605      	mov	r5, r0
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	3301      	adds	r3, #1
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	e777      	b.n	80097ac <_dtoa_r+0x9cc>
 80098bc:	f000 f90c 	bl	8009ad8 <__multadd>
 80098c0:	4629      	mov	r1, r5
 80098c2:	4607      	mov	r7, r0
 80098c4:	2300      	movs	r3, #0
 80098c6:	220a      	movs	r2, #10
 80098c8:	4648      	mov	r0, r9
 80098ca:	f000 f905 	bl	8009ad8 <__multadd>
 80098ce:	4605      	mov	r5, r0
 80098d0:	e7f0      	b.n	80098b4 <_dtoa_r+0xad4>
 80098d2:	f1bb 0f00 	cmp.w	fp, #0
 80098d6:	bfcc      	ite	gt
 80098d8:	465e      	movgt	r6, fp
 80098da:	2601      	movle	r6, #1
 80098dc:	4456      	add	r6, sl
 80098de:	2700      	movs	r7, #0
 80098e0:	9902      	ldr	r1, [sp, #8]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	2201      	movs	r2, #1
 80098e6:	4648      	mov	r0, r9
 80098e8:	f000 fa9a 	bl	8009e20 <__lshift>
 80098ec:	4621      	mov	r1, r4
 80098ee:	9002      	str	r0, [sp, #8]
 80098f0:	f000 fb02 	bl	8009ef8 <__mcmp>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	dcb4      	bgt.n	8009862 <_dtoa_r+0xa82>
 80098f8:	d102      	bne.n	8009900 <_dtoa_r+0xb20>
 80098fa:	9b00      	ldr	r3, [sp, #0]
 80098fc:	07db      	lsls	r3, r3, #31
 80098fe:	d4b0      	bmi.n	8009862 <_dtoa_r+0xa82>
 8009900:	4633      	mov	r3, r6
 8009902:	461e      	mov	r6, r3
 8009904:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009908:	2a30      	cmp	r2, #48	@ 0x30
 800990a:	d0fa      	beq.n	8009902 <_dtoa_r+0xb22>
 800990c:	e4b5      	b.n	800927a <_dtoa_r+0x49a>
 800990e:	459a      	cmp	sl, r3
 8009910:	d1a8      	bne.n	8009864 <_dtoa_r+0xa84>
 8009912:	2331      	movs	r3, #49	@ 0x31
 8009914:	f108 0801 	add.w	r8, r8, #1
 8009918:	f88a 3000 	strb.w	r3, [sl]
 800991c:	e4ad      	b.n	800927a <_dtoa_r+0x49a>
 800991e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009920:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800997c <_dtoa_r+0xb9c>
 8009924:	b11b      	cbz	r3, 800992e <_dtoa_r+0xb4e>
 8009926:	f10a 0308 	add.w	r3, sl, #8
 800992a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4650      	mov	r0, sl
 8009930:	b017      	add	sp, #92	@ 0x5c
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	9b07      	ldr	r3, [sp, #28]
 8009938:	2b01      	cmp	r3, #1
 800993a:	f77f ae2e 	ble.w	800959a <_dtoa_r+0x7ba>
 800993e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009940:	9308      	str	r3, [sp, #32]
 8009942:	2001      	movs	r0, #1
 8009944:	e64d      	b.n	80095e2 <_dtoa_r+0x802>
 8009946:	f1bb 0f00 	cmp.w	fp, #0
 800994a:	f77f aed9 	ble.w	8009700 <_dtoa_r+0x920>
 800994e:	4656      	mov	r6, sl
 8009950:	9802      	ldr	r0, [sp, #8]
 8009952:	4621      	mov	r1, r4
 8009954:	f7ff f9ba 	bl	8008ccc <quorem>
 8009958:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800995c:	f806 3b01 	strb.w	r3, [r6], #1
 8009960:	eba6 020a 	sub.w	r2, r6, sl
 8009964:	4593      	cmp	fp, r2
 8009966:	ddb4      	ble.n	80098d2 <_dtoa_r+0xaf2>
 8009968:	9902      	ldr	r1, [sp, #8]
 800996a:	2300      	movs	r3, #0
 800996c:	220a      	movs	r2, #10
 800996e:	4648      	mov	r0, r9
 8009970:	f000 f8b2 	bl	8009ad8 <__multadd>
 8009974:	9002      	str	r0, [sp, #8]
 8009976:	e7eb      	b.n	8009950 <_dtoa_r+0xb70>
 8009978:	0800e959 	.word	0x0800e959
 800997c:	0800e8f4 	.word	0x0800e8f4

08009980 <_free_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4605      	mov	r5, r0
 8009984:	2900      	cmp	r1, #0
 8009986:	d041      	beq.n	8009a0c <_free_r+0x8c>
 8009988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800998c:	1f0c      	subs	r4, r1, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfb8      	it	lt
 8009992:	18e4      	addlt	r4, r4, r3
 8009994:	f7fe f962 	bl	8007c5c <__malloc_lock>
 8009998:	4a1d      	ldr	r2, [pc, #116]	@ (8009a10 <_free_r+0x90>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	b933      	cbnz	r3, 80099ac <_free_r+0x2c>
 800999e:	6063      	str	r3, [r4, #4]
 80099a0:	6014      	str	r4, [r2, #0]
 80099a2:	4628      	mov	r0, r5
 80099a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a8:	f7fe b95e 	b.w	8007c68 <__malloc_unlock>
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d908      	bls.n	80099c2 <_free_r+0x42>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	1821      	adds	r1, r4, r0
 80099b4:	428b      	cmp	r3, r1
 80099b6:	bf01      	itttt	eq
 80099b8:	6819      	ldreq	r1, [r3, #0]
 80099ba:	685b      	ldreq	r3, [r3, #4]
 80099bc:	1809      	addeq	r1, r1, r0
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	e7ed      	b.n	800999e <_free_r+0x1e>
 80099c2:	461a      	mov	r2, r3
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b10b      	cbz	r3, 80099cc <_free_r+0x4c>
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d9fa      	bls.n	80099c2 <_free_r+0x42>
 80099cc:	6811      	ldr	r1, [r2, #0]
 80099ce:	1850      	adds	r0, r2, r1
 80099d0:	42a0      	cmp	r0, r4
 80099d2:	d10b      	bne.n	80099ec <_free_r+0x6c>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	4401      	add	r1, r0
 80099d8:	1850      	adds	r0, r2, r1
 80099da:	4283      	cmp	r3, r0
 80099dc:	6011      	str	r1, [r2, #0]
 80099de:	d1e0      	bne.n	80099a2 <_free_r+0x22>
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	6053      	str	r3, [r2, #4]
 80099e6:	4408      	add	r0, r1
 80099e8:	6010      	str	r0, [r2, #0]
 80099ea:	e7da      	b.n	80099a2 <_free_r+0x22>
 80099ec:	d902      	bls.n	80099f4 <_free_r+0x74>
 80099ee:	230c      	movs	r3, #12
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	e7d6      	b.n	80099a2 <_free_r+0x22>
 80099f4:	6820      	ldr	r0, [r4, #0]
 80099f6:	1821      	adds	r1, r4, r0
 80099f8:	428b      	cmp	r3, r1
 80099fa:	bf04      	itt	eq
 80099fc:	6819      	ldreq	r1, [r3, #0]
 80099fe:	685b      	ldreq	r3, [r3, #4]
 8009a00:	6063      	str	r3, [r4, #4]
 8009a02:	bf04      	itt	eq
 8009a04:	1809      	addeq	r1, r1, r0
 8009a06:	6021      	streq	r1, [r4, #0]
 8009a08:	6054      	str	r4, [r2, #4]
 8009a0a:	e7ca      	b.n	80099a2 <_free_r+0x22>
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000a04 	.word	0x20000a04

08009a14 <_Balloc>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	69c6      	ldr	r6, [r0, #28]
 8009a18:	4604      	mov	r4, r0
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	b976      	cbnz	r6, 8009a3c <_Balloc+0x28>
 8009a1e:	2010      	movs	r0, #16
 8009a20:	f7fe f86a 	bl	8007af8 <malloc>
 8009a24:	4602      	mov	r2, r0
 8009a26:	61e0      	str	r0, [r4, #28]
 8009a28:	b920      	cbnz	r0, 8009a34 <_Balloc+0x20>
 8009a2a:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <_Balloc+0x78>)
 8009a2c:	4818      	ldr	r0, [pc, #96]	@ (8009a90 <_Balloc+0x7c>)
 8009a2e:	216b      	movs	r1, #107	@ 0x6b
 8009a30:	f7ff f92e 	bl	8008c90 <__assert_func>
 8009a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a38:	6006      	str	r6, [r0, #0]
 8009a3a:	60c6      	str	r6, [r0, #12]
 8009a3c:	69e6      	ldr	r6, [r4, #28]
 8009a3e:	68f3      	ldr	r3, [r6, #12]
 8009a40:	b183      	cbz	r3, 8009a64 <_Balloc+0x50>
 8009a42:	69e3      	ldr	r3, [r4, #28]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a4a:	b9b8      	cbnz	r0, 8009a7c <_Balloc+0x68>
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a52:	1d72      	adds	r2, r6, #5
 8009a54:	0092      	lsls	r2, r2, #2
 8009a56:	4620      	mov	r0, r4
 8009a58:	f001 fa55 	bl	800af06 <_calloc_r>
 8009a5c:	b160      	cbz	r0, 8009a78 <_Balloc+0x64>
 8009a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a62:	e00e      	b.n	8009a82 <_Balloc+0x6e>
 8009a64:	2221      	movs	r2, #33	@ 0x21
 8009a66:	2104      	movs	r1, #4
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f001 fa4c 	bl	800af06 <_calloc_r>
 8009a6e:	69e3      	ldr	r3, [r4, #28]
 8009a70:	60f0      	str	r0, [r6, #12]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e4      	bne.n	8009a42 <_Balloc+0x2e>
 8009a78:	2000      	movs	r0, #0
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	6802      	ldr	r2, [r0, #0]
 8009a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a82:	2300      	movs	r3, #0
 8009a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a88:	e7f7      	b.n	8009a7a <_Balloc+0x66>
 8009a8a:	bf00      	nop
 8009a8c:	0800e847 	.word	0x0800e847
 8009a90:	0800e96a 	.word	0x0800e96a

08009a94 <_Bfree>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	69c6      	ldr	r6, [r0, #28]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b976      	cbnz	r6, 8009abc <_Bfree+0x28>
 8009a9e:	2010      	movs	r0, #16
 8009aa0:	f7fe f82a 	bl	8007af8 <malloc>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	61e8      	str	r0, [r5, #28]
 8009aa8:	b920      	cbnz	r0, 8009ab4 <_Bfree+0x20>
 8009aaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ad0 <_Bfree+0x3c>)
 8009aac:	4809      	ldr	r0, [pc, #36]	@ (8009ad4 <_Bfree+0x40>)
 8009aae:	218f      	movs	r1, #143	@ 0x8f
 8009ab0:	f7ff f8ee 	bl	8008c90 <__assert_func>
 8009ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab8:	6006      	str	r6, [r0, #0]
 8009aba:	60c6      	str	r6, [r0, #12]
 8009abc:	b13c      	cbz	r4, 8009ace <_Bfree+0x3a>
 8009abe:	69eb      	ldr	r3, [r5, #28]
 8009ac0:	6862      	ldr	r2, [r4, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ac8:	6021      	str	r1, [r4, #0]
 8009aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	0800e847 	.word	0x0800e847
 8009ad4:	0800e96a 	.word	0x0800e96a

08009ad8 <__multadd>:
 8009ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009adc:	690d      	ldr	r5, [r1, #16]
 8009ade:	4607      	mov	r7, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	461e      	mov	r6, r3
 8009ae4:	f101 0c14 	add.w	ip, r1, #20
 8009ae8:	2000      	movs	r0, #0
 8009aea:	f8dc 3000 	ldr.w	r3, [ip]
 8009aee:	b299      	uxth	r1, r3
 8009af0:	fb02 6101 	mla	r1, r2, r1, r6
 8009af4:	0c1e      	lsrs	r6, r3, #16
 8009af6:	0c0b      	lsrs	r3, r1, #16
 8009af8:	fb02 3306 	mla	r3, r2, r6, r3
 8009afc:	b289      	uxth	r1, r1
 8009afe:	3001      	adds	r0, #1
 8009b00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b04:	4285      	cmp	r5, r0
 8009b06:	f84c 1b04 	str.w	r1, [ip], #4
 8009b0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b0e:	dcec      	bgt.n	8009aea <__multadd+0x12>
 8009b10:	b30e      	cbz	r6, 8009b56 <__multadd+0x7e>
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	dc19      	bgt.n	8009b4c <__multadd+0x74>
 8009b18:	6861      	ldr	r1, [r4, #4]
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	f7ff ff79 	bl	8009a14 <_Balloc>
 8009b22:	4680      	mov	r8, r0
 8009b24:	b928      	cbnz	r0, 8009b32 <__multadd+0x5a>
 8009b26:	4602      	mov	r2, r0
 8009b28:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <__multadd+0x84>)
 8009b2a:	480d      	ldr	r0, [pc, #52]	@ (8009b60 <__multadd+0x88>)
 8009b2c:	21ba      	movs	r1, #186	@ 0xba
 8009b2e:	f7ff f8af 	bl	8008c90 <__assert_func>
 8009b32:	6922      	ldr	r2, [r4, #16]
 8009b34:	3202      	adds	r2, #2
 8009b36:	f104 010c 	add.w	r1, r4, #12
 8009b3a:	0092      	lsls	r2, r2, #2
 8009b3c:	300c      	adds	r0, #12
 8009b3e:	f7ff f898 	bl	8008c72 <memcpy>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff ffa5 	bl	8009a94 <_Bfree>
 8009b4a:	4644      	mov	r4, r8
 8009b4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b50:	3501      	adds	r5, #1
 8009b52:	615e      	str	r6, [r3, #20]
 8009b54:	6125      	str	r5, [r4, #16]
 8009b56:	4620      	mov	r0, r4
 8009b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5c:	0800e959 	.word	0x0800e959
 8009b60:	0800e96a 	.word	0x0800e96a

08009b64 <__hi0bits>:
 8009b64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b68:	4603      	mov	r3, r0
 8009b6a:	bf36      	itet	cc
 8009b6c:	0403      	lslcc	r3, r0, #16
 8009b6e:	2000      	movcs	r0, #0
 8009b70:	2010      	movcc	r0, #16
 8009b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b76:	bf3c      	itt	cc
 8009b78:	021b      	lslcc	r3, r3, #8
 8009b7a:	3008      	addcc	r0, #8
 8009b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b80:	bf3c      	itt	cc
 8009b82:	011b      	lslcc	r3, r3, #4
 8009b84:	3004      	addcc	r0, #4
 8009b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b8a:	bf3c      	itt	cc
 8009b8c:	009b      	lslcc	r3, r3, #2
 8009b8e:	3002      	addcc	r0, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	db05      	blt.n	8009ba0 <__hi0bits+0x3c>
 8009b94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b98:	f100 0001 	add.w	r0, r0, #1
 8009b9c:	bf08      	it	eq
 8009b9e:	2020      	moveq	r0, #32
 8009ba0:	4770      	bx	lr

08009ba2 <__lo0bits>:
 8009ba2:	6803      	ldr	r3, [r0, #0]
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	f013 0007 	ands.w	r0, r3, #7
 8009baa:	d00b      	beq.n	8009bc4 <__lo0bits+0x22>
 8009bac:	07d9      	lsls	r1, r3, #31
 8009bae:	d421      	bmi.n	8009bf4 <__lo0bits+0x52>
 8009bb0:	0798      	lsls	r0, r3, #30
 8009bb2:	bf49      	itett	mi
 8009bb4:	085b      	lsrmi	r3, r3, #1
 8009bb6:	089b      	lsrpl	r3, r3, #2
 8009bb8:	2001      	movmi	r0, #1
 8009bba:	6013      	strmi	r3, [r2, #0]
 8009bbc:	bf5c      	itt	pl
 8009bbe:	6013      	strpl	r3, [r2, #0]
 8009bc0:	2002      	movpl	r0, #2
 8009bc2:	4770      	bx	lr
 8009bc4:	b299      	uxth	r1, r3
 8009bc6:	b909      	cbnz	r1, 8009bcc <__lo0bits+0x2a>
 8009bc8:	0c1b      	lsrs	r3, r3, #16
 8009bca:	2010      	movs	r0, #16
 8009bcc:	b2d9      	uxtb	r1, r3
 8009bce:	b909      	cbnz	r1, 8009bd4 <__lo0bits+0x32>
 8009bd0:	3008      	adds	r0, #8
 8009bd2:	0a1b      	lsrs	r3, r3, #8
 8009bd4:	0719      	lsls	r1, r3, #28
 8009bd6:	bf04      	itt	eq
 8009bd8:	091b      	lsreq	r3, r3, #4
 8009bda:	3004      	addeq	r0, #4
 8009bdc:	0799      	lsls	r1, r3, #30
 8009bde:	bf04      	itt	eq
 8009be0:	089b      	lsreq	r3, r3, #2
 8009be2:	3002      	addeq	r0, #2
 8009be4:	07d9      	lsls	r1, r3, #31
 8009be6:	d403      	bmi.n	8009bf0 <__lo0bits+0x4e>
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	f100 0001 	add.w	r0, r0, #1
 8009bee:	d003      	beq.n	8009bf8 <__lo0bits+0x56>
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	4770      	bx	lr
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4770      	bx	lr
 8009bf8:	2020      	movs	r0, #32
 8009bfa:	4770      	bx	lr

08009bfc <__i2b>:
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	460c      	mov	r4, r1
 8009c00:	2101      	movs	r1, #1
 8009c02:	f7ff ff07 	bl	8009a14 <_Balloc>
 8009c06:	4602      	mov	r2, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <__i2b+0x1a>
 8009c0a:	4b05      	ldr	r3, [pc, #20]	@ (8009c20 <__i2b+0x24>)
 8009c0c:	4805      	ldr	r0, [pc, #20]	@ (8009c24 <__i2b+0x28>)
 8009c0e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c12:	f7ff f83d 	bl	8008c90 <__assert_func>
 8009c16:	2301      	movs	r3, #1
 8009c18:	6144      	str	r4, [r0, #20]
 8009c1a:	6103      	str	r3, [r0, #16]
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800e959 	.word	0x0800e959
 8009c24:	0800e96a 	.word	0x0800e96a

08009c28 <__multiply>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	4617      	mov	r7, r2
 8009c2e:	690a      	ldr	r2, [r1, #16]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bfa8      	it	ge
 8009c36:	463b      	movge	r3, r7
 8009c38:	4689      	mov	r9, r1
 8009c3a:	bfa4      	itt	ge
 8009c3c:	460f      	movge	r7, r1
 8009c3e:	4699      	movge	r9, r3
 8009c40:	693d      	ldr	r5, [r7, #16]
 8009c42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	eb05 060a 	add.w	r6, r5, sl
 8009c4e:	42b3      	cmp	r3, r6
 8009c50:	b085      	sub	sp, #20
 8009c52:	bfb8      	it	lt
 8009c54:	3101      	addlt	r1, #1
 8009c56:	f7ff fedd 	bl	8009a14 <_Balloc>
 8009c5a:	b930      	cbnz	r0, 8009c6a <__multiply+0x42>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4b41      	ldr	r3, [pc, #260]	@ (8009d64 <__multiply+0x13c>)
 8009c60:	4841      	ldr	r0, [pc, #260]	@ (8009d68 <__multiply+0x140>)
 8009c62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c66:	f7ff f813 	bl	8008c90 <__assert_func>
 8009c6a:	f100 0414 	add.w	r4, r0, #20
 8009c6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009c72:	4623      	mov	r3, r4
 8009c74:	2200      	movs	r2, #0
 8009c76:	4573      	cmp	r3, lr
 8009c78:	d320      	bcc.n	8009cbc <__multiply+0x94>
 8009c7a:	f107 0814 	add.w	r8, r7, #20
 8009c7e:	f109 0114 	add.w	r1, r9, #20
 8009c82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009c86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	1beb      	subs	r3, r5, r7
 8009c8e:	3b15      	subs	r3, #21
 8009c90:	f023 0303 	bic.w	r3, r3, #3
 8009c94:	3304      	adds	r3, #4
 8009c96:	3715      	adds	r7, #21
 8009c98:	42bd      	cmp	r5, r7
 8009c9a:	bf38      	it	cc
 8009c9c:	2304      	movcc	r3, #4
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	9b02      	ldr	r3, [sp, #8]
 8009ca2:	9103      	str	r1, [sp, #12]
 8009ca4:	428b      	cmp	r3, r1
 8009ca6:	d80c      	bhi.n	8009cc2 <__multiply+0x9a>
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	dd03      	ble.n	8009cb4 <__multiply+0x8c>
 8009cac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d055      	beq.n	8009d60 <__multiply+0x138>
 8009cb4:	6106      	str	r6, [r0, #16]
 8009cb6:	b005      	add	sp, #20
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	f843 2b04 	str.w	r2, [r3], #4
 8009cc0:	e7d9      	b.n	8009c76 <__multiply+0x4e>
 8009cc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cc6:	f1ba 0f00 	cmp.w	sl, #0
 8009cca:	d01f      	beq.n	8009d0c <__multiply+0xe4>
 8009ccc:	46c4      	mov	ip, r8
 8009cce:	46a1      	mov	r9, r4
 8009cd0:	2700      	movs	r7, #0
 8009cd2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8009cda:	fa1f fb82 	uxth.w	fp, r2
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ce4:	443b      	add	r3, r7
 8009ce6:	f8d9 7000 	ldr.w	r7, [r9]
 8009cea:	0c12      	lsrs	r2, r2, #16
 8009cec:	0c3f      	lsrs	r7, r7, #16
 8009cee:	fb0a 7202 	mla	r2, sl, r2, r7
 8009cf2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cfc:	4565      	cmp	r5, ip
 8009cfe:	f849 3b04 	str.w	r3, [r9], #4
 8009d02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009d06:	d8e4      	bhi.n	8009cd2 <__multiply+0xaa>
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	50e7      	str	r7, [r4, r3]
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d12:	3104      	adds	r1, #4
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	d020      	beq.n	8009d5c <__multiply+0x134>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	4647      	mov	r7, r8
 8009d1e:	46a4      	mov	ip, r4
 8009d20:	f04f 0a00 	mov.w	sl, #0
 8009d24:	f8b7 b000 	ldrh.w	fp, [r7]
 8009d28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009d2c:	fb09 220b 	mla	r2, r9, fp, r2
 8009d30:	4452      	add	r2, sl
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d38:	f84c 3b04 	str.w	r3, [ip], #4
 8009d3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d44:	f8bc 3000 	ldrh.w	r3, [ip]
 8009d48:	fb09 330a 	mla	r3, r9, sl, r3
 8009d4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009d50:	42bd      	cmp	r5, r7
 8009d52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d56:	d8e5      	bhi.n	8009d24 <__multiply+0xfc>
 8009d58:	9a01      	ldr	r2, [sp, #4]
 8009d5a:	50a3      	str	r3, [r4, r2]
 8009d5c:	3404      	adds	r4, #4
 8009d5e:	e79f      	b.n	8009ca0 <__multiply+0x78>
 8009d60:	3e01      	subs	r6, #1
 8009d62:	e7a1      	b.n	8009ca8 <__multiply+0x80>
 8009d64:	0800e959 	.word	0x0800e959
 8009d68:	0800e96a 	.word	0x0800e96a

08009d6c <__pow5mult>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	4615      	mov	r5, r2
 8009d72:	f012 0203 	ands.w	r2, r2, #3
 8009d76:	4607      	mov	r7, r0
 8009d78:	460e      	mov	r6, r1
 8009d7a:	d007      	beq.n	8009d8c <__pow5mult+0x20>
 8009d7c:	4c25      	ldr	r4, [pc, #148]	@ (8009e14 <__pow5mult+0xa8>)
 8009d7e:	3a01      	subs	r2, #1
 8009d80:	2300      	movs	r3, #0
 8009d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d86:	f7ff fea7 	bl	8009ad8 <__multadd>
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	10ad      	asrs	r5, r5, #2
 8009d8e:	d03d      	beq.n	8009e0c <__pow5mult+0xa0>
 8009d90:	69fc      	ldr	r4, [r7, #28]
 8009d92:	b97c      	cbnz	r4, 8009db4 <__pow5mult+0x48>
 8009d94:	2010      	movs	r0, #16
 8009d96:	f7fd feaf 	bl	8007af8 <malloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	61f8      	str	r0, [r7, #28]
 8009d9e:	b928      	cbnz	r0, 8009dac <__pow5mult+0x40>
 8009da0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e18 <__pow5mult+0xac>)
 8009da2:	481e      	ldr	r0, [pc, #120]	@ (8009e1c <__pow5mult+0xb0>)
 8009da4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009da8:	f7fe ff72 	bl	8008c90 <__assert_func>
 8009dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009db0:	6004      	str	r4, [r0, #0]
 8009db2:	60c4      	str	r4, [r0, #12]
 8009db4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dbc:	b94c      	cbnz	r4, 8009dd2 <__pow5mult+0x66>
 8009dbe:	f240 2171 	movw	r1, #625	@ 0x271
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f7ff ff1a 	bl	8009bfc <__i2b>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dce:	4604      	mov	r4, r0
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	f04f 0900 	mov.w	r9, #0
 8009dd6:	07eb      	lsls	r3, r5, #31
 8009dd8:	d50a      	bpl.n	8009df0 <__pow5mult+0x84>
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4638      	mov	r0, r7
 8009de0:	f7ff ff22 	bl	8009c28 <__multiply>
 8009de4:	4631      	mov	r1, r6
 8009de6:	4680      	mov	r8, r0
 8009de8:	4638      	mov	r0, r7
 8009dea:	f7ff fe53 	bl	8009a94 <_Bfree>
 8009dee:	4646      	mov	r6, r8
 8009df0:	106d      	asrs	r5, r5, #1
 8009df2:	d00b      	beq.n	8009e0c <__pow5mult+0xa0>
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	b938      	cbnz	r0, 8009e08 <__pow5mult+0x9c>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ff13 	bl	8009c28 <__multiply>
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	f8c0 9000 	str.w	r9, [r0]
 8009e08:	4604      	mov	r4, r0
 8009e0a:	e7e4      	b.n	8009dd6 <__pow5mult+0x6a>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e12:	bf00      	nop
 8009e14:	0800e9fc 	.word	0x0800e9fc
 8009e18:	0800e847 	.word	0x0800e847
 8009e1c:	0800e96a 	.word	0x0800e96a

08009e20 <__lshift>:
 8009e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	6849      	ldr	r1, [r1, #4]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e2e:	68a3      	ldr	r3, [r4, #8]
 8009e30:	4607      	mov	r7, r0
 8009e32:	4691      	mov	r9, r2
 8009e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e38:	f108 0601 	add.w	r6, r8, #1
 8009e3c:	42b3      	cmp	r3, r6
 8009e3e:	db0b      	blt.n	8009e58 <__lshift+0x38>
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff fde7 	bl	8009a14 <_Balloc>
 8009e46:	4605      	mov	r5, r0
 8009e48:	b948      	cbnz	r0, 8009e5e <__lshift+0x3e>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	4b28      	ldr	r3, [pc, #160]	@ (8009ef0 <__lshift+0xd0>)
 8009e4e:	4829      	ldr	r0, [pc, #164]	@ (8009ef4 <__lshift+0xd4>)
 8009e50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e54:	f7fe ff1c 	bl	8008c90 <__assert_func>
 8009e58:	3101      	adds	r1, #1
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	e7ee      	b.n	8009e3c <__lshift+0x1c>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f100 0114 	add.w	r1, r0, #20
 8009e64:	f100 0210 	add.w	r2, r0, #16
 8009e68:	4618      	mov	r0, r3
 8009e6a:	4553      	cmp	r3, sl
 8009e6c:	db33      	blt.n	8009ed6 <__lshift+0xb6>
 8009e6e:	6920      	ldr	r0, [r4, #16]
 8009e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e74:	f104 0314 	add.w	r3, r4, #20
 8009e78:	f019 091f 	ands.w	r9, r9, #31
 8009e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e84:	d02b      	beq.n	8009ede <__lshift+0xbe>
 8009e86:	f1c9 0e20 	rsb	lr, r9, #32
 8009e8a:	468a      	mov	sl, r1
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	fa00 f009 	lsl.w	r0, r0, r9
 8009e94:	4310      	orrs	r0, r2
 8009e96:	f84a 0b04 	str.w	r0, [sl], #4
 8009e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9e:	459c      	cmp	ip, r3
 8009ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ea4:	d8f3      	bhi.n	8009e8e <__lshift+0x6e>
 8009ea6:	ebac 0304 	sub.w	r3, ip, r4
 8009eaa:	3b15      	subs	r3, #21
 8009eac:	f023 0303 	bic.w	r3, r3, #3
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	f104 0015 	add.w	r0, r4, #21
 8009eb6:	4560      	cmp	r0, ip
 8009eb8:	bf88      	it	hi
 8009eba:	2304      	movhi	r3, #4
 8009ebc:	50ca      	str	r2, [r1, r3]
 8009ebe:	b10a      	cbz	r2, 8009ec4 <__lshift+0xa4>
 8009ec0:	f108 0602 	add.w	r6, r8, #2
 8009ec4:	3e01      	subs	r6, #1
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	612e      	str	r6, [r5, #16]
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f7ff fde2 	bl	8009a94 <_Bfree>
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eda:	3301      	adds	r3, #1
 8009edc:	e7c5      	b.n	8009e6a <__lshift+0x4a>
 8009ede:	3904      	subs	r1, #4
 8009ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ee8:	459c      	cmp	ip, r3
 8009eea:	d8f9      	bhi.n	8009ee0 <__lshift+0xc0>
 8009eec:	e7ea      	b.n	8009ec4 <__lshift+0xa4>
 8009eee:	bf00      	nop
 8009ef0:	0800e959 	.word	0x0800e959
 8009ef4:	0800e96a 	.word	0x0800e96a

08009ef8 <__mcmp>:
 8009ef8:	690a      	ldr	r2, [r1, #16]
 8009efa:	4603      	mov	r3, r0
 8009efc:	6900      	ldr	r0, [r0, #16]
 8009efe:	1a80      	subs	r0, r0, r2
 8009f00:	b530      	push	{r4, r5, lr}
 8009f02:	d10e      	bne.n	8009f22 <__mcmp+0x2a>
 8009f04:	3314      	adds	r3, #20
 8009f06:	3114      	adds	r1, #20
 8009f08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f18:	4295      	cmp	r5, r2
 8009f1a:	d003      	beq.n	8009f24 <__mcmp+0x2c>
 8009f1c:	d205      	bcs.n	8009f2a <__mcmp+0x32>
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d3f3      	bcc.n	8009f10 <__mcmp+0x18>
 8009f28:	e7fb      	b.n	8009f22 <__mcmp+0x2a>
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	e7f9      	b.n	8009f22 <__mcmp+0x2a>
	...

08009f30 <__mdiff>:
 8009f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	4689      	mov	r9, r1
 8009f36:	4606      	mov	r6, r0
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4648      	mov	r0, r9
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	f7ff ffdb 	bl	8009ef8 <__mcmp>
 8009f42:	1e05      	subs	r5, r0, #0
 8009f44:	d112      	bne.n	8009f6c <__mdiff+0x3c>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7ff fd63 	bl	8009a14 <_Balloc>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	b928      	cbnz	r0, 8009f5e <__mdiff+0x2e>
 8009f52:	4b3f      	ldr	r3, [pc, #252]	@ (800a050 <__mdiff+0x120>)
 8009f54:	f240 2137 	movw	r1, #567	@ 0x237
 8009f58:	483e      	ldr	r0, [pc, #248]	@ (800a054 <__mdiff+0x124>)
 8009f5a:	f7fe fe99 	bl	8008c90 <__assert_func>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f64:	4610      	mov	r0, r2
 8009f66:	b003      	add	sp, #12
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	bfbc      	itt	lt
 8009f6e:	464b      	movlt	r3, r9
 8009f70:	46a1      	movlt	r9, r4
 8009f72:	4630      	mov	r0, r6
 8009f74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f78:	bfba      	itte	lt
 8009f7a:	461c      	movlt	r4, r3
 8009f7c:	2501      	movlt	r5, #1
 8009f7e:	2500      	movge	r5, #0
 8009f80:	f7ff fd48 	bl	8009a14 <_Balloc>
 8009f84:	4602      	mov	r2, r0
 8009f86:	b918      	cbnz	r0, 8009f90 <__mdiff+0x60>
 8009f88:	4b31      	ldr	r3, [pc, #196]	@ (800a050 <__mdiff+0x120>)
 8009f8a:	f240 2145 	movw	r1, #581	@ 0x245
 8009f8e:	e7e3      	b.n	8009f58 <__mdiff+0x28>
 8009f90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f94:	6926      	ldr	r6, [r4, #16]
 8009f96:	60c5      	str	r5, [r0, #12]
 8009f98:	f109 0310 	add.w	r3, r9, #16
 8009f9c:	f109 0514 	add.w	r5, r9, #20
 8009fa0:	f104 0e14 	add.w	lr, r4, #20
 8009fa4:	f100 0b14 	add.w	fp, r0, #20
 8009fa8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	46d9      	mov	r9, fp
 8009fb4:	f04f 0c00 	mov.w	ip, #0
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	fa1f f38a 	uxth.w	r3, sl
 8009fc8:	4619      	mov	r1, r3
 8009fca:	b283      	uxth	r3, r0
 8009fcc:	1acb      	subs	r3, r1, r3
 8009fce:	0c00      	lsrs	r0, r0, #16
 8009fd0:	4463      	add	r3, ip
 8009fd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009fd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fe0:	4576      	cmp	r6, lr
 8009fe2:	f849 3b04 	str.w	r3, [r9], #4
 8009fe6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fea:	d8e5      	bhi.n	8009fb8 <__mdiff+0x88>
 8009fec:	1b33      	subs	r3, r6, r4
 8009fee:	3b15      	subs	r3, #21
 8009ff0:	f023 0303 	bic.w	r3, r3, #3
 8009ff4:	3415      	adds	r4, #21
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	42a6      	cmp	r6, r4
 8009ffa:	bf38      	it	cc
 8009ffc:	2304      	movcc	r3, #4
 8009ffe:	441d      	add	r5, r3
 800a000:	445b      	add	r3, fp
 800a002:	461e      	mov	r6, r3
 800a004:	462c      	mov	r4, r5
 800a006:	4544      	cmp	r4, r8
 800a008:	d30e      	bcc.n	800a028 <__mdiff+0xf8>
 800a00a:	f108 0103 	add.w	r1, r8, #3
 800a00e:	1b49      	subs	r1, r1, r5
 800a010:	f021 0103 	bic.w	r1, r1, #3
 800a014:	3d03      	subs	r5, #3
 800a016:	45a8      	cmp	r8, r5
 800a018:	bf38      	it	cc
 800a01a:	2100      	movcc	r1, #0
 800a01c:	440b      	add	r3, r1
 800a01e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a022:	b191      	cbz	r1, 800a04a <__mdiff+0x11a>
 800a024:	6117      	str	r7, [r2, #16]
 800a026:	e79d      	b.n	8009f64 <__mdiff+0x34>
 800a028:	f854 1b04 	ldr.w	r1, [r4], #4
 800a02c:	46e6      	mov	lr, ip
 800a02e:	0c08      	lsrs	r0, r1, #16
 800a030:	fa1c fc81 	uxtah	ip, ip, r1
 800a034:	4471      	add	r1, lr
 800a036:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a03a:	b289      	uxth	r1, r1
 800a03c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a040:	f846 1b04 	str.w	r1, [r6], #4
 800a044:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a048:	e7dd      	b.n	800a006 <__mdiff+0xd6>
 800a04a:	3f01      	subs	r7, #1
 800a04c:	e7e7      	b.n	800a01e <__mdiff+0xee>
 800a04e:	bf00      	nop
 800a050:	0800e959 	.word	0x0800e959
 800a054:	0800e96a 	.word	0x0800e96a

0800a058 <__d2b>:
 800a058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a05c:	460f      	mov	r7, r1
 800a05e:	2101      	movs	r1, #1
 800a060:	ec59 8b10 	vmov	r8, r9, d0
 800a064:	4616      	mov	r6, r2
 800a066:	f7ff fcd5 	bl	8009a14 <_Balloc>
 800a06a:	4604      	mov	r4, r0
 800a06c:	b930      	cbnz	r0, 800a07c <__d2b+0x24>
 800a06e:	4602      	mov	r2, r0
 800a070:	4b23      	ldr	r3, [pc, #140]	@ (800a100 <__d2b+0xa8>)
 800a072:	4824      	ldr	r0, [pc, #144]	@ (800a104 <__d2b+0xac>)
 800a074:	f240 310f 	movw	r1, #783	@ 0x30f
 800a078:	f7fe fe0a 	bl	8008c90 <__assert_func>
 800a07c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a084:	b10d      	cbz	r5, 800a08a <__d2b+0x32>
 800a086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	f1b8 0300 	subs.w	r3, r8, #0
 800a090:	d023      	beq.n	800a0da <__d2b+0x82>
 800a092:	4668      	mov	r0, sp
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	f7ff fd84 	bl	8009ba2 <__lo0bits>
 800a09a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a09e:	b1d0      	cbz	r0, 800a0d6 <__d2b+0x7e>
 800a0a0:	f1c0 0320 	rsb	r3, r0, #32
 800a0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	40c2      	lsrs	r2, r0
 800a0ac:	6163      	str	r3, [r4, #20]
 800a0ae:	9201      	str	r2, [sp, #4]
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	61a3      	str	r3, [r4, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2201      	moveq	r2, #1
 800a0ba:	2202      	movne	r2, #2
 800a0bc:	6122      	str	r2, [r4, #16]
 800a0be:	b1a5      	cbz	r5, 800a0ea <__d2b+0x92>
 800a0c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0c4:	4405      	add	r5, r0
 800a0c6:	603d      	str	r5, [r7, #0]
 800a0c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0cc:	6030      	str	r0, [r6, #0]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	b003      	add	sp, #12
 800a0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0d6:	6161      	str	r1, [r4, #20]
 800a0d8:	e7ea      	b.n	800a0b0 <__d2b+0x58>
 800a0da:	a801      	add	r0, sp, #4
 800a0dc:	f7ff fd61 	bl	8009ba2 <__lo0bits>
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	6163      	str	r3, [r4, #20]
 800a0e4:	3020      	adds	r0, #32
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	e7e8      	b.n	800a0bc <__d2b+0x64>
 800a0ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0f2:	6038      	str	r0, [r7, #0]
 800a0f4:	6918      	ldr	r0, [r3, #16]
 800a0f6:	f7ff fd35 	bl	8009b64 <__hi0bits>
 800a0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0fe:	e7e5      	b.n	800a0cc <__d2b+0x74>
 800a100:	0800e959 	.word	0x0800e959
 800a104:	0800e96a 	.word	0x0800e96a

0800a108 <__sfputc_r>:
 800a108:	6893      	ldr	r3, [r2, #8]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	b410      	push	{r4}
 800a110:	6093      	str	r3, [r2, #8]
 800a112:	da08      	bge.n	800a126 <__sfputc_r+0x1e>
 800a114:	6994      	ldr	r4, [r2, #24]
 800a116:	42a3      	cmp	r3, r4
 800a118:	db01      	blt.n	800a11e <__sfputc_r+0x16>
 800a11a:	290a      	cmp	r1, #10
 800a11c:	d103      	bne.n	800a126 <__sfputc_r+0x1e>
 800a11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a122:	f7fe bc0a 	b.w	800893a <__swbuf_r>
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	1c58      	adds	r0, r3, #1
 800a12a:	6010      	str	r0, [r2, #0]
 800a12c:	7019      	strb	r1, [r3, #0]
 800a12e:	4608      	mov	r0, r1
 800a130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <__sfputs_r>:
 800a136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	18d5      	adds	r5, r2, r3
 800a140:	42ac      	cmp	r4, r5
 800a142:	d101      	bne.n	800a148 <__sfputs_r+0x12>
 800a144:	2000      	movs	r0, #0
 800a146:	e007      	b.n	800a158 <__sfputs_r+0x22>
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	463a      	mov	r2, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ffda 	bl	800a108 <__sfputc_r>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d1f3      	bne.n	800a140 <__sfputs_r+0xa>
 800a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a15c <_vfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	460d      	mov	r5, r1
 800a162:	b09d      	sub	sp, #116	@ 0x74
 800a164:	4614      	mov	r4, r2
 800a166:	4698      	mov	r8, r3
 800a168:	4606      	mov	r6, r0
 800a16a:	b118      	cbz	r0, 800a174 <_vfiprintf_r+0x18>
 800a16c:	6a03      	ldr	r3, [r0, #32]
 800a16e:	b90b      	cbnz	r3, 800a174 <_vfiprintf_r+0x18>
 800a170:	f7fe fae8 	bl	8008744 <__sinit>
 800a174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	d405      	bmi.n	800a186 <_vfiprintf_r+0x2a>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	059a      	lsls	r2, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_vfiprintf_r+0x2a>
 800a180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a182:	f7fe fd74 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	071b      	lsls	r3, r3, #28
 800a18a:	d501      	bpl.n	800a190 <_vfiprintf_r+0x34>
 800a18c:	692b      	ldr	r3, [r5, #16]
 800a18e:	b99b      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x5c>
 800a190:	4629      	mov	r1, r5
 800a192:	4630      	mov	r0, r6
 800a194:	f7fe fc10 	bl	80089b8 <__swsetup_r>
 800a198:	b170      	cbz	r0, 800a1b8 <_vfiprintf_r+0x5c>
 800a19a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a19c:	07dc      	lsls	r4, r3, #31
 800a19e:	d504      	bpl.n	800a1aa <_vfiprintf_r+0x4e>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	b01d      	add	sp, #116	@ 0x74
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	0598      	lsls	r0, r3, #22
 800a1ae:	d4f7      	bmi.n	800a1a0 <_vfiprintf_r+0x44>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b2:	f7fe fd5d 	bl	8008c70 <__retarget_lock_release_recursive>
 800a1b6:	e7f3      	b.n	800a1a0 <_vfiprintf_r+0x44>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c6:	2330      	movs	r3, #48	@ 0x30
 800a1c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a378 <_vfiprintf_r+0x21c>
 800a1cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1d0:	f04f 0901 	mov.w	r9, #1
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	469a      	mov	sl, r3
 800a1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1dc:	b10a      	cbz	r2, 800a1e2 <_vfiprintf_r+0x86>
 800a1de:	2a25      	cmp	r2, #37	@ 0x25
 800a1e0:	d1f9      	bne.n	800a1d6 <_vfiprintf_r+0x7a>
 800a1e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e6:	d00b      	beq.n	800a200 <_vfiprintf_r+0xa4>
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ffa1 	bl	800a136 <__sfputs_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f000 80a7 	beq.w	800a348 <_vfiprintf_r+0x1ec>
 800a1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1fc:	445a      	add	r2, fp
 800a1fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a200:	f89a 3000 	ldrb.w	r3, [sl]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 809f 	beq.w	800a348 <_vfiprintf_r+0x1ec>
 800a20a:	2300      	movs	r3, #0
 800a20c:	f04f 32ff 	mov.w	r2, #4294967295
 800a210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a214:	f10a 0a01 	add.w	sl, sl, #1
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a220:	931a      	str	r3, [sp, #104]	@ 0x68
 800a222:	4654      	mov	r4, sl
 800a224:	2205      	movs	r2, #5
 800a226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22a:	4853      	ldr	r0, [pc, #332]	@ (800a378 <_vfiprintf_r+0x21c>)
 800a22c:	f7f5 ffd0 	bl	80001d0 <memchr>
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	b9d8      	cbnz	r0, 800a26c <_vfiprintf_r+0x110>
 800a234:	06d1      	lsls	r1, r2, #27
 800a236:	bf44      	itt	mi
 800a238:	2320      	movmi	r3, #32
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a23e:	0713      	lsls	r3, r2, #28
 800a240:	bf44      	itt	mi
 800a242:	232b      	movmi	r3, #43	@ 0x2b
 800a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a248:	f89a 3000 	ldrb.w	r3, [sl]
 800a24c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a24e:	d015      	beq.n	800a27c <_vfiprintf_r+0x120>
 800a250:	9a07      	ldr	r2, [sp, #28]
 800a252:	4654      	mov	r4, sl
 800a254:	2000      	movs	r0, #0
 800a256:	f04f 0c0a 	mov.w	ip, #10
 800a25a:	4621      	mov	r1, r4
 800a25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a260:	3b30      	subs	r3, #48	@ 0x30
 800a262:	2b09      	cmp	r3, #9
 800a264:	d94b      	bls.n	800a2fe <_vfiprintf_r+0x1a2>
 800a266:	b1b0      	cbz	r0, 800a296 <_vfiprintf_r+0x13a>
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	e014      	b.n	800a296 <_vfiprintf_r+0x13a>
 800a26c:	eba0 0308 	sub.w	r3, r0, r8
 800a270:	fa09 f303 	lsl.w	r3, r9, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	46a2      	mov	sl, r4
 800a27a:	e7d2      	b.n	800a222 <_vfiprintf_r+0xc6>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d19      	adds	r1, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9103      	str	r1, [sp, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfbb      	ittet	lt
 800a288:	425b      	neglt	r3, r3
 800a28a:	f042 0202 	orrlt.w	r2, r2, #2
 800a28e:	9307      	strge	r3, [sp, #28]
 800a290:	9307      	strlt	r3, [sp, #28]
 800a292:	bfb8      	it	lt
 800a294:	9204      	strlt	r2, [sp, #16]
 800a296:	7823      	ldrb	r3, [r4, #0]
 800a298:	2b2e      	cmp	r3, #46	@ 0x2e
 800a29a:	d10a      	bne.n	800a2b2 <_vfiprintf_r+0x156>
 800a29c:	7863      	ldrb	r3, [r4, #1]
 800a29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a0:	d132      	bne.n	800a308 <_vfiprintf_r+0x1ac>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	1d1a      	adds	r2, r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9203      	str	r2, [sp, #12]
 800a2aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2ae:	3402      	adds	r4, #2
 800a2b0:	9305      	str	r3, [sp, #20]
 800a2b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a388 <_vfiprintf_r+0x22c>
 800a2b6:	7821      	ldrb	r1, [r4, #0]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	f7f5 ff88 	bl	80001d0 <memchr>
 800a2c0:	b138      	cbz	r0, 800a2d2 <_vfiprintf_r+0x176>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	eba0 000a 	sub.w	r0, r0, sl
 800a2c8:	2240      	movs	r2, #64	@ 0x40
 800a2ca:	4082      	lsls	r2, r0
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d6:	4829      	ldr	r0, [pc, #164]	@ (800a37c <_vfiprintf_r+0x220>)
 800a2d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2dc:	2206      	movs	r2, #6
 800a2de:	f7f5 ff77 	bl	80001d0 <memchr>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d03f      	beq.n	800a366 <_vfiprintf_r+0x20a>
 800a2e6:	4b26      	ldr	r3, [pc, #152]	@ (800a380 <_vfiprintf_r+0x224>)
 800a2e8:	bb1b      	cbnz	r3, 800a332 <_vfiprintf_r+0x1d6>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	3307      	adds	r3, #7
 800a2ee:	f023 0307 	bic.w	r3, r3, #7
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	443b      	add	r3, r7
 800a2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2fc:	e76a      	b.n	800a1d4 <_vfiprintf_r+0x78>
 800a2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a302:	460c      	mov	r4, r1
 800a304:	2001      	movs	r0, #1
 800a306:	e7a8      	b.n	800a25a <_vfiprintf_r+0xfe>
 800a308:	2300      	movs	r3, #0
 800a30a:	3401      	adds	r4, #1
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	4619      	mov	r1, r3
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4620      	mov	r0, r4
 800a316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31a:	3a30      	subs	r2, #48	@ 0x30
 800a31c:	2a09      	cmp	r2, #9
 800a31e:	d903      	bls.n	800a328 <_vfiprintf_r+0x1cc>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0c6      	beq.n	800a2b2 <_vfiprintf_r+0x156>
 800a324:	9105      	str	r1, [sp, #20]
 800a326:	e7c4      	b.n	800a2b2 <_vfiprintf_r+0x156>
 800a328:	fb0c 2101 	mla	r1, ip, r1, r2
 800a32c:	4604      	mov	r4, r0
 800a32e:	2301      	movs	r3, #1
 800a330:	e7f0      	b.n	800a314 <_vfiprintf_r+0x1b8>
 800a332:	ab03      	add	r3, sp, #12
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	462a      	mov	r2, r5
 800a338:	4b12      	ldr	r3, [pc, #72]	@ (800a384 <_vfiprintf_r+0x228>)
 800a33a:	a904      	add	r1, sp, #16
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7fd fdbf 	bl	8007ec0 <_printf_float>
 800a342:	4607      	mov	r7, r0
 800a344:	1c78      	adds	r0, r7, #1
 800a346:	d1d6      	bne.n	800a2f6 <_vfiprintf_r+0x19a>
 800a348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a34a:	07d9      	lsls	r1, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_vfiprintf_r+0x1fe>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	059a      	lsls	r2, r3, #22
 800a352:	d402      	bmi.n	800a35a <_vfiprintf_r+0x1fe>
 800a354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a356:	f7fe fc8b 	bl	8008c70 <__retarget_lock_release_recursive>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	065b      	lsls	r3, r3, #25
 800a35e:	f53f af1f 	bmi.w	800a1a0 <_vfiprintf_r+0x44>
 800a362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a364:	e71e      	b.n	800a1a4 <_vfiprintf_r+0x48>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <_vfiprintf_r+0x228>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4630      	mov	r0, r6
 800a372:	f7fe f83d 	bl	80083f0 <_printf_i>
 800a376:	e7e4      	b.n	800a342 <_vfiprintf_r+0x1e6>
 800a378:	0800e9c3 	.word	0x0800e9c3
 800a37c:	0800e9cd 	.word	0x0800e9cd
 800a380:	08007ec1 	.word	0x08007ec1
 800a384:	0800a137 	.word	0x0800a137
 800a388:	0800e9c9 	.word	0x0800e9c9

0800a38c <__svfiscanf_r>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	461d      	mov	r5, r3
 800a392:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a394:	07df      	lsls	r7, r3, #31
 800a396:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a39a:	4606      	mov	r6, r0
 800a39c:	460c      	mov	r4, r1
 800a39e:	4692      	mov	sl, r2
 800a3a0:	d405      	bmi.n	800a3ae <__svfiscanf_r+0x22>
 800a3a2:	898b      	ldrh	r3, [r1, #12]
 800a3a4:	0598      	lsls	r0, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <__svfiscanf_r+0x22>
 800a3a8:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800a3aa:	f7fe fc60 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 800a3b4:	4ba8      	ldr	r3, [pc, #672]	@ (800a658 <__svfiscanf_r+0x2cc>)
 800a3b6:	93a0      	str	r3, [sp, #640]	@ 0x280
 800a3b8:	f10d 0804 	add.w	r8, sp, #4
 800a3bc:	4ba7      	ldr	r3, [pc, #668]	@ (800a65c <__svfiscanf_r+0x2d0>)
 800a3be:	4fa8      	ldr	r7, [pc, #672]	@ (800a660 <__svfiscanf_r+0x2d4>)
 800a3c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a3c4:	93a1      	str	r3, [sp, #644]	@ 0x284
 800a3c6:	9500      	str	r5, [sp, #0]
 800a3c8:	f89a 9000 	ldrb.w	r9, [sl]
 800a3cc:	f1b9 0f00 	cmp.w	r9, #0
 800a3d0:	f000 816d 	beq.w	800a6ae <__svfiscanf_r+0x322>
 800a3d4:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a3d8:	f013 0308 	ands.w	r3, r3, #8
 800a3dc:	f10a 0501 	add.w	r5, sl, #1
 800a3e0:	d019      	beq.n	800a416 <__svfiscanf_r+0x8a>
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd0f      	ble.n	800a408 <__svfiscanf_r+0x7c>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	5cba      	ldrb	r2, [r7, r2]
 800a3ee:	0711      	lsls	r1, r2, #28
 800a3f0:	d401      	bmi.n	800a3f6 <__svfiscanf_r+0x6a>
 800a3f2:	46aa      	mov	sl, r5
 800a3f4:	e7e8      	b.n	800a3c8 <__svfiscanf_r+0x3c>
 800a3f6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	9245      	str	r2, [sp, #276]	@ 0x114
 800a3fc:	6862      	ldr	r2, [r4, #4]
 800a3fe:	3301      	adds	r3, #1
 800a400:	3a01      	subs	r2, #1
 800a402:	6062      	str	r2, [r4, #4]
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	e7ec      	b.n	800a3e2 <__svfiscanf_r+0x56>
 800a408:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a40a:	4621      	mov	r1, r4
 800a40c:	4630      	mov	r0, r6
 800a40e:	4798      	blx	r3
 800a410:	2800      	cmp	r0, #0
 800a412:	d0e9      	beq.n	800a3e8 <__svfiscanf_r+0x5c>
 800a414:	e7ed      	b.n	800a3f2 <__svfiscanf_r+0x66>
 800a416:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a41a:	f040 8088 	bne.w	800a52e <__svfiscanf_r+0x1a2>
 800a41e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a420:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a422:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a426:	2b2a      	cmp	r3, #42	@ 0x2a
 800a428:	bf02      	ittt	eq
 800a42a:	2310      	moveq	r3, #16
 800a42c:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a42e:	f10a 0502 	addeq.w	r5, sl, #2
 800a432:	220a      	movs	r2, #10
 800a434:	46aa      	mov	sl, r5
 800a436:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a43a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d91f      	bls.n	800a482 <__svfiscanf_r+0xf6>
 800a442:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a664 <__svfiscanf_r+0x2d8>
 800a446:	2203      	movs	r2, #3
 800a448:	4658      	mov	r0, fp
 800a44a:	f7f5 fec1 	bl	80001d0 <memchr>
 800a44e:	b138      	cbz	r0, 800a460 <__svfiscanf_r+0xd4>
 800a450:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a452:	eba0 000b 	sub.w	r0, r0, fp
 800a456:	2301      	movs	r3, #1
 800a458:	4083      	lsls	r3, r0
 800a45a:	4313      	orrs	r3, r2
 800a45c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a45e:	4655      	mov	r5, sl
 800a460:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a464:	2b78      	cmp	r3, #120	@ 0x78
 800a466:	d807      	bhi.n	800a478 <__svfiscanf_r+0xec>
 800a468:	2b57      	cmp	r3, #87	@ 0x57
 800a46a:	d811      	bhi.n	800a490 <__svfiscanf_r+0x104>
 800a46c:	2b25      	cmp	r3, #37	@ 0x25
 800a46e:	d05e      	beq.n	800a52e <__svfiscanf_r+0x1a2>
 800a470:	d858      	bhi.n	800a524 <__svfiscanf_r+0x198>
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80d2 	beq.w	800a61c <__svfiscanf_r+0x290>
 800a478:	2303      	movs	r3, #3
 800a47a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a47c:	230a      	movs	r3, #10
 800a47e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a480:	e08f      	b.n	800a5a2 <__svfiscanf_r+0x216>
 800a482:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a484:	fb02 1103 	mla	r1, r2, r3, r1
 800a488:	3930      	subs	r1, #48	@ 0x30
 800a48a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a48c:	4655      	mov	r5, sl
 800a48e:	e7d1      	b.n	800a434 <__svfiscanf_r+0xa8>
 800a490:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a494:	2a20      	cmp	r2, #32
 800a496:	d8ef      	bhi.n	800a478 <__svfiscanf_r+0xec>
 800a498:	a101      	add	r1, pc, #4	@ (adr r1, 800a4a0 <__svfiscanf_r+0x114>)
 800a49a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a581 	.word	0x0800a581
 800a4a4:	0800a479 	.word	0x0800a479
 800a4a8:	0800a479 	.word	0x0800a479
 800a4ac:	0800a5db 	.word	0x0800a5db
 800a4b0:	0800a479 	.word	0x0800a479
 800a4b4:	0800a479 	.word	0x0800a479
 800a4b8:	0800a479 	.word	0x0800a479
 800a4bc:	0800a479 	.word	0x0800a479
 800a4c0:	0800a479 	.word	0x0800a479
 800a4c4:	0800a479 	.word	0x0800a479
 800a4c8:	0800a479 	.word	0x0800a479
 800a4cc:	0800a5f1 	.word	0x0800a5f1
 800a4d0:	0800a5d7 	.word	0x0800a5d7
 800a4d4:	0800a52b 	.word	0x0800a52b
 800a4d8:	0800a52b 	.word	0x0800a52b
 800a4dc:	0800a52b 	.word	0x0800a52b
 800a4e0:	0800a479 	.word	0x0800a479
 800a4e4:	0800a593 	.word	0x0800a593
 800a4e8:	0800a479 	.word	0x0800a479
 800a4ec:	0800a479 	.word	0x0800a479
 800a4f0:	0800a479 	.word	0x0800a479
 800a4f4:	0800a479 	.word	0x0800a479
 800a4f8:	0800a601 	.word	0x0800a601
 800a4fc:	0800a59b 	.word	0x0800a59b
 800a500:	0800a579 	.word	0x0800a579
 800a504:	0800a479 	.word	0x0800a479
 800a508:	0800a479 	.word	0x0800a479
 800a50c:	0800a5fd 	.word	0x0800a5fd
 800a510:	0800a479 	.word	0x0800a479
 800a514:	0800a5d7 	.word	0x0800a5d7
 800a518:	0800a479 	.word	0x0800a479
 800a51c:	0800a479 	.word	0x0800a479
 800a520:	0800a581 	.word	0x0800a581
 800a524:	3b45      	subs	r3, #69	@ 0x45
 800a526:	2b02      	cmp	r3, #2
 800a528:	d8a6      	bhi.n	800a478 <__svfiscanf_r+0xec>
 800a52a:	2305      	movs	r3, #5
 800a52c:	e038      	b.n	800a5a0 <__svfiscanf_r+0x214>
 800a52e:	6863      	ldr	r3, [r4, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	dd0d      	ble.n	800a550 <__svfiscanf_r+0x1c4>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	454a      	cmp	r2, r9
 800a53a:	f040 80b8 	bne.w	800a6ae <__svfiscanf_r+0x322>
 800a53e:	3301      	adds	r3, #1
 800a540:	6862      	ldr	r2, [r4, #4]
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a546:	3a01      	subs	r2, #1
 800a548:	3301      	adds	r3, #1
 800a54a:	6062      	str	r2, [r4, #4]
 800a54c:	9345      	str	r3, [sp, #276]	@ 0x114
 800a54e:	e750      	b.n	800a3f2 <__svfiscanf_r+0x66>
 800a550:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a552:	4621      	mov	r1, r4
 800a554:	4630      	mov	r0, r6
 800a556:	4798      	blx	r3
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0eb      	beq.n	800a534 <__svfiscanf_r+0x1a8>
 800a55c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a55e:	07da      	lsls	r2, r3, #31
 800a560:	f140 809d 	bpl.w	800a69e <__svfiscanf_r+0x312>
 800a564:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a566:	2800      	cmp	r0, #0
 800a568:	d061      	beq.n	800a62e <__svfiscanf_r+0x2a2>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	0659      	lsls	r1, r3, #25
 800a56e:	d45e      	bmi.n	800a62e <__svfiscanf_r+0x2a2>
 800a570:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a57a:	f042 0220 	orr.w	r2, r2, #32
 800a57e:	9241      	str	r2, [sp, #260]	@ 0x104
 800a580:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a586:	9241      	str	r2, [sp, #260]	@ 0x104
 800a588:	2210      	movs	r2, #16
 800a58a:	2b6e      	cmp	r3, #110	@ 0x6e
 800a58c:	9242      	str	r2, [sp, #264]	@ 0x108
 800a58e:	d902      	bls.n	800a596 <__svfiscanf_r+0x20a>
 800a590:	e005      	b.n	800a59e <__svfiscanf_r+0x212>
 800a592:	2300      	movs	r3, #0
 800a594:	9342      	str	r3, [sp, #264]	@ 0x108
 800a596:	2303      	movs	r3, #3
 800a598:	e002      	b.n	800a5a0 <__svfiscanf_r+0x214>
 800a59a:	2308      	movs	r3, #8
 800a59c:	9342      	str	r3, [sp, #264]	@ 0x108
 800a59e:	2304      	movs	r3, #4
 800a5a0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a5a2:	6863      	ldr	r3, [r4, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd45      	ble.n	800a634 <__svfiscanf_r+0x2a8>
 800a5a8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5aa:	0659      	lsls	r1, r3, #25
 800a5ac:	d404      	bmi.n	800a5b8 <__svfiscanf_r+0x22c>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	5cba      	ldrb	r2, [r7, r2]
 800a5b4:	0712      	lsls	r2, r2, #28
 800a5b6:	d444      	bmi.n	800a642 <__svfiscanf_r+0x2b6>
 800a5b8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	dc5b      	bgt.n	800a676 <__svfiscanf_r+0x2ea>
 800a5be:	466b      	mov	r3, sp
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	a941      	add	r1, sp, #260	@ 0x104
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f893 	bl	800a6f0 <_scanf_chars>
 800a5ca:	2801      	cmp	r0, #1
 800a5cc:	d06f      	beq.n	800a6ae <__svfiscanf_r+0x322>
 800a5ce:	2802      	cmp	r0, #2
 800a5d0:	f47f af0f 	bne.w	800a3f2 <__svfiscanf_r+0x66>
 800a5d4:	e7c2      	b.n	800a55c <__svfiscanf_r+0x1d0>
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	e7d7      	b.n	800a58a <__svfiscanf_r+0x1fe>
 800a5da:	4629      	mov	r1, r5
 800a5dc:	4640      	mov	r0, r8
 800a5de:	f000 fb77 	bl	800acd0 <__sccl>
 800a5e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5e8:	9341      	str	r3, [sp, #260]	@ 0x104
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e7d7      	b.n	800a5a0 <__svfiscanf_r+0x214>
 800a5f0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f6:	9341      	str	r3, [sp, #260]	@ 0x104
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e7d1      	b.n	800a5a0 <__svfiscanf_r+0x214>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	e7cf      	b.n	800a5a0 <__svfiscanf_r+0x214>
 800a600:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a602:	06c3      	lsls	r3, r0, #27
 800a604:	f53f aef5 	bmi.w	800a3f2 <__svfiscanf_r+0x66>
 800a608:	9b00      	ldr	r3, [sp, #0]
 800a60a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a60c:	1d19      	adds	r1, r3, #4
 800a60e:	9100      	str	r1, [sp, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	07c0      	lsls	r0, r0, #31
 800a614:	bf4c      	ite	mi
 800a616:	801a      	strhmi	r2, [r3, #0]
 800a618:	601a      	strpl	r2, [r3, #0]
 800a61a:	e6ea      	b.n	800a3f2 <__svfiscanf_r+0x66>
 800a61c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a61e:	07de      	lsls	r6, r3, #31
 800a620:	d405      	bmi.n	800a62e <__svfiscanf_r+0x2a2>
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	059d      	lsls	r5, r3, #22
 800a626:	d402      	bmi.n	800a62e <__svfiscanf_r+0x2a2>
 800a628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a62a:	f7fe fb21 	bl	8008c70 <__retarget_lock_release_recursive>
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295
 800a632:	e79d      	b.n	800a570 <__svfiscanf_r+0x1e4>
 800a634:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a636:	4621      	mov	r1, r4
 800a638:	4630      	mov	r0, r6
 800a63a:	4798      	blx	r3
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d0b3      	beq.n	800a5a8 <__svfiscanf_r+0x21c>
 800a640:	e78c      	b.n	800a55c <__svfiscanf_r+0x1d0>
 800a642:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a644:	3201      	adds	r2, #1
 800a646:	9245      	str	r2, [sp, #276]	@ 0x114
 800a648:	6862      	ldr	r2, [r4, #4]
 800a64a:	3a01      	subs	r2, #1
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	6062      	str	r2, [r4, #4]
 800a650:	dd0a      	ble.n	800a668 <__svfiscanf_r+0x2dc>
 800a652:	3301      	adds	r3, #1
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	e7aa      	b.n	800a5ae <__svfiscanf_r+0x222>
 800a658:	0800adb7 	.word	0x0800adb7
 800a65c:	0800abe9 	.word	0x0800abe9
 800a660:	0800e715 	.word	0x0800e715
 800a664:	0800e9c9 	.word	0x0800e9c9
 800a668:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a66a:	4621      	mov	r1, r4
 800a66c:	4630      	mov	r0, r6
 800a66e:	4798      	blx	r3
 800a670:	2800      	cmp	r0, #0
 800a672:	d09c      	beq.n	800a5ae <__svfiscanf_r+0x222>
 800a674:	e772      	b.n	800a55c <__svfiscanf_r+0x1d0>
 800a676:	2b04      	cmp	r3, #4
 800a678:	dc06      	bgt.n	800a688 <__svfiscanf_r+0x2fc>
 800a67a:	466b      	mov	r3, sp
 800a67c:	4622      	mov	r2, r4
 800a67e:	a941      	add	r1, sp, #260	@ 0x104
 800a680:	4630      	mov	r0, r6
 800a682:	f000 f88f 	bl	800a7a4 <_scanf_i>
 800a686:	e7a0      	b.n	800a5ca <__svfiscanf_r+0x23e>
 800a688:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c4 <__svfiscanf_r+0x338>)
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f43f aeb1 	beq.w	800a3f2 <__svfiscanf_r+0x66>
 800a690:	466b      	mov	r3, sp
 800a692:	4622      	mov	r2, r4
 800a694:	a941      	add	r1, sp, #260	@ 0x104
 800a696:	4630      	mov	r0, r6
 800a698:	f3af 8000 	nop.w
 800a69c:	e795      	b.n	800a5ca <__svfiscanf_r+0x23e>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	0598      	lsls	r0, r3, #22
 800a6a2:	f53f af5f 	bmi.w	800a564 <__svfiscanf_r+0x1d8>
 800a6a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6a8:	f7fe fae2 	bl	8008c70 <__retarget_lock_release_recursive>
 800a6ac:	e75a      	b.n	800a564 <__svfiscanf_r+0x1d8>
 800a6ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6b0:	07da      	lsls	r2, r3, #31
 800a6b2:	d405      	bmi.n	800a6c0 <__svfiscanf_r+0x334>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	059b      	lsls	r3, r3, #22
 800a6b8:	d402      	bmi.n	800a6c0 <__svfiscanf_r+0x334>
 800a6ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6bc:	f7fe fad8 	bl	8008c70 <__retarget_lock_release_recursive>
 800a6c0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6c2:	e755      	b.n	800a570 <__svfiscanf_r+0x1e4>
 800a6c4:	00000000 	.word	0x00000000

0800a6c8 <_vfiscanf_r>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	b118      	cbz	r0, 800a6de <_vfiscanf_r+0x16>
 800a6d6:	6a03      	ldr	r3, [r0, #32]
 800a6d8:	b90b      	cbnz	r3, 800a6de <_vfiscanf_r+0x16>
 800a6da:	f7fe f833 	bl	8008744 <__sinit>
 800a6de:	463b      	mov	r3, r7
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	f7ff be4f 	b.w	800a38c <__svfiscanf_r>
	...

0800a6f0 <_scanf_chars>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	688a      	ldr	r2, [r1, #8]
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b932      	cbnz	r2, 800a70c <_scanf_chars+0x1c>
 800a6fe:	698a      	ldr	r2, [r1, #24]
 800a700:	2a00      	cmp	r2, #0
 800a702:	bf14      	ite	ne
 800a704:	f04f 32ff 	movne.w	r2, #4294967295
 800a708:	2201      	moveq	r2, #1
 800a70a:	608a      	str	r2, [r1, #8]
 800a70c:	6822      	ldr	r2, [r4, #0]
 800a70e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a7a0 <_scanf_chars+0xb0>
 800a712:	06d1      	lsls	r1, r2, #27
 800a714:	bf5f      	itttt	pl
 800a716:	681a      	ldrpl	r2, [r3, #0]
 800a718:	1d11      	addpl	r1, r2, #4
 800a71a:	6019      	strpl	r1, [r3, #0]
 800a71c:	6816      	ldrpl	r6, [r2, #0]
 800a71e:	2700      	movs	r7, #0
 800a720:	69a0      	ldr	r0, [r4, #24]
 800a722:	b188      	cbz	r0, 800a748 <_scanf_chars+0x58>
 800a724:	2801      	cmp	r0, #1
 800a726:	d107      	bne.n	800a738 <_scanf_chars+0x48>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	6963      	ldr	r3, [r4, #20]
 800a72e:	5c9b      	ldrb	r3, [r3, r2]
 800a730:	b953      	cbnz	r3, 800a748 <_scanf_chars+0x58>
 800a732:	2f00      	cmp	r7, #0
 800a734:	d031      	beq.n	800a79a <_scanf_chars+0xaa>
 800a736:	e022      	b.n	800a77e <_scanf_chars+0x8e>
 800a738:	2802      	cmp	r0, #2
 800a73a:	d120      	bne.n	800a77e <_scanf_chars+0x8e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a744:	071b      	lsls	r3, r3, #28
 800a746:	d41a      	bmi.n	800a77e <_scanf_chars+0x8e>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	06da      	lsls	r2, r3, #27
 800a74c:	bf5e      	ittt	pl
 800a74e:	682b      	ldrpl	r3, [r5, #0]
 800a750:	781b      	ldrbpl	r3, [r3, #0]
 800a752:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a756:	682a      	ldr	r2, [r5, #0]
 800a758:	686b      	ldr	r3, [r5, #4]
 800a75a:	3201      	adds	r2, #1
 800a75c:	602a      	str	r2, [r5, #0]
 800a75e:	68a2      	ldr	r2, [r4, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	3a01      	subs	r2, #1
 800a764:	606b      	str	r3, [r5, #4]
 800a766:	3701      	adds	r7, #1
 800a768:	60a2      	str	r2, [r4, #8]
 800a76a:	b142      	cbz	r2, 800a77e <_scanf_chars+0x8e>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dcd7      	bgt.n	800a720 <_scanf_chars+0x30>
 800a770:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a774:	4629      	mov	r1, r5
 800a776:	4640      	mov	r0, r8
 800a778:	4798      	blx	r3
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d0d0      	beq.n	800a720 <_scanf_chars+0x30>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	f013 0310 	ands.w	r3, r3, #16
 800a784:	d105      	bne.n	800a792 <_scanf_chars+0xa2>
 800a786:	68e2      	ldr	r2, [r4, #12]
 800a788:	3201      	adds	r2, #1
 800a78a:	60e2      	str	r2, [r4, #12]
 800a78c:	69a2      	ldr	r2, [r4, #24]
 800a78e:	b102      	cbz	r2, 800a792 <_scanf_chars+0xa2>
 800a790:	7033      	strb	r3, [r6, #0]
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	443b      	add	r3, r7
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	2000      	movs	r0, #0
 800a79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800e715 	.word	0x0800e715

0800a7a4 <_scanf_i>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	4698      	mov	r8, r3
 800a7aa:	4b74      	ldr	r3, [pc, #464]	@ (800a97c <_scanf_i+0x1d8>)
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	4616      	mov	r6, r2
 800a7b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	ab03      	add	r3, sp, #12
 800a7ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a7be:	4b70      	ldr	r3, [pc, #448]	@ (800a980 <_scanf_i+0x1dc>)
 800a7c0:	69a1      	ldr	r1, [r4, #24]
 800a7c2:	4a70      	ldr	r2, [pc, #448]	@ (800a984 <_scanf_i+0x1e0>)
 800a7c4:	2903      	cmp	r1, #3
 800a7c6:	bf08      	it	eq
 800a7c8:	461a      	moveq	r2, r3
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	9201      	str	r2, [sp, #4]
 800a7ce:	1e5a      	subs	r2, r3, #1
 800a7d0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7d4:	bf88      	it	hi
 800a7d6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7da:	4627      	mov	r7, r4
 800a7dc:	bf82      	ittt	hi
 800a7de:	eb03 0905 	addhi.w	r9, r3, r5
 800a7e2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7e6:	60a3      	strhi	r3, [r4, #8]
 800a7e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a7ec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a7f0:	bf98      	it	ls
 800a7f2:	f04f 0900 	movls.w	r9, #0
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	463d      	mov	r5, r7
 800a7fa:	f04f 0b00 	mov.w	fp, #0
 800a7fe:	6831      	ldr	r1, [r6, #0]
 800a800:	ab03      	add	r3, sp, #12
 800a802:	7809      	ldrb	r1, [r1, #0]
 800a804:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a808:	2202      	movs	r2, #2
 800a80a:	f7f5 fce1 	bl	80001d0 <memchr>
 800a80e:	b328      	cbz	r0, 800a85c <_scanf_i+0xb8>
 800a810:	f1bb 0f01 	cmp.w	fp, #1
 800a814:	d159      	bne.n	800a8ca <_scanf_i+0x126>
 800a816:	6862      	ldr	r2, [r4, #4]
 800a818:	b92a      	cbnz	r2, 800a826 <_scanf_i+0x82>
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	2108      	movs	r1, #8
 800a81e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a822:	6061      	str	r1, [r4, #4]
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	68a2      	ldr	r2, [r4, #8]
 800a830:	1e51      	subs	r1, r2, #1
 800a832:	60a1      	str	r1, [r4, #8]
 800a834:	b192      	cbz	r2, 800a85c <_scanf_i+0xb8>
 800a836:	6832      	ldr	r2, [r6, #0]
 800a838:	1c51      	adds	r1, r2, #1
 800a83a:	6031      	str	r1, [r6, #0]
 800a83c:	7812      	ldrb	r2, [r2, #0]
 800a83e:	f805 2b01 	strb.w	r2, [r5], #1
 800a842:	6872      	ldr	r2, [r6, #4]
 800a844:	3a01      	subs	r2, #1
 800a846:	2a00      	cmp	r2, #0
 800a848:	6072      	str	r2, [r6, #4]
 800a84a:	dc07      	bgt.n	800a85c <_scanf_i+0xb8>
 800a84c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a850:	4631      	mov	r1, r6
 800a852:	4650      	mov	r0, sl
 800a854:	4790      	blx	r2
 800a856:	2800      	cmp	r0, #0
 800a858:	f040 8085 	bne.w	800a966 <_scanf_i+0x1c2>
 800a85c:	f10b 0b01 	add.w	fp, fp, #1
 800a860:	f1bb 0f03 	cmp.w	fp, #3
 800a864:	d1cb      	bne.n	800a7fe <_scanf_i+0x5a>
 800a866:	6863      	ldr	r3, [r4, #4]
 800a868:	b90b      	cbnz	r3, 800a86e <_scanf_i+0xca>
 800a86a:	230a      	movs	r3, #10
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	4945      	ldr	r1, [pc, #276]	@ (800a988 <_scanf_i+0x1e4>)
 800a872:	6960      	ldr	r0, [r4, #20]
 800a874:	1ac9      	subs	r1, r1, r3
 800a876:	f000 fa2b 	bl	800acd0 <__sccl>
 800a87a:	f04f 0b00 	mov.w	fp, #0
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d03d      	beq.n	800a902 <_scanf_i+0x15e>
 800a886:	6831      	ldr	r1, [r6, #0]
 800a888:	6960      	ldr	r0, [r4, #20]
 800a88a:	f891 c000 	ldrb.w	ip, [r1]
 800a88e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a892:	2800      	cmp	r0, #0
 800a894:	d035      	beq.n	800a902 <_scanf_i+0x15e>
 800a896:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a89a:	d124      	bne.n	800a8e6 <_scanf_i+0x142>
 800a89c:	0510      	lsls	r0, r2, #20
 800a89e:	d522      	bpl.n	800a8e6 <_scanf_i+0x142>
 800a8a0:	f10b 0b01 	add.w	fp, fp, #1
 800a8a4:	f1b9 0f00 	cmp.w	r9, #0
 800a8a8:	d003      	beq.n	800a8b2 <_scanf_i+0x10e>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	6873      	ldr	r3, [r6, #4]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	6073      	str	r3, [r6, #4]
 800a8ba:	dd1b      	ble.n	800a8f4 <_scanf_i+0x150>
 800a8bc:	6833      	ldr	r3, [r6, #0]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	6033      	str	r3, [r6, #0]
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	60a3      	str	r3, [r4, #8]
 800a8c8:	e7d9      	b.n	800a87e <_scanf_i+0xda>
 800a8ca:	f1bb 0f02 	cmp.w	fp, #2
 800a8ce:	d1ae      	bne.n	800a82e <_scanf_i+0x8a>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a8d6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a8da:	d1c4      	bne.n	800a866 <_scanf_i+0xc2>
 800a8dc:	2110      	movs	r1, #16
 800a8de:	6061      	str	r1, [r4, #4]
 800a8e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8e4:	e7a2      	b.n	800a82c <_scanf_i+0x88>
 800a8e6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	780b      	ldrb	r3, [r1, #0]
 800a8ee:	f805 3b01 	strb.w	r3, [r5], #1
 800a8f2:	e7de      	b.n	800a8b2 <_scanf_i+0x10e>
 800a8f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4798      	blx	r3
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d0df      	beq.n	800a8c2 <_scanf_i+0x11e>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	05d9      	lsls	r1, r3, #23
 800a906:	d50d      	bpl.n	800a924 <_scanf_i+0x180>
 800a908:	42bd      	cmp	r5, r7
 800a90a:	d909      	bls.n	800a920 <_scanf_i+0x17c>
 800a90c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a910:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a914:	4632      	mov	r2, r6
 800a916:	4650      	mov	r0, sl
 800a918:	4798      	blx	r3
 800a91a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a91e:	464d      	mov	r5, r9
 800a920:	42bd      	cmp	r5, r7
 800a922:	d028      	beq.n	800a976 <_scanf_i+0x1d2>
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	f012 0210 	ands.w	r2, r2, #16
 800a92a:	d113      	bne.n	800a954 <_scanf_i+0x1b0>
 800a92c:	702a      	strb	r2, [r5, #0]
 800a92e:	6863      	ldr	r3, [r4, #4]
 800a930:	9e01      	ldr	r6, [sp, #4]
 800a932:	4639      	mov	r1, r7
 800a934:	4650      	mov	r0, sl
 800a936:	47b0      	blx	r6
 800a938:	f8d8 3000 	ldr.w	r3, [r8]
 800a93c:	6821      	ldr	r1, [r4, #0]
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	f8c8 2000 	str.w	r2, [r8]
 800a944:	f011 0f20 	tst.w	r1, #32
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	d00f      	beq.n	800a96c <_scanf_i+0x1c8>
 800a94c:	6018      	str	r0, [r3, #0]
 800a94e:	68e3      	ldr	r3, [r4, #12]
 800a950:	3301      	adds	r3, #1
 800a952:	60e3      	str	r3, [r4, #12]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	1bed      	subs	r5, r5, r7
 800a958:	445d      	add	r5, fp
 800a95a:	442b      	add	r3, r5
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	2000      	movs	r0, #0
 800a960:	b007      	add	sp, #28
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	f04f 0b00 	mov.w	fp, #0
 800a96a:	e7ca      	b.n	800a902 <_scanf_i+0x15e>
 800a96c:	07ca      	lsls	r2, r1, #31
 800a96e:	bf4c      	ite	mi
 800a970:	8018      	strhmi	r0, [r3, #0]
 800a972:	6018      	strpl	r0, [r3, #0]
 800a974:	e7eb      	b.n	800a94e <_scanf_i+0x1aa>
 800a976:	2001      	movs	r0, #1
 800a978:	e7f2      	b.n	800a960 <_scanf_i+0x1bc>
 800a97a:	bf00      	nop
 800a97c:	0800bed8 	.word	0x0800bed8
 800a980:	08007d69 	.word	0x08007d69
 800a984:	0800b08d 	.word	0x0800b08d
 800a988:	0800e9e4 	.word	0x0800e9e4

0800a98c <__sflush_r>:
 800a98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a994:	0716      	lsls	r6, r2, #28
 800a996:	4605      	mov	r5, r0
 800a998:	460c      	mov	r4, r1
 800a99a:	d454      	bmi.n	800aa46 <__sflush_r+0xba>
 800a99c:	684b      	ldr	r3, [r1, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dc02      	bgt.n	800a9a8 <__sflush_r+0x1c>
 800a9a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dd48      	ble.n	800aa3a <__sflush_r+0xae>
 800a9a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	d045      	beq.n	800aa3a <__sflush_r+0xae>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9b4:	682f      	ldr	r7, [r5, #0]
 800a9b6:	6a21      	ldr	r1, [r4, #32]
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	d030      	beq.n	800aa1e <__sflush_r+0x92>
 800a9bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	0759      	lsls	r1, r3, #29
 800a9c2:	d505      	bpl.n	800a9d0 <__sflush_r+0x44>
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	1ad2      	subs	r2, r2, r3
 800a9c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9ca:	b10b      	cbz	r3, 800a9d0 <__sflush_r+0x44>
 800a9cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9d4:	6a21      	ldr	r1, [r4, #32]
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	47b0      	blx	r6
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	d106      	bne.n	800a9ee <__sflush_r+0x62>
 800a9e0:	6829      	ldr	r1, [r5, #0]
 800a9e2:	291d      	cmp	r1, #29
 800a9e4:	d82b      	bhi.n	800aa3e <__sflush_r+0xb2>
 800a9e6:	4a2a      	ldr	r2, [pc, #168]	@ (800aa90 <__sflush_r+0x104>)
 800a9e8:	40ca      	lsrs	r2, r1
 800a9ea:	07d6      	lsls	r6, r2, #31
 800a9ec:	d527      	bpl.n	800aa3e <__sflush_r+0xb2>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	6062      	str	r2, [r4, #4]
 800a9f2:	04d9      	lsls	r1, r3, #19
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	d504      	bpl.n	800aa04 <__sflush_r+0x78>
 800a9fa:	1c42      	adds	r2, r0, #1
 800a9fc:	d101      	bne.n	800aa02 <__sflush_r+0x76>
 800a9fe:	682b      	ldr	r3, [r5, #0]
 800aa00:	b903      	cbnz	r3, 800aa04 <__sflush_r+0x78>
 800aa02:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa06:	602f      	str	r7, [r5, #0]
 800aa08:	b1b9      	cbz	r1, 800aa3a <__sflush_r+0xae>
 800aa0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa0e:	4299      	cmp	r1, r3
 800aa10:	d002      	beq.n	800aa18 <__sflush_r+0x8c>
 800aa12:	4628      	mov	r0, r5
 800aa14:	f7fe ffb4 	bl	8009980 <_free_r>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa1c:	e00d      	b.n	800aa3a <__sflush_r+0xae>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4628      	mov	r0, r5
 800aa22:	47b0      	blx	r6
 800aa24:	4602      	mov	r2, r0
 800aa26:	1c50      	adds	r0, r2, #1
 800aa28:	d1c9      	bne.n	800a9be <__sflush_r+0x32>
 800aa2a:	682b      	ldr	r3, [r5, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0c6      	beq.n	800a9be <__sflush_r+0x32>
 800aa30:	2b1d      	cmp	r3, #29
 800aa32:	d001      	beq.n	800aa38 <__sflush_r+0xac>
 800aa34:	2b16      	cmp	r3, #22
 800aa36:	d11e      	bne.n	800aa76 <__sflush_r+0xea>
 800aa38:	602f      	str	r7, [r5, #0]
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	e022      	b.n	800aa84 <__sflush_r+0xf8>
 800aa3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa42:	b21b      	sxth	r3, r3
 800aa44:	e01b      	b.n	800aa7e <__sflush_r+0xf2>
 800aa46:	690f      	ldr	r7, [r1, #16]
 800aa48:	2f00      	cmp	r7, #0
 800aa4a:	d0f6      	beq.n	800aa3a <__sflush_r+0xae>
 800aa4c:	0793      	lsls	r3, r2, #30
 800aa4e:	680e      	ldr	r6, [r1, #0]
 800aa50:	bf08      	it	eq
 800aa52:	694b      	ldreq	r3, [r1, #20]
 800aa54:	600f      	str	r7, [r1, #0]
 800aa56:	bf18      	it	ne
 800aa58:	2300      	movne	r3, #0
 800aa5a:	eba6 0807 	sub.w	r8, r6, r7
 800aa5e:	608b      	str	r3, [r1, #8]
 800aa60:	f1b8 0f00 	cmp.w	r8, #0
 800aa64:	dde9      	ble.n	800aa3a <__sflush_r+0xae>
 800aa66:	6a21      	ldr	r1, [r4, #32]
 800aa68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa6a:	4643      	mov	r3, r8
 800aa6c:	463a      	mov	r2, r7
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b0      	blx	r6
 800aa72:	2800      	cmp	r0, #0
 800aa74:	dc08      	bgt.n	800aa88 <__sflush_r+0xfc>
 800aa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	4407      	add	r7, r0
 800aa8a:	eba8 0800 	sub.w	r8, r8, r0
 800aa8e:	e7e7      	b.n	800aa60 <__sflush_r+0xd4>
 800aa90:	20400001 	.word	0x20400001

0800aa94 <_fflush_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	690b      	ldr	r3, [r1, #16]
 800aa98:	4605      	mov	r5, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	b913      	cbnz	r3, 800aaa4 <_fflush_r+0x10>
 800aa9e:	2500      	movs	r5, #0
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	b118      	cbz	r0, 800aaae <_fflush_r+0x1a>
 800aaa6:	6a03      	ldr	r3, [r0, #32]
 800aaa8:	b90b      	cbnz	r3, 800aaae <_fflush_r+0x1a>
 800aaaa:	f7fd fe4b 	bl	8008744 <__sinit>
 800aaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f3      	beq.n	800aa9e <_fflush_r+0xa>
 800aab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aab8:	07d0      	lsls	r0, r2, #31
 800aaba:	d404      	bmi.n	800aac6 <_fflush_r+0x32>
 800aabc:	0599      	lsls	r1, r3, #22
 800aabe:	d402      	bmi.n	800aac6 <_fflush_r+0x32>
 800aac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac2:	f7fe f8d4 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800aac6:	4628      	mov	r0, r5
 800aac8:	4621      	mov	r1, r4
 800aaca:	f7ff ff5f 	bl	800a98c <__sflush_r>
 800aace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aad0:	07da      	lsls	r2, r3, #31
 800aad2:	4605      	mov	r5, r0
 800aad4:	d4e4      	bmi.n	800aaa0 <_fflush_r+0xc>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	059b      	lsls	r3, r3, #22
 800aada:	d4e1      	bmi.n	800aaa0 <_fflush_r+0xc>
 800aadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aade:	f7fe f8c7 	bl	8008c70 <__retarget_lock_release_recursive>
 800aae2:	e7dd      	b.n	800aaa0 <_fflush_r+0xc>

0800aae4 <fiprintf>:
 800aae4:	b40e      	push	{r1, r2, r3}
 800aae6:	b503      	push	{r0, r1, lr}
 800aae8:	4601      	mov	r1, r0
 800aaea:	ab03      	add	r3, sp, #12
 800aaec:	4805      	ldr	r0, [pc, #20]	@ (800ab04 <fiprintf+0x20>)
 800aaee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf2:	6800      	ldr	r0, [r0, #0]
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	f7ff fb31 	bl	800a15c <_vfiprintf_r>
 800aafa:	b002      	add	sp, #8
 800aafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab00:	b003      	add	sp, #12
 800ab02:	4770      	bx	lr
 800ab04:	2000002c 	.word	0x2000002c

0800ab08 <__swhatbuf_r>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab10:	2900      	cmp	r1, #0
 800ab12:	b096      	sub	sp, #88	@ 0x58
 800ab14:	4615      	mov	r5, r2
 800ab16:	461e      	mov	r6, r3
 800ab18:	da0d      	bge.n	800ab36 <__swhatbuf_r+0x2e>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab20:	f04f 0100 	mov.w	r1, #0
 800ab24:	bf14      	ite	ne
 800ab26:	2340      	movne	r3, #64	@ 0x40
 800ab28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	6031      	str	r1, [r6, #0]
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	b016      	add	sp, #88	@ 0x58
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
 800ab36:	466a      	mov	r2, sp
 800ab38:	f000 f9bc 	bl	800aeb4 <_fstat_r>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	dbec      	blt.n	800ab1a <__swhatbuf_r+0x12>
 800ab40:	9901      	ldr	r1, [sp, #4]
 800ab42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab4a:	4259      	negs	r1, r3
 800ab4c:	4159      	adcs	r1, r3
 800ab4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab52:	e7eb      	b.n	800ab2c <__swhatbuf_r+0x24>

0800ab54 <__smakebuf_r>:
 800ab54:	898b      	ldrh	r3, [r1, #12]
 800ab56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab58:	079d      	lsls	r5, r3, #30
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	d507      	bpl.n	800ab70 <__smakebuf_r+0x1c>
 800ab60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	6123      	str	r3, [r4, #16]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	6163      	str	r3, [r4, #20]
 800ab6c:	b003      	add	sp, #12
 800ab6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab70:	ab01      	add	r3, sp, #4
 800ab72:	466a      	mov	r2, sp
 800ab74:	f7ff ffc8 	bl	800ab08 <__swhatbuf_r>
 800ab78:	9f00      	ldr	r7, [sp, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f7fc ffec 	bl	8007b5c <_malloc_r>
 800ab84:	b948      	cbnz	r0, 800ab9a <__smakebuf_r+0x46>
 800ab86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8a:	059a      	lsls	r2, r3, #22
 800ab8c:	d4ee      	bmi.n	800ab6c <__smakebuf_r+0x18>
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	f043 0302 	orr.w	r3, r3, #2
 800ab96:	81a3      	strh	r3, [r4, #12]
 800ab98:	e7e2      	b.n	800ab60 <__smakebuf_r+0xc>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	6020      	str	r0, [r4, #0]
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abaa:	b15b      	cbz	r3, 800abc4 <__smakebuf_r+0x70>
 800abac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abb0:	4630      	mov	r0, r6
 800abb2:	f000 f991 	bl	800aed8 <_isatty_r>
 800abb6:	b128      	cbz	r0, 800abc4 <__smakebuf_r+0x70>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	f043 0301 	orr.w	r3, r3, #1
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	431d      	orrs	r5, r3
 800abc8:	81a5      	strh	r5, [r4, #12]
 800abca:	e7cf      	b.n	800ab6c <__smakebuf_r+0x18>

0800abcc <lflush>:
 800abcc:	898b      	ldrh	r3, [r1, #12]
 800abce:	f003 0309 	and.w	r3, r3, #9
 800abd2:	2b09      	cmp	r3, #9
 800abd4:	d103      	bne.n	800abde <lflush+0x12>
 800abd6:	4b03      	ldr	r3, [pc, #12]	@ (800abe4 <lflush+0x18>)
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	f7ff bf5b 	b.w	800aa94 <_fflush_r>
 800abde:	2000      	movs	r0, #0
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	2000002c 	.word	0x2000002c

0800abe8 <__srefill_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	460c      	mov	r4, r1
 800abec:	4605      	mov	r5, r0
 800abee:	b118      	cbz	r0, 800abf8 <__srefill_r+0x10>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <__srefill_r+0x10>
 800abf4:	f7fd fda6 	bl	8008744 <__sinit>
 800abf8:	2300      	movs	r3, #0
 800abfa:	6063      	str	r3, [r4, #4]
 800abfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac00:	069e      	lsls	r6, r3, #26
 800ac02:	d408      	bmi.n	800ac16 <__srefill_r+0x2e>
 800ac04:	0758      	lsls	r0, r3, #29
 800ac06:	d445      	bmi.n	800ac94 <__srefill_r+0xac>
 800ac08:	06d9      	lsls	r1, r3, #27
 800ac0a:	d407      	bmi.n	800ac1c <__srefill_r+0x34>
 800ac0c:	2209      	movs	r2, #9
 800ac0e:	602a      	str	r2, [r5, #0]
 800ac10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	071a      	lsls	r2, r3, #28
 800ac1e:	d50b      	bpl.n	800ac38 <__srefill_r+0x50>
 800ac20:	4621      	mov	r1, r4
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7ff ff36 	bl	800aa94 <_fflush_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1f4      	bne.n	800ac16 <__srefill_r+0x2e>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	60a0      	str	r0, [r4, #8]
 800ac30:	f023 0308 	bic.w	r3, r3, #8
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	61a0      	str	r0, [r4, #24]
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f043 0304 	orr.w	r3, r3, #4
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	b91b      	cbnz	r3, 800ac4c <__srefill_r+0x64>
 800ac44:	4621      	mov	r1, r4
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7ff ff84 	bl	800ab54 <__smakebuf_r>
 800ac4c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800ac50:	07b3      	lsls	r3, r6, #30
 800ac52:	d00f      	beq.n	800ac74 <__srefill_r+0x8c>
 800ac54:	2301      	movs	r3, #1
 800ac56:	4a1b      	ldr	r2, [pc, #108]	@ (800acc4 <__srefill_r+0xdc>)
 800ac58:	491b      	ldr	r1, [pc, #108]	@ (800acc8 <__srefill_r+0xe0>)
 800ac5a:	481c      	ldr	r0, [pc, #112]	@ (800accc <__srefill_r+0xe4>)
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	f7fd fd89 	bl	8008774 <_fwalk_sglue>
 800ac62:	81a6      	strh	r6, [r4, #12]
 800ac64:	f006 0609 	and.w	r6, r6, #9
 800ac68:	2e09      	cmp	r6, #9
 800ac6a:	d103      	bne.n	800ac74 <__srefill_r+0x8c>
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f7ff fe8c 	bl	800a98c <__sflush_r>
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800ac78:	6963      	ldr	r3, [r4, #20]
 800ac7a:	6a21      	ldr	r1, [r4, #32]
 800ac7c:	6022      	str	r2, [r4, #0]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b0      	blx	r6
 800ac82:	2800      	cmp	r0, #0
 800ac84:	6060      	str	r0, [r4, #4]
 800ac86:	dc17      	bgt.n	800acb8 <__srefill_r+0xd0>
 800ac88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8c:	d116      	bne.n	800acbc <__srefill_r+0xd4>
 800ac8e:	f043 0320 	orr.w	r3, r3, #32
 800ac92:	e7bf      	b.n	800ac14 <__srefill_r+0x2c>
 800ac94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d0d2      	beq.n	800ac40 <__srefill_r+0x58>
 800ac9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d002      	beq.n	800aca8 <__srefill_r+0xc0>
 800aca2:	4628      	mov	r0, r5
 800aca4:	f7fe fe6c 	bl	8009980 <_free_r>
 800aca8:	2300      	movs	r3, #0
 800acaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800acac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acae:	6063      	str	r3, [r4, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0c5      	beq.n	800ac40 <__srefill_r+0x58>
 800acb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	2000      	movs	r0, #0
 800acba:	e7ae      	b.n	800ac1a <__srefill_r+0x32>
 800acbc:	2200      	movs	r2, #0
 800acbe:	6062      	str	r2, [r4, #4]
 800acc0:	e7a6      	b.n	800ac10 <__srefill_r+0x28>
 800acc2:	bf00      	nop
 800acc4:	20000020 	.word	0x20000020
 800acc8:	0800abcd 	.word	0x0800abcd
 800accc:	20000030 	.word	0x20000030

0800acd0 <__sccl>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	780b      	ldrb	r3, [r1, #0]
 800acd4:	4604      	mov	r4, r0
 800acd6:	2b5e      	cmp	r3, #94	@ 0x5e
 800acd8:	bf0b      	itete	eq
 800acda:	784b      	ldrbeq	r3, [r1, #1]
 800acdc:	1c4a      	addne	r2, r1, #1
 800acde:	1c8a      	addeq	r2, r1, #2
 800ace0:	2100      	movne	r1, #0
 800ace2:	bf08      	it	eq
 800ace4:	2101      	moveq	r1, #1
 800ace6:	3801      	subs	r0, #1
 800ace8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800acec:	f800 1f01 	strb.w	r1, [r0, #1]!
 800acf0:	42a8      	cmp	r0, r5
 800acf2:	d1fb      	bne.n	800acec <__sccl+0x1c>
 800acf4:	b90b      	cbnz	r3, 800acfa <__sccl+0x2a>
 800acf6:	1e50      	subs	r0, r2, #1
 800acf8:	bd70      	pop	{r4, r5, r6, pc}
 800acfa:	f081 0101 	eor.w	r1, r1, #1
 800acfe:	54e1      	strb	r1, [r4, r3]
 800ad00:	4610      	mov	r0, r2
 800ad02:	4602      	mov	r2, r0
 800ad04:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad08:	2d2d      	cmp	r5, #45	@ 0x2d
 800ad0a:	d005      	beq.n	800ad18 <__sccl+0x48>
 800ad0c:	2d5d      	cmp	r5, #93	@ 0x5d
 800ad0e:	d016      	beq.n	800ad3e <__sccl+0x6e>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	d0f1      	beq.n	800acf8 <__sccl+0x28>
 800ad14:	462b      	mov	r3, r5
 800ad16:	e7f2      	b.n	800acfe <__sccl+0x2e>
 800ad18:	7846      	ldrb	r6, [r0, #1]
 800ad1a:	2e5d      	cmp	r6, #93	@ 0x5d
 800ad1c:	d0fa      	beq.n	800ad14 <__sccl+0x44>
 800ad1e:	42b3      	cmp	r3, r6
 800ad20:	dcf8      	bgt.n	800ad14 <__sccl+0x44>
 800ad22:	3002      	adds	r0, #2
 800ad24:	461a      	mov	r2, r3
 800ad26:	3201      	adds	r2, #1
 800ad28:	4296      	cmp	r6, r2
 800ad2a:	54a1      	strb	r1, [r4, r2]
 800ad2c:	dcfb      	bgt.n	800ad26 <__sccl+0x56>
 800ad2e:	1af2      	subs	r2, r6, r3
 800ad30:	3a01      	subs	r2, #1
 800ad32:	1c5d      	adds	r5, r3, #1
 800ad34:	42b3      	cmp	r3, r6
 800ad36:	bfa8      	it	ge
 800ad38:	2200      	movge	r2, #0
 800ad3a:	18ab      	adds	r3, r5, r2
 800ad3c:	e7e1      	b.n	800ad02 <__sccl+0x32>
 800ad3e:	4610      	mov	r0, r2
 800ad40:	e7da      	b.n	800acf8 <__sccl+0x28>

0800ad42 <__submore>:
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ad4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	d11d      	bne.n	800ad8e <__submore+0x4c>
 800ad52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ad56:	f7fc ff01 	bl	8007b5c <_malloc_r>
 800ad5a:	b918      	cbnz	r0, 800ad64 <__submore+0x22>
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad68:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad6a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ad6e:	6360      	str	r0, [r4, #52]	@ 0x34
 800ad70:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ad74:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ad78:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ad7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ad80:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ad84:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ad88:	6020      	str	r0, [r4, #0]
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e7e8      	b.n	800ad60 <__submore+0x1e>
 800ad8e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ad90:	0077      	lsls	r7, r6, #1
 800ad92:	463a      	mov	r2, r7
 800ad94:	f000 f8dd 	bl	800af52 <_realloc_r>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0de      	beq.n	800ad5c <__submore+0x1a>
 800ad9e:	eb00 0806 	add.w	r8, r0, r6
 800ada2:	4601      	mov	r1, r0
 800ada4:	4632      	mov	r2, r6
 800ada6:	4640      	mov	r0, r8
 800ada8:	f7fd ff63 	bl	8008c72 <memcpy>
 800adac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800adb0:	f8c4 8000 	str.w	r8, [r4]
 800adb4:	e7e9      	b.n	800ad8a <__submore+0x48>

0800adb6 <_ungetc_r>:
 800adb6:	b570      	push	{r4, r5, r6, lr}
 800adb8:	460d      	mov	r5, r1
 800adba:	1c69      	adds	r1, r5, #1
 800adbc:	4606      	mov	r6, r0
 800adbe:	4614      	mov	r4, r2
 800adc0:	d01e      	beq.n	800ae00 <_ungetc_r+0x4a>
 800adc2:	b118      	cbz	r0, 800adcc <_ungetc_r+0x16>
 800adc4:	6a03      	ldr	r3, [r0, #32]
 800adc6:	b90b      	cbnz	r3, 800adcc <_ungetc_r+0x16>
 800adc8:	f7fd fcbc 	bl	8008744 <__sinit>
 800adcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adce:	07da      	lsls	r2, r3, #31
 800add0:	d405      	bmi.n	800adde <_ungetc_r+0x28>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	059b      	lsls	r3, r3, #22
 800add6:	d402      	bmi.n	800adde <_ungetc_r+0x28>
 800add8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adda:	f7fd ff48 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	f023 0220 	bic.w	r2, r3, #32
 800ade6:	0758      	lsls	r0, r3, #29
 800ade8:	81a2      	strh	r2, [r4, #12]
 800adea:	d422      	bmi.n	800ae32 <_ungetc_r+0x7c>
 800adec:	06d9      	lsls	r1, r3, #27
 800adee:	d40a      	bmi.n	800ae06 <_ungetc_r+0x50>
 800adf0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800adf2:	07d2      	lsls	r2, r2, #31
 800adf4:	d404      	bmi.n	800ae00 <_ungetc_r+0x4a>
 800adf6:	0599      	lsls	r1, r3, #22
 800adf8:	d402      	bmi.n	800ae00 <_ungetc_r+0x4a>
 800adfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adfc:	f7fd ff38 	bl	8008c70 <__retarget_lock_release_recursive>
 800ae00:	f04f 35ff 	mov.w	r5, #4294967295
 800ae04:	e046      	b.n	800ae94 <_ungetc_r+0xde>
 800ae06:	071b      	lsls	r3, r3, #28
 800ae08:	d50f      	bpl.n	800ae2a <_ungetc_r+0x74>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff fe41 	bl	800aa94 <_fflush_r>
 800ae12:	b120      	cbz	r0, 800ae1e <_ungetc_r+0x68>
 800ae14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae16:	07d8      	lsls	r0, r3, #31
 800ae18:	d4f2      	bmi.n	800ae00 <_ungetc_r+0x4a>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	e7eb      	b.n	800adf6 <_ungetc_r+0x40>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	60a0      	str	r0, [r4, #8]
 800ae22:	f023 0308 	bic.w	r3, r3, #8
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	61a0      	str	r0, [r4, #24]
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f043 0304 	orr.w	r3, r3, #4
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae34:	6862      	ldr	r2, [r4, #4]
 800ae36:	b2ed      	uxtb	r5, r5
 800ae38:	b1d3      	cbz	r3, 800ae70 <_ungetc_r+0xba>
 800ae3a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	dc05      	bgt.n	800ae4c <_ungetc_r+0x96>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ff7d 	bl	800ad42 <__submore>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1e3      	bne.n	800ae14 <_ungetc_r+0x5e>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	1e5a      	subs	r2, r3, #1
 800ae50:	6022      	str	r2, [r4, #0]
 800ae52:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	6063      	str	r3, [r4, #4]
 800ae5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae5e:	07da      	lsls	r2, r3, #31
 800ae60:	d418      	bmi.n	800ae94 <_ungetc_r+0xde>
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	059b      	lsls	r3, r3, #22
 800ae66:	d415      	bmi.n	800ae94 <_ungetc_r+0xde>
 800ae68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae6a:	f7fd ff01 	bl	8008c70 <__retarget_lock_release_recursive>
 800ae6e:	e011      	b.n	800ae94 <_ungetc_r+0xde>
 800ae70:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800ae72:	6920      	ldr	r0, [r4, #16]
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	f001 0101 	and.w	r1, r1, #1
 800ae7a:	b168      	cbz	r0, 800ae98 <_ungetc_r+0xe2>
 800ae7c:	4298      	cmp	r0, r3
 800ae7e:	d20b      	bcs.n	800ae98 <_ungetc_r+0xe2>
 800ae80:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ae84:	42a8      	cmp	r0, r5
 800ae86:	d107      	bne.n	800ae98 <_ungetc_r+0xe2>
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	3201      	adds	r2, #1
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	6062      	str	r2, [r4, #4]
 800ae90:	2900      	cmp	r1, #0
 800ae92:	d0e6      	beq.n	800ae62 <_ungetc_r+0xac>
 800ae94:	4628      	mov	r0, r5
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ae9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aea0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aea2:	2303      	movs	r3, #3
 800aea4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aea6:	4623      	mov	r3, r4
 800aea8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	2301      	movs	r3, #1
 800aeb0:	6063      	str	r3, [r4, #4]
 800aeb2:	e7ed      	b.n	800ae90 <_ungetc_r+0xda>

0800aeb4 <_fstat_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	@ (800aed4 <_fstat_r+0x20>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	f7f7 fa0e 	bl	80022e2 <_fstat>
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d102      	bne.n	800aed0 <_fstat_r+0x1c>
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	b103      	cbz	r3, 800aed0 <_fstat_r+0x1c>
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	bd38      	pop	{r3, r4, r5, pc}
 800aed2:	bf00      	nop
 800aed4:	20000b44 	.word	0x20000b44

0800aed8 <_isatty_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d06      	ldr	r5, [pc, #24]	@ (800aef4 <_isatty_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f7 fa0d 	bl	8002302 <_isatty>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_isatty_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_isatty_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000b44 	.word	0x20000b44

0800aef8 <abort>:
 800aef8:	b508      	push	{r3, lr}
 800aefa:	2006      	movs	r0, #6
 800aefc:	f000 f8fe 	bl	800b0fc <raise>
 800af00:	2001      	movs	r0, #1
 800af02:	f7f7 f9d7 	bl	80022b4 <_exit>

0800af06 <_calloc_r>:
 800af06:	b570      	push	{r4, r5, r6, lr}
 800af08:	fba1 5402 	umull	r5, r4, r1, r2
 800af0c:	b934      	cbnz	r4, 800af1c <_calloc_r+0x16>
 800af0e:	4629      	mov	r1, r5
 800af10:	f7fc fe24 	bl	8007b5c <_malloc_r>
 800af14:	4606      	mov	r6, r0
 800af16:	b928      	cbnz	r0, 800af24 <_calloc_r+0x1e>
 800af18:	4630      	mov	r0, r6
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	220c      	movs	r2, #12
 800af1e:	6002      	str	r2, [r0, #0]
 800af20:	2600      	movs	r6, #0
 800af22:	e7f9      	b.n	800af18 <_calloc_r+0x12>
 800af24:	462a      	mov	r2, r5
 800af26:	4621      	mov	r1, r4
 800af28:	f7fd fd9c 	bl	8008a64 <memset>
 800af2c:	e7f4      	b.n	800af18 <_calloc_r+0x12>

0800af2e <__ascii_mbtowc>:
 800af2e:	b082      	sub	sp, #8
 800af30:	b901      	cbnz	r1, 800af34 <__ascii_mbtowc+0x6>
 800af32:	a901      	add	r1, sp, #4
 800af34:	b142      	cbz	r2, 800af48 <__ascii_mbtowc+0x1a>
 800af36:	b14b      	cbz	r3, 800af4c <__ascii_mbtowc+0x1e>
 800af38:	7813      	ldrb	r3, [r2, #0]
 800af3a:	600b      	str	r3, [r1, #0]
 800af3c:	7812      	ldrb	r2, [r2, #0]
 800af3e:	1e10      	subs	r0, r2, #0
 800af40:	bf18      	it	ne
 800af42:	2001      	movne	r0, #1
 800af44:	b002      	add	sp, #8
 800af46:	4770      	bx	lr
 800af48:	4610      	mov	r0, r2
 800af4a:	e7fb      	b.n	800af44 <__ascii_mbtowc+0x16>
 800af4c:	f06f 0001 	mvn.w	r0, #1
 800af50:	e7f8      	b.n	800af44 <__ascii_mbtowc+0x16>

0800af52 <_realloc_r>:
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	4607      	mov	r7, r0
 800af58:	4614      	mov	r4, r2
 800af5a:	460d      	mov	r5, r1
 800af5c:	b921      	cbnz	r1, 800af68 <_realloc_r+0x16>
 800af5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	4611      	mov	r1, r2
 800af64:	f7fc bdfa 	b.w	8007b5c <_malloc_r>
 800af68:	b92a      	cbnz	r2, 800af76 <_realloc_r+0x24>
 800af6a:	f7fe fd09 	bl	8009980 <_free_r>
 800af6e:	4625      	mov	r5, r4
 800af70:	4628      	mov	r0, r5
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af76:	f000 f8dd 	bl	800b134 <_malloc_usable_size_r>
 800af7a:	4284      	cmp	r4, r0
 800af7c:	4606      	mov	r6, r0
 800af7e:	d802      	bhi.n	800af86 <_realloc_r+0x34>
 800af80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af84:	d8f4      	bhi.n	800af70 <_realloc_r+0x1e>
 800af86:	4621      	mov	r1, r4
 800af88:	4638      	mov	r0, r7
 800af8a:	f7fc fde7 	bl	8007b5c <_malloc_r>
 800af8e:	4680      	mov	r8, r0
 800af90:	b908      	cbnz	r0, 800af96 <_realloc_r+0x44>
 800af92:	4645      	mov	r5, r8
 800af94:	e7ec      	b.n	800af70 <_realloc_r+0x1e>
 800af96:	42b4      	cmp	r4, r6
 800af98:	4622      	mov	r2, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	bf28      	it	cs
 800af9e:	4632      	movcs	r2, r6
 800afa0:	f7fd fe67 	bl	8008c72 <memcpy>
 800afa4:	4629      	mov	r1, r5
 800afa6:	4638      	mov	r0, r7
 800afa8:	f7fe fcea 	bl	8009980 <_free_r>
 800afac:	e7f1      	b.n	800af92 <_realloc_r+0x40>
	...

0800afb0 <_strtoul_l.isra.0>:
 800afb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afb4:	4e34      	ldr	r6, [pc, #208]	@ (800b088 <_strtoul_l.isra.0+0xd8>)
 800afb6:	4686      	mov	lr, r0
 800afb8:	460d      	mov	r5, r1
 800afba:	4628      	mov	r0, r5
 800afbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afc0:	5d37      	ldrb	r7, [r6, r4]
 800afc2:	f017 0708 	ands.w	r7, r7, #8
 800afc6:	d1f8      	bne.n	800afba <_strtoul_l.isra.0+0xa>
 800afc8:	2c2d      	cmp	r4, #45	@ 0x2d
 800afca:	d110      	bne.n	800afee <_strtoul_l.isra.0+0x3e>
 800afcc:	782c      	ldrb	r4, [r5, #0]
 800afce:	2701      	movs	r7, #1
 800afd0:	1c85      	adds	r5, r0, #2
 800afd2:	f033 0010 	bics.w	r0, r3, #16
 800afd6:	d115      	bne.n	800b004 <_strtoul_l.isra.0+0x54>
 800afd8:	2c30      	cmp	r4, #48	@ 0x30
 800afda:	d10d      	bne.n	800aff8 <_strtoul_l.isra.0+0x48>
 800afdc:	7828      	ldrb	r0, [r5, #0]
 800afde:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800afe2:	2858      	cmp	r0, #88	@ 0x58
 800afe4:	d108      	bne.n	800aff8 <_strtoul_l.isra.0+0x48>
 800afe6:	786c      	ldrb	r4, [r5, #1]
 800afe8:	3502      	adds	r5, #2
 800afea:	2310      	movs	r3, #16
 800afec:	e00a      	b.n	800b004 <_strtoul_l.isra.0+0x54>
 800afee:	2c2b      	cmp	r4, #43	@ 0x2b
 800aff0:	bf04      	itt	eq
 800aff2:	782c      	ldrbeq	r4, [r5, #0]
 800aff4:	1c85      	addeq	r5, r0, #2
 800aff6:	e7ec      	b.n	800afd2 <_strtoul_l.isra.0+0x22>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f6      	bne.n	800afea <_strtoul_l.isra.0+0x3a>
 800affc:	2c30      	cmp	r4, #48	@ 0x30
 800affe:	bf14      	ite	ne
 800b000:	230a      	movne	r3, #10
 800b002:	2308      	moveq	r3, #8
 800b004:	f04f 38ff 	mov.w	r8, #4294967295
 800b008:	2600      	movs	r6, #0
 800b00a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b00e:	fb03 f908 	mul.w	r9, r3, r8
 800b012:	ea6f 0909 	mvn.w	r9, r9
 800b016:	4630      	mov	r0, r6
 800b018:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b01c:	f1bc 0f09 	cmp.w	ip, #9
 800b020:	d810      	bhi.n	800b044 <_strtoul_l.isra.0+0x94>
 800b022:	4664      	mov	r4, ip
 800b024:	42a3      	cmp	r3, r4
 800b026:	dd1e      	ble.n	800b066 <_strtoul_l.isra.0+0xb6>
 800b028:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b02c:	d007      	beq.n	800b03e <_strtoul_l.isra.0+0x8e>
 800b02e:	4580      	cmp	r8, r0
 800b030:	d316      	bcc.n	800b060 <_strtoul_l.isra.0+0xb0>
 800b032:	d101      	bne.n	800b038 <_strtoul_l.isra.0+0x88>
 800b034:	45a1      	cmp	r9, r4
 800b036:	db13      	blt.n	800b060 <_strtoul_l.isra.0+0xb0>
 800b038:	fb00 4003 	mla	r0, r0, r3, r4
 800b03c:	2601      	movs	r6, #1
 800b03e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b042:	e7e9      	b.n	800b018 <_strtoul_l.isra.0+0x68>
 800b044:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b048:	f1bc 0f19 	cmp.w	ip, #25
 800b04c:	d801      	bhi.n	800b052 <_strtoul_l.isra.0+0xa2>
 800b04e:	3c37      	subs	r4, #55	@ 0x37
 800b050:	e7e8      	b.n	800b024 <_strtoul_l.isra.0+0x74>
 800b052:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b056:	f1bc 0f19 	cmp.w	ip, #25
 800b05a:	d804      	bhi.n	800b066 <_strtoul_l.isra.0+0xb6>
 800b05c:	3c57      	subs	r4, #87	@ 0x57
 800b05e:	e7e1      	b.n	800b024 <_strtoul_l.isra.0+0x74>
 800b060:	f04f 36ff 	mov.w	r6, #4294967295
 800b064:	e7eb      	b.n	800b03e <_strtoul_l.isra.0+0x8e>
 800b066:	1c73      	adds	r3, r6, #1
 800b068:	d106      	bne.n	800b078 <_strtoul_l.isra.0+0xc8>
 800b06a:	2322      	movs	r3, #34	@ 0x22
 800b06c:	f8ce 3000 	str.w	r3, [lr]
 800b070:	4630      	mov	r0, r6
 800b072:	b932      	cbnz	r2, 800b082 <_strtoul_l.isra.0+0xd2>
 800b074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b078:	b107      	cbz	r7, 800b07c <_strtoul_l.isra.0+0xcc>
 800b07a:	4240      	negs	r0, r0
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	d0f9      	beq.n	800b074 <_strtoul_l.isra.0+0xc4>
 800b080:	b106      	cbz	r6, 800b084 <_strtoul_l.isra.0+0xd4>
 800b082:	1e69      	subs	r1, r5, #1
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	e7f5      	b.n	800b074 <_strtoul_l.isra.0+0xc4>
 800b088:	0800e715 	.word	0x0800e715

0800b08c <_strtoul_r>:
 800b08c:	f7ff bf90 	b.w	800afb0 <_strtoul_l.isra.0>

0800b090 <__ascii_wctomb>:
 800b090:	4603      	mov	r3, r0
 800b092:	4608      	mov	r0, r1
 800b094:	b141      	cbz	r1, 800b0a8 <__ascii_wctomb+0x18>
 800b096:	2aff      	cmp	r2, #255	@ 0xff
 800b098:	d904      	bls.n	800b0a4 <__ascii_wctomb+0x14>
 800b09a:	228a      	movs	r2, #138	@ 0x8a
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	4770      	bx	lr
 800b0a4:	700a      	strb	r2, [r1, #0]
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	4770      	bx	lr

0800b0aa <_raise_r>:
 800b0aa:	291f      	cmp	r1, #31
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	d904      	bls.n	800b0be <_raise_r+0x14>
 800b0b4:	2316      	movs	r3, #22
 800b0b6:	6003      	str	r3, [r0, #0]
 800b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0bc:	bd38      	pop	{r3, r4, r5, pc}
 800b0be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0c0:	b112      	cbz	r2, 800b0c8 <_raise_r+0x1e>
 800b0c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0c6:	b94b      	cbnz	r3, 800b0dc <_raise_r+0x32>
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f000 f831 	bl	800b130 <_getpid_r>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0d8:	f000 b818 	b.w	800b10c <_kill_r>
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d00a      	beq.n	800b0f6 <_raise_r+0x4c>
 800b0e0:	1c59      	adds	r1, r3, #1
 800b0e2:	d103      	bne.n	800b0ec <_raise_r+0x42>
 800b0e4:	2316      	movs	r3, #22
 800b0e6:	6003      	str	r3, [r0, #0]
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	e7e7      	b.n	800b0bc <_raise_r+0x12>
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4798      	blx	r3
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e7e0      	b.n	800b0bc <_raise_r+0x12>
	...

0800b0fc <raise>:
 800b0fc:	4b02      	ldr	r3, [pc, #8]	@ (800b108 <raise+0xc>)
 800b0fe:	4601      	mov	r1, r0
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	f7ff bfd2 	b.w	800b0aa <_raise_r>
 800b106:	bf00      	nop
 800b108:	2000002c 	.word	0x2000002c

0800b10c <_kill_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d07      	ldr	r5, [pc, #28]	@ (800b12c <_kill_r+0x20>)
 800b110:	2300      	movs	r3, #0
 800b112:	4604      	mov	r4, r0
 800b114:	4608      	mov	r0, r1
 800b116:	4611      	mov	r1, r2
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	f7f7 f8bb 	bl	8002294 <_kill>
 800b11e:	1c43      	adds	r3, r0, #1
 800b120:	d102      	bne.n	800b128 <_kill_r+0x1c>
 800b122:	682b      	ldr	r3, [r5, #0]
 800b124:	b103      	cbz	r3, 800b128 <_kill_r+0x1c>
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	bd38      	pop	{r3, r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	20000b44 	.word	0x20000b44

0800b130 <_getpid_r>:
 800b130:	f7f7 b8a8 	b.w	8002284 <_getpid>

0800b134 <_malloc_usable_size_r>:
 800b134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b138:	1f18      	subs	r0, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfbc      	itt	lt
 800b13e:	580b      	ldrlt	r3, [r1, r0]
 800b140:	18c0      	addlt	r0, r0, r3
 800b142:	4770      	bx	lr

0800b144 <_init>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	bf00      	nop
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr

0800b150 <_fini>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr
